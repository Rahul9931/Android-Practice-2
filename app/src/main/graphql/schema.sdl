type Query {
  """
  The AssignedOrderList Query.
  """
  AssignedOrderList("" storeId: Int, "" userToken: String): AssignedOrderList

  """
  The Dashboard query.
  """
  Dashboard("" storeId: Int, "" os: String, "" websiteId: Int, "" userToken: String): Dashboard

  """
  The Dashboard query.
  """
  DashboardV2("" storeId: Int, "" os: String, "" websiteId: Int, "" userToken: String, "" overviewType: String): DashboardV2

  """
  The DeliveryboyDetails query.
  """
  DeliveryboyDetails("" storeId: Int, "" mFactor: Float, "" deliveryboyId: Int, "" userToken: String): DeliveryboyDetails

  """
  The ForgotPassword Query.
  """
  ForgotPassword("" storeId: Int, "" email: String): ForgotPassword

  """
  The GetAcceptStatus Query.
  """
  GetAcceptStatus("" storeId: Int, "" userToken: String): GetAcceptStatus

  """
  The GetDeliveryBoyList Query.
  """
  GetDeliveryboyList("" mFactor: Float, "" storeId: Int, "" pageNumber: Int, "" purpose: String, "" orderId: Int, "" userToken: String): GetDeliveryBoyList

  """
  The GetDeliveryboyReviewList Query.
  """
  GetDeliveryboyReviewList("" pageNumber: Int, "" storeId: Int, "" deliveryboyId: Int, "" userToken: String): GetDeliveryboyReviewList

  """
  The GetDisapprovedDeliveryboyList Query.
  """
  GetDisapprovedDeliveryboyList("" mFactor: Float, "" storeId: Int, "" pageNumber: Int, "" userToken: String): GetDisapprovedDeliveryboyList

  """
  The GetLocation Query.
  """
  GetLocation("" storeId: Int, "" deliveryboyId: String): GetLocation

  """
  The GetOrderComments Query.
  """
  GetOrderComments("" pageNumber: Int, "" storeId: Int, "" incrementId: String, "" deliveryboyOrderId: Int, "" userToken: String): GetOrderComments

  """
  Query to get Order information.
  """
  GetOrderInfo("" storeId: Int, "" incrementId: String): GetOrderInfo

  """
  The GetRegistrationConfig Query.
  """
  GetRegistrationConfig("" storeId: Int): GetRegistrationConfig

  """
  The GetWarehouseAddress Query.
  """
  GetWarehouseAddress("" storeId: Int, "" userToken: String): GetWarehouseAddress

  """
  Query to check if customer exist or not.
  """
  IsCustomerExists("" storeId: Int, "" os: String, "" customerId: Int): IsCustomerExists

  """
  The Login query.
  """
  Login("" storeId: Int, "" os: String, "" token: String, "" mFactor: Float, "" username: String, "" password: String, "" websiteId: Int, "" isDeliveryboy: Int): Login

  """
  The Orderdetails query.
  """
  OrderDetailsDeliveryboy("" storeId: Int, "" os: String, "" width: Float, "" incrementId: String, "" userToken: String): OrderDetailsDeliveryboy

  """
  The Orderlist query.
  """
  Orderlist("" storeId: Int, "" os: String, "" status: String, "" dateTo: String, "" dateFrom: String, "" sortField: String, "" sortDir: String, "" pageNumber: Int, "" incrementId: String, "" acceptStatus: Int, "" assignStatus: Boolean, "" deliveryboyId: Int, "" userToken: String): Orderlist

  """
  customer account information
  """
  accountInfoData("" customerToken: String, "" storeId: Int): AccountInfoData

  """
  address book information
  """
  addressBookData("" customerToken: String, "" storeId: Int, "" forDashboard: Int): AddressBookData

  """
  address form information
  """
  addressFormData("" customerToken: String, "" storeId: Int, "" addressId: Int): AddressFormDataRequest

  """
  advanced search form data information
  """
  advancedSearchFormData("" storeId: Int): AdvancedSearchFormData

  """
  Retrieve EAV attributes associated to a frontend form. Use countries query provided by DirectoryGraphQl module to retrieve region_id and country_id attribute options.
  """
  attributesForm("Form code." formCode: String!): AttributesFormOutput!

  """
  Returns a list of attributes metadata for a given entity type.
  """
  attributesList("Entity type." entityType: AttributeEntityTypeEnum!, "Identifies which filter inputs to search for and return." filters: AttributeFilterInput): AttributesMetadataOutput

  """
  Get a list of available store views and their config information.
  """
  availableStores("Filter store views by the current store group." useCurrentGroup: Boolean): [StoreConfig]

  """
  Return information about the specified shopping cart.
  """
  cart("The unique ID of the cart to query." cart_id: String!): Cart

  """
  cart information
  """
  cartDetails("" width: String, "" quoteId: Int, "" customerToken: String, "" storeId: Int, "" currency: String, "" pageNumber: Int): CartDetails

  """
  Return a list of categories that match the specified filter.
  """
  categories("Identifies which Category filter inputs to search for and return." filters: CategoryFilterInput, "Specifies the maximum number of results to return at once. The default value is 20." pageSize: Int = 20, "Specifies which page of results to return. The default value is 1." currentPage: Int = 1): CategoryResult

  """
  Search for categories that match the criteria specified in the `search` and `filter` attributes.
  """
  category("The category ID to use as the root of the search." id: Int): CategoryTree @deprecated(reason: "Use `categories` instead.")

  """
  Return an array of categories based on the specified filters.
  """
  categoryList("Identifies which Category filter inputs to search for and return." filters: CategoryFilterInput, "Specifies the maximum number of results to return at once. The default value is 20." pageSize: Int = 20, "Specifies which page of results to return. The default value is 1." currentPage: Int = 1): [CategoryTree] @deprecated(reason: "Use `categories` instead.")

  """
  category page all information
  """
  categoryPageData("" customerToken: String, "" storeId: Int, "" categoryId: Int, "" currency: String, "" width: String, "" quoteId: Int, "" mFactor: String): CategoryPageData

  """
  check customer by email information
  """
  checkCustomerByEmail("" email: String, "" storeId: Int): CheckCustomerByEmail

  """
  checkout address information
  """
  checkoutAddress("" quoteId: Int, "" customerToken: String, "" storeId: Int): CheckoutAddress

  """
  checkout address form data information
  """
  checkoutAddressFormData("" isGuest: Boolean, "" customerToken: String, "" storeId: Int, "" addressId: Int): CheckoutAddressFormData

  """
  Return Terms and Conditions configuration information.
  """
  checkoutAgreements: [CheckoutAgreement]

  """
  Return information about CMS blocks.
  """
  cmsBlocks("An array of CMS block IDs." identifiers: [String]): CmsBlocks

  """
  cms data information
  """
  cmsData("" id: Int): CmsData

  """
  Return details about a CMS page.
  """
  cmsPage("The ID of the CMS page." id: Int, "The identifier of the CMS page." identifier: String): CmsPage

  """
  Return products that have been added to the specified compare list.
  """
  compareList("The unique ID of the compare list to be queried." uid: ID!): CompareList

  """
  The countries query provides information for all countries.
  """
  countries: [Country]

  """
  The countries query provides information for a single country.
  """
  country("" id: String): Country

  """
  create account form data information
  """
  createAccountFormData("" storeId: Int): CreateAccountFormData

  """
  customer credit memo view information
  """
  creditView("" storeId: Int, "" creditMemoId: String, "" customerToken: String): CreditView

  """
  Return information about the store's currency.
  """
  currency: Currency

  """
  Return the attribute type, given an attribute code and entity type.
  """
  customAttributeMetadata("An input object that specifies the attribute code and entity type to search." attributes: [AttributeInput!]!): CustomAttributeMetadata @deprecated(reason: "Use `customAttributeMetadataV2` query instead.")

  """
  Retrieve EAV attributes metadata.
  """
  customAttributeMetadataV2("" attributes: [AttributeInput!]): AttributesMetadataOutput!

  """
  custom collection information
  """
  customCollection("" storeId: Int, "" quoteId: Int, "" width: String, "" sortData: String, "" pageNumber: Int, "" filterData: String, "" customerToken: String, "" notificationId: Int): CustomCollection

  """
  Return detailed information about a customer account.
  """
  customer: Customer

  """
  Return information about the customer's shopping cart.
  """
  customerCart: Cart!

  """
  compare list information
  """
  customerCompareList("" storeId: Int, "" customerToken: String, "" width: String, "" mFactor: String, "" currency: String): CompareList

  """
  Return a list of downloadable products the customer has purchased.
  """
  customerDownloadableProducts: CustomerDownloadableProducts

  customerOrders: CustomerOrders @deprecated(reason: "Use the `customer` query instead.")

  """
  Return a list of customer payment tokens stored in the vault.
  """
  customerPaymentTokens: CustomerPaymentTokens

  """
  download product information
  """
  downloadProduct("" hash: String, "" customerToken: String): DownloadProduct

  """
  category list information
  """
  getCategoryList("" storeId: Int): GetCategoryList

  """
  get Qr URL for Watch App
  """
  getWatchQr("" firebaseId: String, "" os: String, "" width: Int): WatchQr

  """
  Retrieve guest order details based on number, email and postcode.
  """
  guestOrder("" input: OrderInformationInput!): CustomerOrder!

  """
  Retrieve guest order details based on token.
  """
  guestOrderByToken("" input: OrderTokenInput!): CustomerOrder!

  """
  guest order view information
  """
  guestView("" storeId: Int, "" incrementId: String, "" lastName: String, "" email: String, "" type: String, "" zipCode: String): GuestView

  """
  home page all information
  """
  homePageData("" customerToken: String, "" storeId: Int, "" websiteId: Int, "" currency: String, "" url: String, "" width: String, "" quoteId: Int, "" mFactor: String, "" isFromUrl: String): HomePageData

  """
  customer invoice view information
  """
  invoiceView("" storeId: Int, "" invoiceId: Int, "" customerToken: String): InvoiceView

  """
  Check whether the specified email has already been used to create a customer account.
  """
  isEmailAvailable("The email address to check." email: String!): IsEmailAvailableOutput

  """
  download list information
  """
  myDownloadsList("" storeId: Int, "" pageNumber: Int, "" customerToken: String): MyDownloadsList

  """
  custom collection information
  """
  notificationList("" storeId: Int, "" width: String, "" mFactor: Int): NotificationList

  """
  order details information
  """
  orderDetails("" storeId: Int, "" customerToken: String, "" incrementId: String): OrderDetails

  """
  order list information
  """
  orderList("" storeId: Int, "" customerToken: String, "" pageNumber: Int, "" forDashboard: Int, "" requiredCount: Int): OrderList

  """
  other notification information
  """
  otherNotificationData("" notificationId: Int): OtherNotificationData

  """
  The pickup locations query searches for locations that match the search request requirements.
  """
  pickupLocations("Perform search by location using radius and search term." area: AreaInput, "Apply filters by attributes." filters: PickupLocationFilterInput, "Specifies which attribute to sort on, and whether to return the results in ascending or descending order." sort: PickupLocationSortInput, "The maximum number of pickup locations to return at once. The attribute is optional." pageSize: Int = 20, "Specifies which page of results to return. The default value is 1." currentPage: Int = 1, "Information about products which should be delivered." productsInfo: [ProductInfoInput]): PickupLocations

  """
  price alert information
  """
  price("" storeId: Int, "" productId: Int, "" customerToken: String): DefaultResponse

  """
  Download Invoice
  """
  printInvoice("" customerToken: String, "" storeId: Int, "" invoiceId: Int, "" incrementId: String): PrintInvoice

  """
  product collection all information
  """
  productCollection("" customerToken: String, "" storeId: Int, "" currency: String, "" width: String, "" quoteId: Int, "" mFactor: String, "" id: String, "" type: String, "" sortData: collectionSort, "" filterData: [collectionFilter], "" pageNumber: Int): ProductCollection

  """
  product page all information
  """
  productPageData("" customerToken: String, "" storeId: Int, "" productId: Int, "" currency: String, "" width: String, "" quoteId: Int, "" sku: String): ProductPageData

  """
  Return the active ratings attributes and the values each rating can have.
  """
  productReviewRatingsMetadata: ProductReviewRatingsMetadata!

  """
  share products by mail
  """
  productShare("" storeId: Int, "" message: String!, "" productId: Int!, "" customerName: String, "" customerEmail: String, "" recipientName: [String], "" recipientEmail: [String]): DefaultResponse

  """
  Search for products that match the criteria specified in the `search` and `filter` attributes.
  """
  products("One or more keywords to use in a full-text search." search: String, "The product attributes to search for and return." filter: ProductAttributeFilterInput, "The maximum number of results to return at once. The default value is 20." pageSize: Int = 20, "The page of results to return. The default value is 1." currentPage: Int = 1, "Specifies which attributes to sort on, and whether to return the results in ascending or descending order." sort: ProductAttributeSortInput): Products

  """
  rating form data information
  """
  ratingFormData("" storeId: Int): RatingForm

  """
  Returns details about Google reCAPTCHA V3-Invisible configuration.
  """
  recaptchaV3Config: ReCaptchaConfigurationV3

  """
  review and payment information
  """
  reviewAndPayment("" shippingMethod: String, "" customerToken: String, "" storeId: Int, "" quoteId: Int, "" currency: String): ReviewAndPayment

  """
  review details information
  """
  reviewDetails("" storeId: Int, "" width: Int, "" customerToken: String, "" reviewId: Int): ReviewDetails

  """
  review list information
  """
  reviewList("" storeId: Int, "" customerToken: String, "" pageNumber: Int, "" forDashboard: Int, "" width: Int): ReviewListData

  """
  reviews And Ratings information
  """
  reviewsAndRatings("" storeId: Int, "" url: String, "" width: String, "" productId: Int, "" websiteId: Int, "" pageNumber: Int, "" customerToken: String): ReviewsAndRatings

  """
  Return the full details for a specified product, category, or CMS page.
  """
  route("A `url_key` appended by the `url_suffix, if one exists." url: String!): RoutableInterface

  """
  search suggestion information
  """
  searchSuggestion("" storeId: Int, "" categoryId: Int, "" searchQuery: String, "" currency: String, "" customerToken: String): SearchSuggestion

  """
  search term list information
  """
  searchTermList("" storeId: Int): SearchTermList

  """
  shipment view information
  """
  shipmentView("" storeId: Int, "" customerToken: String, "" shipmentId: Int): ShipmentView

  """
  shipping methods information
  """
  shippingMethods("" shippingData: shippingDataInput, "" customerToken: String, "" storeId: Int, "" quoteId: Int, "" currency: String): ShippingMethods

  """
  stock alert information
  """
  stock("" storeId: Int, "" productId: Int, "" customerToken: String): DefaultResponse

  """
  Return details about the store's configuration.
  """
  storeConfig: StoreConfig

  """
  Upsell product list information
  """
  upsellProductList("" storeId: Int, "" url: String, "" width: String, "" productId: Int, "" websiteId: Int, "" pageNumber: Int, "" customerToken: String): UpsellProductList

  """
  Return the relative URL for a specified product, category or CMS page.
  """
  urlResolver("A `url_key` appended by the `url_suffix, if one exists." url: String!): EntityUrl @deprecated(reason: "Use the `route` query instead.")

  """
  walkthrough information
  """
  walkthrough("" width: String): WalkThrough

  """
  wishlist information
  """
  wishlist("" storeId: Int, "" pageNumber: Int, "" customerToken: String, "" currency: String, "" width: String): Wishlist @deprecated(reason: "Moved under `Customer.wishlist`.")
}

type Mutation {
  """
  The AcceptOrder mutation.
  """
  AcceptOrder("" storeId: Int, "" comment: String, "" incrementId: String, "" assignStatus: Int, "" userToken: String): AcceptOrder

  """
  The AddComment mutation.
  """
  AddComment("" comment: String, "" storeId: Int, "" incrementId: String, "" deliveryboyOrderId: Int, "" userToken: String): AddComment

  """
  The AddReview mutation.
  """
  AddReview("" storeId: Int, "" title: String, "" rating: Int, "" comment: String, "" customerId: Int, "" deliveryboyId: Int, "" orderId: Int): AddReview

  """
  The ApproveDeliveryboy mutation.
  """
  ApproveDeliveryboy("" storeId: Int, "" mFactor: Float, "" deliveryboyId: Int, "" isApproved: Int, "" userToken: String): ApproveDeliveryboy

  """
  The AssignOrder mutation.
  """
  AssignOrder("" storeId: Int, "" incrementId: String, "" deliveryboyId: Int, "" userToken: String): AssignOrder

  """
  The ChangeDeliveryboyStatus Query.
  """
  ChangeDeliveryboyStatus("" storeId: Int, "" onlineStatus: Int, "" userToken: String): ChangeDeliveryboyStatus

  """
  The DeleteAccount mutation.
  """
  DeleteAccount("" storeId: Int, "" userToken: String!): DeleteAccount

  """
  The DeleteDeliveryboy mutation.
  """
  DeleteDeliveryboy("" storeId: Int, "" deliveryboyId: Int, "" userToken: String): DeleteDeliveryboy

  """
  The DeleteDeliveryboyReview mutation.
  """
  DeleteDeliveryboyReview("" storeId: Int, "" ratingId: Int, "" userToken: String): DeleteDeliveryboyReview

  """
  The DeleteReview mutation.
  """
  DeleteReview("" storeId: Int, "" ratingId: Int, "" userToken: String): DeleteReview

  """
  The Deliver mutation.
  """
  Deliver("" storeId: Int, "" incrementId: String, "" otp: String, "" amount: Float, "" userToken: String): Deliver

  """
  The EditDeliveryboyReview mutation.
  """
  EditDeliveryboyReview("" storeId: Int, "" pageNumber: Int, "" ratingId: Int, "" mFactor: Float, "" status: Boolean, "" title: String, "" rating: Int, "" comment: String, "" customerId: Int, "" deliveryboyId: Int, "" userToken: String): EditDeliveryboyReview

  """
  The EditReview mutation.
  """
  EditReview("" storeId: Int, "" title: String, "" ratingId: Int, "" comment: String, "" status: Boolean, "" userToken: String): EditReview

  """
  The Logout mutation.
  """
  Logout("" storeId: Int, "" token: String): Logout

  """
  The RegisterDeliveryBoy mutation.
  """
  RegisterDeliveryBoy("" name: String, "" storeId: Int, "" email: String, "" status: Boolean, "" password: String, "" approveStatus: Boolean, "" fullAddress: String, "" vehicleType: String, "" confpassword: String, "" mobileNumber: String, "" deliveryboyId: Int, "" vehicleNumber: String, "" adminCustomerEmail: String, "" imageEncoded: String!, "" imageName: String!): RegisterDeliveryBoy

  """
  The ResetPassword mutation.
  """
  ResetPassword("" storeId: Int, "" email: String, "" isAdmin: Boolean, "" token: String, "" password: String, "" confpassword: String): ResetPassword

  """
  The SaveDeliveryboy mutation.
  """
  SaveDeliveryboy("" name: String, "" storeId: Int, "" email: String, "" status: Boolean, "" password: String, "" approveStatus: Boolean, "" fullAddress: String, "" vehicleType: String, "" confpassword: String, "" mobileNumber: String, "" deliveryboyId: Int, "" vehicleNumber: String, "" userToken: String, "" imageEncoded: String!, "" imageName: String!): SaveDeliveryboy

  """
  The SaveToken mutation.
  """
  SaveToken("" storeId: Int, "" os: String, "" token: String): SaveToken

  """
  The SaveWarehouseAddress Query.
  """
  SaveWarehouseAddress("" storeId: Int, "" userToken: String): SaveWarehouseAddress

  """
  The SetLocation mutation.
  """
  SetLocation("" storeId: Int, "" latitude: Float, "" longitude: Float, "" userToken: String): SetLocation

  """
  The SetStatusOrderPickedup mutation.
  """
  SetStatusOrderPickedup("" storeId: Int, "" incrementId: String, "" userToken: String): SetStatusOrderPickedup

  """
  Remove from compare request
  """
  accountCreate("" storeId: Int, "" orderId: Int): DefaultResponse

  """
  Add one or more bundle products to the specified cart. We recommend using `addProductsToCart` instead.
  """
  addBundleProductsToCart("An input object that defines which bundle products to add to the cart." input: AddBundleProductsToCartInput): AddBundleProductsToCartOutput

  """
  Add one or more configurable products to the specified cart. We recommend using `addProductsToCart` instead.
  """
  addConfigurableProductsToCart("An input object that defines which configurable products to add to the cart." input: AddConfigurableProductsToCartInput): AddConfigurableProductsToCartOutput

  """
  Add one or more downloadable products to the specified cart. We recommend using `addProductsToCart` instead.
  """
  addDownloadableProductsToCart("An input object that defines which downloadable products to add to the cart." input: AddDownloadableProductsToCartInput): AddDownloadableProductsToCartOutput

  """
  Add any type of product to the cart.
  """
  addProductsToCart("The cart ID of the shopper." cartId: String!, "An array that defines the products to add to the cart." cartItems: [CartItemInput!]!): AddProductsToCartOutput

  """
  Add products to the specified compare list.
  """
  addProductsToCompareList("An input object that defines which products to add to an existing compare list." input: AddProductsToCompareListInput): CompareList

  """
  Add one or more products to the specified wish list. This mutation supports all product types.
  """
  addProductsToWishlist("The ID of a wish list." wishlistId: ID!, "An array of products to add to the wish list." wishlistItems: [WishlistItemInput!]!): AddProductsToWishlistOutput

  """
  Add one or more simple products to the specified cart. We recommend using `addProductsToCart` instead.
  """
  addSimpleProductsToCart("An input object that defines which simple products to add to the cart." input: AddSimpleProductsToCartInput): AddSimpleProductsToCartOutput

  """
  Add to cart request
  """
  addToCart("" storeId: Int, "" productId: Int, "" quoteId: Int, "" customerToken: String, "" qty: Int, "" params: addToCartParams, "" relatedProducts: [Int]): AddToCart

  """
  Add to compare request
  """
  addToCompare("" storeId: Int, "" productId: Int!, "" customerToken: String): DefaultResponse

  """
  Add to wishlist request
  """
  addToWishlist("" storeId: Int, "" productId: Int!, "" customerToken: String, "" params: String): AddToWishlist

  """
  Add one or more virtual products to the specified cart. We recommend using `addProductsToCart` instead.
  """
  addVirtualProductsToCart("An input object that defines which virtual products to add to the cart." input: AddVirtualProductsToCartInput): AddVirtualProductsToCartOutput

  """
  Add items in the specified wishlist to the customer's cart.
  """
  addWishlistItemsToCart("The unique ID of the wish list" wishlistId: ID!, "An array of IDs representing products to be added to the cart. If no IDs are specified, all items in the wishlist will be added to the cart" wishlistItemIds: [ID!]): AddWishlistItemsToCartOutput

  """
  wishlist all to cart request
  """
  allToCart("" storeId: Int, "" websiteId: Int, "" customerToken: String, "" itemData: [cartItemData]): AllToCart

  """
  Apply coupon code request
  """
  applyCoupon("" storeId: Int, "" couponCode: String, "" removeCoupon: Int, "" quoteId: Int, "" customerToken: String): DefaultResponse

  """
  Apply a pre-defined coupon code to the specified cart.
  """
  applyCouponToCart("An input object that defines the coupon code to apply to the cart." input: ApplyCouponToCartInput): ApplyCouponToCartOutput

  """
  Assign the specified compare list to the logged in customer.
  """
  assignCompareListToCustomer("The unique ID of the compare list to be assigned." uid: ID!): AssignCompareListToCustomerOutput

  """
  Assign a logged-in customer to the specified guest shopping cart.
  """
  assignCustomerToGuestCart("" cart_id: String!): Cart!

  """
  Cancel the specified customer order.
  """
  cancelOrder("" input: CancelOrderInput!): CancelOrderOutput

  """
  Change the password for the logged-in customer.
  """
  changeCustomerPassword("The customer's original password." currentPassword: String!, "The customer's updated password." newPassword: String!): Customer

  """
  change order status request
  """
  changeOrderStatus("" storeId: Int, "" status: Int, "" state: String, "" incrementId: String, "" transactionId: String, "" customerToken: String): DefaultResponse

  """
  Confirms the email address for a customer.
  """
  confirmEmail("An input object to identify the customer to confirm the email." input: ConfirmEmailInput!): CustomerOutput

  """
  contact admin request
  """
  contact("" storeId: Int, "" name: String, "" email: String, "" comment: String, "" telephone: String): DefaultResponse

  """
  Send a 'Contact Us' email to the merchant.
  """
  contactUs("An input object that defines shopper information." input: ContactUsInput!): ContactUsOutput

  """
  create account request
  """
  createAccount("" storeId: Int, "" os: String, "" email: String, "" dob: String, "" width: String, "" token: String, "" mobile: String, "" prefix: String, "" suffix: String, "" taxvat: String, "" gender: String, "" mFactor: Int, "" quoteId: Int, "" isSocial: Int, "" firstName: String, "" lastName: String, "" websiteId: Int, "" password: String, "" pictureUrl: String, "" middleName: String, "" orderId: Int): CreateAccount

  """
  Create a new compare list. The compare list is saved for logged in customers.
  """
  createCompareList("" input: CreateCompareListInput): CompareList

  """
  Use `createCustomerV2` instead.
  """
  createCustomer("An input object that defines the customer to be created." input: CustomerInput!): CustomerOutput

  """
  Create a billing or shipping address for a customer or guest.
  """
  createCustomerAddress("" input: CustomerAddressInput!): CustomerAddress

  """
  Create a customer account.
  """
  createCustomerV2("An input object that defines the customer to be created." input: CustomerCreateInput!): CustomerOutput

  """
  Create an empty shopping cart for a guest or logged in user
  """
  createEmptyCart("An optional input object that assigns the specified ID to the cart." input: createEmptyCartInput): String @deprecated(reason: "Use `Mutation.createGuestCart` or `Query.customerCart` for logged in customer")

  """
  Create a new shopping cart
  """
  createGuestCart("" input: CreateGuestCartInput): CreateGuestCartOutput

  """
  Create a product review for the specified product.
  """
  createProductReview("An input object that contains the details necessary to create a product review." input: CreateProductReviewInput!): CreateProductReviewOutput!

  """
  Delete customer account
  """
  deleteAccount("" websiteId: Int, "" storeId: Int, "" customerToken: String, "" password: String, "" confirmPassword: String): DeleteAccount

  """
  delete address request
  """
  deleteAddress("" addressId: Int, "" customerToken: String): DefaultResponse

  """
  Delete the specified compare list.
  """
  deleteCompareList("The unique ID of the compare list to be deleted." uid: ID!): DeleteCompareListOutput

  """
  Delete customer account
  """
  deleteCustomer: Boolean

  """
  Delete the billing or shipping address of a customer.
  """
  deleteCustomerAddress("The ID of the customer address to be deleted." id: Int!): Boolean

  """
  Delete a customer's payment token.
  """
  deletePaymentToken("The reusable payment token securely stored in the vault." public_hash: String!): DeletePaymentTokenOutput

  """
  cart empty request
  """
  emptyCart("" storeId: Int, "" quoteId: Int, "" customerToken: String): DefaultResponse

  """
  Estimate shipping method(s) for cart based on address
  """
  estimateShippingMethods("An input object that specifies details for estimation of available shipping methods" input: EstimateTotalsInput!): [AvailableShippingMethod]

  """
  Estimate totals for cart based on the address
  """
  estimateTotals("An input object that specifies details for cart totals estimation" input: EstimateTotalsInput!): EstimateTotalsOutput!

  """
  forgot password request
  """
  forgotPassword("" email: String, "" storeId: Int, "" websiteId: Int): DefaultResponse

  """
  Generate a token for specified customer.
  """
  generateCustomerToken("The customer's email address." email: String!, "The customer's password." password: String!): CustomerToken

  """
  Request a customer token so that an administrator can perform remote shopping assistance.
  """
  generateCustomerTokenAsAdmin("An input object that defines the customer email address." input: GenerateCustomerTokenAsAdminInput!): GenerateCustomerTokenAsAdminOutput

  """
  guest re order request
  """
  guestReOrder("" storeId: Int, "" incrementId: String, "" quoteId: Int): GuestReOrder

  """
  customer login request
  """
  login("" os: String, "" storeId: Int, "" websiteId: Int, "" width: String, "" token: String, "" mobile: String, "" quoteId: Int, "" mFactor: Int, "" username: String, "" password: String): Login

  """
  logout request
  """
  logout("" storeId: Int, "" customerToken: String, "" token: String): DefaultResponse

  """
  Transfer the contents of a guest cart into the cart of a logged-in customer.
  """
  mergeCarts("The guest's cart ID before they login." source_cart_id: String!, "The cart ID after the guest logs in." destination_cart_id: String): Cart!

  """
  place order request
  """
  placeOrder("An input object that defines the shopper's cart ID." input: PlaceOrderInput, "" storeId: Int, "" quoteId: Int, "" customerToken: String, "" token: String, "" paymentMethod: String, "" ccCid: Int, "" ccType: String, "" ccNumber: Int, "" ccExpYear: Int, "" ccExpMonth: Int, "" billingData: shippingDataInput, "" checkoutMethod: String, "" purchasePoint: String, "" currency: String): PlaceOrder

  """
  re order request
  """
  reOrder("" storeId: Int, "" customerToken: String, "" incrementId: String): ReOrder

  """
  register device request
  """
  registerDevice("" os: String, "" customerToken: String, "" token: String): DefaultResponse

  """
  remove cart item request
  """
  removeCartItem("" storeId: Int, "" quoteId: Int, "" customerToken: String, "" itemId: Int): RemoveCartItem

  """
  Remove a previously-applied coupon from the cart. The cart must contain at least one item in order to remove the coupon.
  """
  removeCouponFromCart("An input object that defines which coupon code to remove from the cart." input: RemoveCouponFromCartInput): RemoveCouponFromCartOutput

  """
  Remove from compare request
  """
  removeFromCompare("" storeId: Int, "" productId: Int!, "" customerToken: String): DefaultResponse

  """
  remove from wishlist request
  """
  removeFromWishlist("" storeId: Int, "" customerToken: String, "" itemId: Int): RemoveFromWishlist

  """
  Delete the entire quantity of a specified item from the cart. If you remove all items from the cart, the cart continues to exist.
  """
  removeItemFromCart("An input object that defines which products to remove from the cart." input: RemoveItemFromCartInput): RemoveItemFromCartOutput

  """
  Remove products from the specified compare list.
  """
  removeProductsFromCompareList("An input object that defines which products to remove from a compare list." input: RemoveProductsFromCompareListInput): CompareList

  """
  Remove one or more products from the specified wish list.
  """
  removeProductsFromWishlist("The ID of a wish list." wishlistId: ID!, "An array of item IDs representing products to be removed." wishlistItemsIds: [ID!]!): RemoveProductsFromWishlistOutput

  """
  Add all products from a customer's previous order to the cart.
  """
  reorderItems("" orderNumber: String!): ReorderItemsOutput

  """
  Request an email with a reset password token for the registered customer identified by the specified email.
  """
  requestPasswordResetEmail("The customer's email address." email: String!): Boolean

  """
  Reset a customer's password using the reset password token that the customer received in an email after requesting it using `requestPasswordResetEmail`.
  """
  resetPassword("The customer's email address." email: String!, "A runtime token generated by the `requestPasswordResetEmail` mutation." resetPasswordToken: String!, "The customer's new password." newPassword: String!): Boolean

  """
  Revoke the customer token.
  """
  revokeCustomerToken: RevokeCustomerTokenOutput

  """
  save account info request
  """
  saveAccountInfo("" storeId: Int, "" customerToken: String, "" dob: String, "" email: String, "" mobile: String, "" prefix: String, "" suffix: String, "" taxvat: String, "" gender: Int, "" lastName: String, "" firstName: String, "" middleName: String, "" newPassword: String, "" doChangePassword: Int, "" confirmPassword: String, "" currentPassword: String, "" doChangeEmail: Boolean): SaveAccountInfo

  """
  save address request
  """
  saveAddress("" storeId: Int, "" addressId: Int, "" customerToken: String, "" addressData: saveAddressDataInput): DefaultResponse

  """
  save review request
  """
  saveReview("" title: String, "" detail: String, "" storeId: Int, "" productId: Int, "" nickname: String, "" customerToken: String, "" ratings: [reviewRatings]): DefaultResponse

  """
  Send a message on behalf of a customer to the specified email addresses.
  """
  sendEmailToFriend("An input object that defines sender, recipients, and product." input: SendEmailToFriendInput): SendEmailToFriendOutput

  """
  Set the billing address on a specific cart.
  """
  setBillingAddressOnCart("An input object that defines the billing address to be assigned to the cart." input: SetBillingAddressOnCartInput): SetBillingAddressOnCartOutput

  """
  Assign the email address of a guest to the cart.
  """
  setGuestEmailOnCart("An input object that defines a guest email address." input: SetGuestEmailOnCartInput): SetGuestEmailOnCartOutput

  """
  Set the cart payment method and convert the cart into an order.
  """
  setPaymentMethodAndPlaceOrder("" input: SetPaymentMethodAndPlaceOrderInput): PlaceOrderOutput @deprecated(reason: "Should use setPaymentMethodOnCart and placeOrder mutations in single request.")

  """
  Apply a payment method to the cart.
  """
  setPaymentMethodOnCart("An input object that defines which payment method to apply to the cart." input: SetPaymentMethodOnCartInput): SetPaymentMethodOnCartOutput

  """
  Set one or more shipping addresses on a specific cart.
  """
  setShippingAddressesOnCart("An input object that defines one or more shipping addresses to be assigned to the cart." input: SetShippingAddressesOnCartInput): SetShippingAddressesOnCartOutput

  """
  Set one or more delivery methods on a cart.
  """
  setShippingMethodsOnCart("An input object that applies one or more shipping methods to the cart." input: SetShippingMethodsOnCartInput): SetShippingMethodsOnCartOutput

  """
  share wishlist request
  """
  shareWishlist("" storeId: Int, "" emails: String, "" message: String, "" websiteId: Int, "" customerToken: String): ShareWishlist

  """
  Subscribe the specified email to the store's newsletter.
  """
  subscribeEmailToNewsletter("The email address that will receive the store's newsletter." email: String!): SubscribeEmailToNewsletterOutput

  """
  update cart request
  """
  updateCart("" storeId: Int, "" quoteId: Int, "" customerToken: String, "" itemData: [cartItemData]): UpdateCart

  """
  Modify items in the cart.
  """
  updateCartItems("An input object that defines products to be updated." input: UpdateCartItemsInput): UpdateCartItemsOutput

  """
  Use `updateCustomerV2` instead.
  """
  updateCustomer("An input object that defines the customer characteristics to update." input: CustomerInput!): CustomerOutput

  """
  Update the billing or shipping address of a customer or guest.
  """
  updateCustomerAddress("The ID assigned to the customer address." id: Int!, "An input object that contains changes to the customer address." input: CustomerAddressInput): CustomerAddress

  """
  Change the email address for the logged-in customer.
  """
  updateCustomerEmail("The customer's email address." email: String!, "The customer's password." password: String!): CustomerOutput

  """
  Update the customer's personal information.
  """
  updateCustomerV2("An input object that defines the customer characteristics to update." input: CustomerUpdateInput!): CustomerOutput

  """
  update cart item options request
  """
  updateItemOptions("" storeId: Int, "" quoteId: Int, "" customerToken: String, "" productId: Int, "" itemId: Int, "" qty: Int, "" params: [String], "" relatedProducts: String): UpdateItemOptions

  """
  Update one or more products in the specified wish list.
  """
  updateProductsInWishlist("The ID of a wish list." wishlistId: ID!, "An array of items to be updated." wishlistItems: [WishlistItemUpdateInput!]!): UpdateProductsInWishlistOutput

  """
  update wishlist request
  """
  updateWishlist("" itemData: String, "" customerToken: String): DefaultResponse

  """
  Upload banner image for customer
  """
  uploadBannerPic("" width: String, "" mFactor: String, "" customerToken: String!, "" imageEncoded: String!, "" imageName: String!): UploadBannerPic

  """
  Upload banner image for customer
  """
  uploadProfilePic("" width: String, "" mFactor: String, "" customerToken: String!, "" imageEncoded: String!, "" imageName: String!): UploadBannerPic

  """
  Login customer in Watch App
  """
  watchLogin("" firebaseId: String, "" customerToken: String): WatchLogin

  """
  wishlist from cart request
  """
  wishlistFromCart("" storeId: Int, "" customerToken: String, "" itemId: Int): WishlistFromCart

  """
  wishlist to cart request
  """
  wishlistToCart("" itemId: Int, "" storeId: Int, "" productId: Int, "" qty: Int, "" customerToken: String): WishlistToCart
}

"""
Defines the comparison operators that can be used in a filter.
"""
input FilterTypeInput {
  """
  Equals.
  """
  eq: String

  finset: [String]

  """
  From. Must be used with the `to` field.
  """
  from: String

  """
  Greater than.
  """
  gt: String

  """
  Greater than or equal to.
  """
  gteq: String

  """
  In. The value can contain a set of comma-separated values.
  """
  in: [String]

  """
  Like. The specified value can contain % (percent signs) to allow matching of 0 or more characters.
  """
  like: String

  """
  Less than.
  """
  lt: String

  """
  Less than or equal to.
  """
  lteq: String

  """
  More than or equal to.
  """
  moreq: String

  """
  Not equal to.
  """
  neq: String

  """
  Not in. The value can contain a set of comma-separated values.
  """
  nin: [String]

  """
  Not null.
  """
  notnull: String

  """
  Is null.
  """
  null: String

  """
  To. Must be used with the `from` field.
  """
  to: String
}

"""
Defines a filter that matches the input exactly.
"""
input FilterEqualTypeInput {
  """
  Use this attribute to exactly match the specified string. For example, to filter on a specific category ID, specify a value such as `5`.
  """
  eq: String

  """
  Use this attribute to filter on an array of values. For example, to filter on category IDs 4, 5, and 6, specify a value of `["4", "5", "6"]`.
  """
  in: [String]
}

"""
Defines a filter that matches a range of values, such as prices or dates.
"""
input FilterRangeTypeInput {
  """
  Use this attribute to specify the lowest possible value in the range.
  """
  from: String

  """
  Use this attribute to specify the highest possible value in the range.
  """
  to: String
}

"""
Defines a filter that performs a fuzzy search.
"""
input FilterMatchTypeInput {
  """
  Use this attribute to fuzzy match the specified string. For example, to filter on a specific SKU, specify a value such as `24-MB01`.
  """
  match: String

  """
  Filter match type for fine-tuned results. Possible values FULL or PARTIAL. If match_type is not provided, returned results will default to FULL match.
  """
  match_type: FilterMatchTypeEnum
}

enum FilterMatchTypeEnum {
  FULL

  PARTIAL
}

"""
Defines a filter for an input string.
"""
input FilterStringTypeInput {
  """
  Filters items that are exactly the same as the specified string.
  """
  eq: String

  """
  Filters items that are exactly the same as entries specified in an array of strings.
  """
  in: [String]

  """
  Defines a filter that performs a fuzzy search using the specified string.
  """
  match: String
}

"""
Provides navigation for the query response.
"""
type SearchResultPageInfo {
  """
  The specific page to return.
  """
  current_page: Int

  """
  The maximum number of items to return per page of results.
  """
  page_size: Int

  """
  The total number of pages in the response.
  """
  total_pages: Int
}

"""
Indicates whether to return results in ascending or descending order.
"""
enum SortEnum {
  ASC

  DESC
}

type ComplexTextValue {
  """
  Text that can contain HTML tags.
  """
  html: String!
}

"""
Defines a monetary value, including a numeric value and a currency code.
"""
type Money {
  """
  A three-letter currency code, such as USD or EUR.
  """
  currency: CurrencyEnum

  """
  A number expressing a monetary value.
  """
  value: Float
}

"""
The list of available currency codes.
"""
enum CurrencyEnum {
  AFN

  ALL

  AZN

  DZD

  AOA

  ARS

  AMD

  AWG

  AUD

  BSD

  BHD

  BDT

  BBD

  BYN

  BZD

  BMD

  BTN

  BOB

  BAM

  BWP

  BRL

  GBP

  BND

  BGN

  BUK

  BIF

  KHR

  CAD

  CVE

  CZK

  KYD

  GQE

  CLP

  CNY

  COP

  KMF

  CDF

  CRC

  HRK

  CUP

  DKK

  DJF

  DOP

  XCD

  EGP

  SVC

  ERN

  EEK

  ETB

  EUR

  FKP

  FJD

  GMD

  GEK

  GEL

  GHS

  GIP

  GTQ

  GNF

  GYD

  HTG

  HNL

  HKD

  HUF

  ISK

  INR

  IDR

  IRR

  IQD

  ILS

  JMD

  JPY

  JOD

  KZT

  KES

  KWD

  KGS

  LAK

  LVL

  LBP

  LSL

  LRD

  LYD

  LTL

  MOP

  MKD

  MGA

  MWK

  MYR

  MVR

  LSM

  MRO

  MUR

  MXN

  MDL

  MNT

  MAD

  MZN

  MMK

  NAD

  NPR

  ANG

  YTL

  NZD

  NIC

  NGN

  KPW

  NOK

  OMR

  PKR

  PAB

  PGK

  PYG

  PEN

  PHP

  PLN

  QAR

  RHD

  RON

  RUB

  RWF

  SHP

  STD

  SAR

  RSD

  SCR

  SLL

  SGD

  SKK

  SBD

  SOS

  ZAR

  KRW

  LKR

  SDG

  SRD

  SZL

  SEK

  CHF

  SYP

  TWD

  TJS

  TZS

  THB

  TOP

  TTD

  TND

  TMM

  USD

  UGX

  UAH

  AED

  UYU

  UZS

  VUV

  VEB

  VEF

  VND

  CHE

  CHW

  XOF

  WST

  YER

  ZMK

  ZWD

  TRY

  AZM

  ROL

  TRL

  XPF
}

"""
Defines a customer-entered option.
"""
input EnteredOptionInput {
  """
  The unique ID for a `CustomizableOptionInterface` object, such as a `CustomizableFieldOption`, `CustomizableFileOption`, or `CustomizableAreaOption` object.
  """
  uid: ID!

  """
  Text the customer entered.
  """
  value: String!
}

enum BatchMutationStatus {
  SUCCESS

  FAILURE

  MIXED_RESULTS
}

interface ErrorInterface {
  """
  The returned error message.
  """
  message: String!
}

"""
Contains an error message when an invalid UID was specified.
"""
type NoSuchEntityUidError implements ErrorInterface {
  """
  The returned error message.
  """
  message: String!

  """
  The specified invalid unique ID of an object.
  """
  uid: ID!
}

"""
Contains an error message when an internal error occurred.
"""
type InternalError implements ErrorInterface {
  """
  The returned error message.
  """
  message: String!
}

"""
Defines an array of custom attributes.
"""
type CustomAttributeMetadata {
  """
  An array of attributes.
  """
  items: [Attribute]
}

"""
Contains details about the attribute, including the code and type.
"""
type Attribute {
  """
  The unique identifier for an attribute code. This value should be in lowercase letters without spaces.
  """
  attribute_code: String

  """
  Attribute options list.
  """
  attribute_options: [AttributeOption]

  """
  The data type of the attribute.
  """
  attribute_type: String

  """
  The type of entity that defines the attribute.
  """
  entity_type: String

  """
  The frontend input type of the attribute.
  """
  input_type: String

  """
  Details about the storefront properties configured for the attribute.
  """
  storefront_properties: StorefrontProperties
}

"""
Indicates where an attribute can be displayed.
"""
type StorefrontProperties {
  """
  The relative position of the attribute in the layered navigation block.
  """
  position: Int

  """
  Indicates whether the attribute is filterable with results, without results, or not at all.
  """
  use_in_layered_navigation: UseInLayeredNavigationOptions

  """
  Indicates whether the attribute is displayed in product listings.
  """
  use_in_product_listing: Boolean

  """
  Indicates whether the attribute can be used in layered navigation on search results pages.
  """
  use_in_search_results_layered_navigation: Boolean

  """
  Indicates whether the attribute is displayed on product pages.
  """
  visible_on_catalog_pages: Boolean
}

"""
Defines whether the attribute is filterable in layered navigation.
"""
enum UseInLayeredNavigationOptions {
  NO

  FILTERABLE_WITH_RESULTS

  FILTERABLE_NO_RESULT
}

"""
Defines an attribute option.
"""
type AttributeOption {
  """
  The label assigned to the attribute option.
  """
  label: String

  """
  The attribute option value.
  """
  value: String
}

"""
Defines the attribute characteristics to search for the `attribute_code` and `entity_type` to search.
"""
input AttributeInput {
  """
  The unique identifier for an attribute code. This value should be in lowercase letters without spaces.
  """
  attribute_code: String

  """
  The type of entity that defines the attribute.
  """
  entity_type: String
}

"""
Metadata of EAV attributes.
"""
type AttributesMetadataOutput {
  """
  Errors of retrieving certain attributes metadata.
  """
  errors: [AttributeMetadataError]!

  """
  Requested attributes metadata.
  """
  items: [CustomAttributeMetadataInterface]!
}

"""
Attribute metadata retrieval error.
"""
type AttributeMetadataError {
  """
  Attribute metadata retrieval error message.
  """
  message: String!

  """
  Attribute metadata retrieval error type.
  """
  type: AttributeMetadataErrorType!
}

"""
Attribute metadata retrieval error types.
"""
enum AttributeMetadataErrorType {
  """
  The requested entity was not found.
  """
  ENTITY_NOT_FOUND

  """
  The requested attribute was not found.
  """
  ATTRIBUTE_NOT_FOUND

  """
  The filter cannot be applied as it does not belong to the entity
  """
  FILTER_NOT_FOUND

  """
  Not categorized error, see the error message.
  """
  UNDEFINED
}

"""
An interface containing fields that define the EAV attribute.
"""
interface CustomAttributeMetadataInterface {
  """
  The unique identifier for an attribute code. This value should be in lowercase letters without spaces.
  """
  code: ID!

  """
  Default attribute value.
  """
  default_value: String

  """
  The type of entity that defines the attribute.
  """
  entity_type: AttributeEntityTypeEnum!

  """
  The frontend class of the attribute.
  """
  frontend_class: String

  """
  The frontend input type of the attribute.
  """
  frontend_input: AttributeFrontendInputEnum

  """
  Whether the attribute value is required.
  """
  is_required: Boolean!

  """
  Whether the attribute value must be unique.
  """
  is_unique: Boolean!

  """
  The label assigned to the attribute.
  """
  label: String

  """
  Attribute options.
  """
  options: [CustomAttributeOptionInterface]!
}

interface CustomAttributeOptionInterface {
  """
  Is the option value default.
  """
  is_default: Boolean!

  """
  The label assigned to the attribute option.
  """
  label: String!

  """
  The attribute option value.
  """
  value: String!
}

"""
Base EAV implementation of CustomAttributeOptionInterface.
"""
type AttributeOptionMetadata implements CustomAttributeOptionInterface {
  """
  Is the option value default.
  """
  is_default: Boolean!

  """
  The label assigned to the attribute option.
  """
  label: String!

  """
  The attribute option value.
  """
  value: String!
}

"""
Base EAV implementation of CustomAttributeMetadataInterface.
"""
type AttributeMetadata implements CustomAttributeMetadataInterface {
  """
  The unique identifier for an attribute code. This value should be in lowercase letters without spaces.
  """
  code: ID!

  """
  Default attribute value.
  """
  default_value: String

  """
  The type of entity that defines the attribute.
  """
  entity_type: AttributeEntityTypeEnum!

  """
  The frontend class of the attribute.
  """
  frontend_class: String

  """
  The frontend input type of the attribute.
  """
  frontend_input: AttributeFrontendInputEnum

  """
  Whether the attribute value is required.
  """
  is_required: Boolean!

  """
  Whether the attribute value must be unique.
  """
  is_unique: Boolean!

  """
  The label assigned to the attribute.
  """
  label: String

  """
  Attribute options.
  """
  options: [CustomAttributeOptionInterface]!
}

"""
List of all entity types. Populated by the modules introducing EAV entities.
"""
enum AttributeEntityTypeEnum {
  CATALOG_PRODUCT

  CATALOG_CATEGORY

  CUSTOMER

  CUSTOMER_ADDRESS
}

"""
EAV attribute frontend input types.
"""
enum AttributeFrontendInputEnum {
  BOOLEAN

  DATE

  DATETIME

  FILE

  GALLERY

  HIDDEN

  IMAGE

  MEDIA_IMAGE

  MULTILINE

  MULTISELECT

  PRICE

  SELECT

  TEXT

  TEXTAREA

  WEIGHT

  UNDEFINED
}

"""
Metadata of EAV attributes associated to form
"""
type AttributesFormOutput {
  """
  Errors of retrieving certain attributes metadata.
  """
  errors: [AttributeMetadataError]!

  """
  Requested attributes metadata.
  """
  items: [CustomAttributeMetadataInterface]!
}

interface AttributeValueInterface {
  """
  The attribute code.
  """
  code: ID!
}

type AttributeValue implements AttributeValueInterface {
  """
  The attribute code.
  """
  code: ID!

  """
  The attribute value.
  """
  value: String!
}

type AttributeSelectedOptions implements AttributeValueInterface {
  """
  The attribute code.
  """
  code: ID!

  selected_options: [AttributeSelectedOptionInterface]!
}

interface AttributeSelectedOptionInterface {
  """
  The attribute selected option label.
  """
  label: String!

  """
  The attribute selected option value.
  """
  value: String!
}

type AttributeSelectedOption implements AttributeSelectedOptionInterface {
  """
  The attribute selected option label.
  """
  label: String!

  """
  The attribute selected option value.
  """
  value: String!
}

"""
Specifies the value for attribute.
"""
input AttributeValueInput {
  """
  The code of the attribute.
  """
  attribute_code: String!

  """
  An array containing selected options for a select or multiselect attribute.
  """
  selected_options: [AttributeInputSelectedOption]

  """
  The value assigned to the attribute.
  """
  value: String
}

"""
Specifies selected option for a select or multiselect attribute value.
"""
input AttributeInputSelectedOption {
  """
  The attribute option value.
  """
  value: String!
}

"""
An input object that specifies the filters used for attributes.
"""
input AttributeFilterInput {
  """
  Whether a product or category attribute can be compared against another or not.
  """
  is_comparable: Boolean

  """
  Whether a product or category attribute can be filtered or not.
  """
  is_filterable: Boolean

  """
  Whether a product or category attribute can be filtered in search or not.
  """
  is_filterable_in_search: Boolean

  """
  Whether a product or category attribute can use HTML on front or not.
  """
  is_html_allowed_on_front: Boolean

  """
  Whether a product or category attribute can be searched or not.
  """
  is_searchable: Boolean

  """
  Whether a product or category attribute can be used for price rules or not.
  """
  is_used_for_price_rules: Boolean

  """
  Whether a product or category attribute is used for promo rules or not.
  """
  is_used_for_promo_rules: Boolean

  """
  Whether a product or category attribute is visible in advanced search or not.
  """
  is_visible_in_advanced_search: Boolean

  """
  Whether a product or category attribute is visible on front or not.
  """
  is_visible_on_front: Boolean

  """
  Whether a product or category attribute has WYSIWYG enabled or not.
  """
  is_wysiwyg_enabled: Boolean

  """
  Whether a product or category attribute is used in product listing or not.
  """
  used_in_product_listing: Boolean
}

"""
Deprecated. It should not be used on the storefront. Contains information about a website.
"""
type Website {
  """
  A code assigned to the website to identify it.
  """
  code: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  The default group ID of the website.
  """
  default_group_id: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  The ID number assigned to the website.
  """
  id: Int @deprecated(reason: "The field should not be used on the storefront.")

  """
  Indicates whether this is the default website.
  """
  is_default: Boolean @deprecated(reason: "The field should not be used on the storefront.")

  """
  The website name. Websites use this name to identify it easier.
  """
  name: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  The attribute to use for sorting websites.
  """
  sort_order: Int @deprecated(reason: "The field should not be used on the storefront.")
}

"""
Contains information about a store's configuration.
"""
type StoreConfig {
  """
  Contains scripts that must be included in the HTML before the closing `<body>` tag.
  """
  absolute_footer: String

  """
  Indicates whether guest users can write product reviews. Possible values: 1 (Yes) and 0 (No).
  """
  allow_guests_to_write_product_reviews: String

  """
  The value of the Allow Gift Messages for Order Items option
  """
  allow_items: String

  """
  The value of the Allow Gift Messages on Order Level option
  """
  allow_order: String

  """
  Indicates whether to enable autocomplete on login and forgot password forms.
  """
  autocomplete_on_storefront: Boolean

  """
  The base currency code.
  """
  base_currency_code: String

  """
  A fully-qualified URL that is used to create relative links to the `base_url`.
  """
  base_link_url: String

  """
  The fully-qualified URL that specifies the location of media files.
  """
  base_media_url: String

  """
  The fully-qualified URL that specifies the location of static view files.
  """
  base_static_url: String

  """
  The store’s fully-qualified base URL.
  """
  base_url: String

  """
  Extended Config Data - checkout/cart/delete_quote_after
  """
  cart_expires_in_days: Int

  """
  Extended Config Data - checkout/cart_link/use_qty
  """
  cart_summary_display_quantity: Int

  """
  The default sort order of the search results list.
  """
  catalog_default_sort_by: String

  """
  Corresponds to the 'Display Prices In Product Lists' field in the Admin. It indicates how FPT information is displayed on category pages.
  """
  category_fixed_product_tax_display_setting: FixedProductTaxDisplaySettings

  """
  The suffix applied to category pages, such as `.htm` or `.html`.
  """
  category_url_suffix: String

  """
  Indicates whether only specific countries can use this payment method.
  """
  check_money_order_enable_for_specific_countries: Boolean

  """
  Indicates whether the Check/Money Order payment method is enabled.
  """
  check_money_order_enabled: Boolean

  """
  The name of the party to whom the check must be payable.
  """
  check_money_order_make_check_payable_to: String

  """
  The maximum order amount required to qualify for the Check/Money Order payment method.
  """
  check_money_order_max_order_total: String

  """
  The minimum order amount required to qualify for the Check/Money Order payment method.
  """
  check_money_order_min_order_total: String

  """
  The status of new orders placed using the Check/Money Order payment method.
  """
  check_money_order_new_order_status: String

  """
  A comma-separated list of specific countries allowed to use the Check/Money Order payment method.
  """
  check_money_order_payment_from_specific_countries: String

  """
  The full street address or PO Box where the checks are mailed.
  """
  check_money_order_send_check_to: String

  """
  A number indicating the position of the Check/Money Order payment method in the list of available payment methods during checkout.
  """
  check_money_order_sort_order: Int

  """
  The title of the Check/Money Order payment method displayed on the storefront.
  """
  check_money_order_title: String

  """
  The name of the CMS page that identifies the home page for the store.
  """
  cms_home_page: String

  """
  A specific CMS page that displays when cookies are not enabled for the browser.
  """
  cms_no_cookies: String

  """
  A specific CMS page that displays when a 404 'Page Not Found' error occurs.
  """
  cms_no_route: String

  """
  A code assigned to the store to identify it.
  """
  code: String @deprecated(reason: "Use `store_code` instead.")

  """
  Indicates whether the `parent` or child (`itself`) thumbnail should be used in the cart for configurable products.
  """
  configurable_thumbnail_source: String

  """
  Indicates whether the Contact Us form in enabled.
  """
  contact_enabled: Boolean!

  """
  The copyright statement that appears at the bottom of each page.
  """
  copyright: String

  """
  Extended Config Data - general/region/state_required
  """
  countries_with_required_region: String

  """
  Indicates if the new accounts need confirmation.
  """
  create_account_confirmation: Boolean

  """
  Customer access token lifetime.
  """
  customer_access_token_lifetime: Float

  """
  Extended Config Data - general/country/default
  """
  default_country: String

  """
  The description that provides a summary of your site for search engine listings. It should not be more than 160 characters in length.
  """
  default_description: String

  """
  The default display currency code.
  """
  default_display_currency_code: String

  """
  A series of keywords that describe your store, each separated by a comma.
  """
  default_keywords: String

  """
  The title that appears at the title bar of each page when viewed in a browser.
  """
  default_title: String

  """
  Controls the display of the demo store notice at the top of the page. Options: 0 (No) or 1 (Yes).
  """
  demonotice: Int

  """
  Extended Config Data - general/region/display_all
  """
  display_state_if_optional: Boolean

  """
  The landing page that is associated with the base URL.
  """
  front: String

  """
  The default number of products per page in Grid View.
  """
  grid_per_page: Int

  """
  A list of numbers that define how many products can be displayed in Grid View.
  """
  grid_per_page_values: String

  """
  Scripts that must be included in the HTML before the closing `<head>` tag.
  """
  head_includes: String

  """
  The small graphic image (favicon) that appears in the address bar and tab of the browser.
  """
  head_shortcut_icon: String

  """
  The path to the logo that appears in the header.
  """
  header_logo_src: String

  """
  The ID number assigned to the store.
  """
  id: Int @deprecated(reason: "Use `store_code` instead.")

  """
  Indicates whether the store view has been designated as the default within the store group.
  """
  is_default_store: Boolean

  """
  Indicates whether the store group has been designated as the default within the website.
  """
  is_default_store_group: Boolean

  """
  Extended Config Data - checkout/options/guest_checkout
  """
  is_guest_checkout_enabled: Boolean

  """
  Extended Config Data - checkout/options/onepage_checkout_enabled
  """
  is_one_page_checkout_enabled: Boolean

  """
  The format of the search results list.
  """
  list_mode: String

  """
  The default number of products per page in List View.
  """
  list_per_page: Int

  """
  A list of numbers that define how many products can be displayed in List View.
  """
  list_per_page_values: String

  """
  The store locale.
  """
  locale: String

  """
  The Alt text that is associated with the logo.
  """
  logo_alt: String

  """
  The height of the logo image, in pixels.
  """
  logo_height: Int

  """
  The width of the logo image, in pixels.
  """
  logo_width: Int

  """
  Indicates whether wishlists are enabled (1) or disabled (0).
  """
  magento_wishlist_general_is_enabled: String

  """
  Extended Config Data - checkout/options/max_items_display_count
  """
  max_items_in_order_summary: Int

  """
  Extended Config Data - checkout/sidebar/display
  """
  minicart_display: Boolean

  """
  Extended Config Data - checkout/sidebar/count
  """
  minicart_max_items: Int

  """
  The minimum number of characters required for a valid password.
  """
  minimum_password_length: String

  """
  Indicates whether newsletters are enabled.
  """
  newsletter_enabled: Boolean!

  """
  The default page that displays when a 404 'Page not Found' error occurs.
  """
  no_route: String

  """
  Extended Config Data - general/country/optional_zip_countries
  """
  optional_zip_countries: String

  """
  Indicates whether orders can be cancelled by customers or not.
  """
  order_cancellation_enabled: Boolean!

  """
  An array containing available cancellation reasons.
  """
  order_cancellation_reasons: [CancellationReason]!

  """
  Corresponds to the 'Display Prices On Product View Page' field in the Admin. It indicates how FPT information is displayed on product pages.
  """
  product_fixed_product_tax_display_setting: FixedProductTaxDisplaySettings

  """
  Indicates whether product reviews are enabled. Possible values: 1 (Yes) and 0 (No).
  """
  product_reviews_enabled: String

  """
  The suffix applied to product pages, such as `.htm` or `.html`.
  """
  product_url_suffix: String

  """
  The number of different character classes (lowercase, uppercase, digits, special characters) required in a password.
  """
  required_character_classes_number: String

  """
  The ID of the root category.
  """
  root_category_id: Int @deprecated(reason: "Use `root_category_uid` instead.")

  """
  The unique ID for a `CategoryInterface` object.
  """
  root_category_uid: ID

  """
  Corresponds to the 'Display Prices In Sales Modules' field in the Admin. It indicates how FPT information is displayed on cart, checkout, and order pages.
  """
  sales_fixed_product_tax_display_setting: FixedProductTaxDisplaySettings

  """
  A secure fully-qualified URL that is used to create relative links to the `base_url`.
  """
  secure_base_link_url: String

  """
  The secure fully-qualified URL that specifies the location of media files.
  """
  secure_base_media_url: String

  """
  The secure fully-qualified URL that specifies the location of static view files.
  """
  secure_base_static_url: String

  """
  The store’s fully-qualified secure base URL.
  """
  secure_base_url: String

  """
  Email to a Friend configuration.
  """
  send_friend: SendFriendConfiguration

  """
  Extended Config Data - tax/cart_display/full_summary
  """
  shopping_cart_display_full_summary: Boolean

  """
  Extended Config Data - tax/cart_display/grandtotal
  """
  shopping_cart_display_grand_total: Boolean

  """
  Extended Config Data - tax/cart_display/price
  """
  shopping_cart_display_price: Int

  """
  Extended Config Data - tax/cart_display/shipping
  """
  shopping_cart_display_shipping: Int

  """
  Extended Config Data - tax/cart_display/subtotal
  """
  shopping_cart_display_subtotal: Int

  """
  Extended Config Data - tax/cart_display/gift_wrapping
  """
  shopping_cart_display_tax_gift_wrapping: TaxWrappingEnum

  """
  Extended Config Data - tax/cart_display/zero_tax
  """
  shopping_cart_display_zero_tax: Boolean

  """
  Indicates whether a breadcrumb trail appears on all CMS pages in the catalog. 0 (No) or 1 (Yes).
  """
  show_cms_breadcrumbs: Int

  """
  The unique ID of the store view. In the Admin, this is called the Store View Code. When making a GraphQL call, assign this value to the `Store` header to provide the scope.
  """
  store_code: ID

  """
  The unique ID assigned to the store group. In the Admin, this is called the Store Name.
  """
  store_group_code: ID

  """
  The label assigned to the store group.
  """
  store_group_name: String

  """
  The label assigned to the store view.
  """
  store_name: String

  """
  The store view sort order.
  """
  store_sort_order: Int

  """
  The time zone of the store.
  """
  timezone: String

  """
  A prefix that appears before the title to create a two- or three-part title.
  """
  title_prefix: String

  """
  The character that separates the category name and subcategory in the browser title bar.
  """
  title_separator: String

  """
  A suffix that appears after the title to create a two- or three-part title.
  """
  title_suffix: String

  """
  Indicates whether the store code should be used in the URL.
  """
  use_store_in_url: Boolean

  """
  The unique ID for the website.
  """
  website_code: ID

  """
  The ID number assigned to the website store.
  """
  website_id: Int @deprecated(reason: "The field should not be used on the storefront.")

  """
  The label assigned to the website.
  """
  website_name: String

  """
  The unit of weight.
  """
  weight_unit: String

  """
  Text that appears in the header of the page and includes the name of the logged in customer.
  """
  welcome: String

  """
  Indicates whether only specific countries can use this payment method.
  """
  zero_subtotal_enable_for_specific_countries: Boolean

  """
  Indicates whether the Zero Subtotal payment method is enabled.
  """
  zero_subtotal_enabled: Boolean

  """
  The status of new orders placed using the Zero Subtotal payment method.
  """
  zero_subtotal_new_order_status: String

  """
  When the new order status is 'Processing', this can be set to `authorize_capture` to automatically invoice all items that have a zero balance.
  """
  zero_subtotal_payment_action: String

  """
  A comma-separated list of specific countries allowed to use the Zero Subtotal payment method.
  """
  zero_subtotal_payment_from_specific_countries: String

  """
  A number indicating the position of the Zero Subtotal payment method in the list of available payment methods during checkout.
  """
  zero_subtotal_sort_order: Int

  """
  The title of the Zero Subtotal payment method displayed on the storefront.
  """
  zero_subtotal_title: String
}

"""
Defines details about an individual checkout agreement.
"""
type CheckoutAgreement {
  """
  The ID for a checkout agreement.
  """
  agreement_id: Int!

  """
  The checkbox text for the checkout agreement.
  """
  checkbox_text: String!

  """
  Required. The text of the agreement.
  """
  content: String!

  """
  The height of the text box where the Terms and Conditions statement appears during checkout.
  """
  content_height: String

  """
  Indicates whether the `content` text is in HTML format.
  """
  is_html: Boolean!

  """
  Indicates whether agreements are accepted automatically or manually.
  """
  mode: CheckoutAgreementMode!

  """
  The name given to the condition.
  """
  name: String!
}

"""
Indicates how agreements are accepted.
"""
enum CheckoutAgreementMode {
  """
  Conditions are automatically accepted upon checkout.
  """
  AUTO

  """
  Shoppers must manually accept the conditions to place an order.
  """
  MANUAL
}

"""
Contains details about a CMS page.
"""
type CmsPage implements RoutableInterface {
  """
  The content of the CMS page in raw HTML.
  """
  content: String

  """
  The heading that displays at the top of the CMS page.
  """
  content_heading: String

  """
  The ID of a CMS page.
  """
  identifier: String

  """
  A brief description of the page for search results listings.
  """
  meta_description: String

  """
  A brief description of the page for search results listings.
  """
  meta_keywords: String

  """
  A page title that is indexed by search engines and appears in search results listings.
  """
  meta_title: String

  """
  The design layout of the page, indicating the number of columns and navigation features used on the page.
  """
  page_layout: String

  """
  Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect.
  """
  redirect_code: Int!

  """
  The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original.
  """
  relative_url: String

  """
  The name that appears in the breadcrumb trail navigation and in the browser title bar and tab.
  """
  title: String

  """
  One of PRODUCT, CATEGORY, or CMS_PAGE.
  """
  type: UrlRewriteEntityTypeEnum

  """
  The URL key of the CMS page, which is often based on the `content_heading`.
  """
  url_key: String
}

"""
Contains an array CMS block items.
"""
type CmsBlocks {
  """
  An array of CMS blocks.
  """
  items: [CmsBlock]
}

"""
Contains details about a specific CMS block.
"""
type CmsBlock {
  """
  The content of the CMS block in raw HTML.
  """
  content: String

  """
  The CMS block identifier.
  """
  identifier: String

  """
  The title assigned to the CMS block.
  """
  title: String
}

"""
This enumeration defines the entity type.
"""
enum UrlRewriteEntityTypeEnum {
  CMS_PAGE

  PRODUCT

  CATEGORY
}

"""
Deprecated. Use `ProductPrice` instead. Defines the price of a product as well as any tax-related adjustments.
"""
type Price {
  """
  An array that provides information about tax, weee, or weee_tax adjustments.
  """
  adjustments: [PriceAdjustment] @deprecated(reason: "Use `ProductPrice` instead.")

  """
  The price of a product plus a three-letter currency code.
  """
  amount: Money @deprecated(reason: "Use `ProductPrice` instead.")
}

"""
Deprecated. Taxes will be included or excluded in the price. Defines the amount of money to apply as an adjustment, the type of adjustment to apply, and whether the item is included or excluded from the adjustment.
"""
type PriceAdjustment {
  """
  The amount of the price adjustment and its currency code.
  """
  amount: Money

  """
  Indicates whether the adjustment involves tax, weee, or weee_tax.
  """
  code: PriceAdjustmentCodesEnum @deprecated(reason: "`PriceAdjustment` is deprecated.")

  """
  Indicates whether the entity described by the code attribute is included or excluded from the adjustment.
  """
  description: PriceAdjustmentDescriptionEnum @deprecated(reason: "`PriceAdjustment` is deprecated.")
}

"""
`PriceAdjustment.code` is deprecated.
"""
enum PriceAdjustmentCodesEnum {
  TAX @deprecated(reason: "`PriceAdjustmentCodesEnum` is deprecated. Tax is included or excluded in the price. Tax is not shown separately in Catalog.")

  WEEE @deprecated(reason: "WEEE code is deprecated. Use `fixed_product_taxes.label` instead.")

  WEEE_TAX @deprecated(reason: "Use `fixed_product_taxes` instead.  Tax is included or excluded in price. The tax is not shown separtely in Catalog.")
}

"""
`PriceAdjustmentDescriptionEnum` is deprecated. States whether a price adjustment is included or excluded.
"""
enum PriceAdjustmentDescriptionEnum {
  INCLUDED

  EXCLUDED
}

"""
Defines the price type.
"""
enum PriceTypeEnum {
  FIXED

  PERCENT

  DYNAMIC
}

"""
Defines the customizable date type.
"""
enum CustomizableDateTypeEnum {
  DATE

  DATE_TIME

  TIME
}

"""
Deprecated. Use `PriceRange` instead. Contains the regular price of an item, as well as its minimum and maximum prices. Only composite products, which include bundle, configurable, and grouped products, can contain a minimum and maximum price.
"""
type ProductPrices {
  """
  The highest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the `to` value.
  """
  maximalPrice: Price @deprecated(reason: "Use `PriceRange.maximum_price` instead.")

  """
  The lowest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the `from` value.
  """
  minimalPrice: Price @deprecated(reason: "Use `PriceRange.minimum_price` instead.")

  """
  The base price of a product.
  """
  regularPrice: Price @deprecated(reason: "Use `regular_price` from `PriceRange.minimum_price` or `PriceRange.maximum_price` instead.")
}

"""
Contains the price range for a product. If the product has a single price, the minimum and maximum price will be the same.
"""
type PriceRange {
  """
  The highest possible price for the product.
  """
  maximum_price: ProductPrice

  """
  The lowest possible price for the product.
  """
  minimum_price: ProductPrice!
}

"""
Represents a product price.
"""
type ProductPrice {
  """
  The price discount. Represents the difference between the regular and final price.
  """
  discount: ProductDiscount

  """
  The final price of the product after applying discounts.
  """
  final_price: Money!

  """
  An array of the multiple Fixed Product Taxes that can be applied to a product price.
  """
  fixed_product_taxes: [FixedProductTax]

  """
  The regular price of the product.
  """
  regular_price: Money!
}

"""
Contains the discount applied to a product price.
"""
type ProductDiscount {
  """
  The actual value of the discount.
  """
  amount_off: Float

  """
  The discount expressed a percentage.
  """
  percent_off: Float
}

"""
An implementation of `ProductLinksInterface`.
"""
type ProductLinks implements ProductLinksInterface {
  """
  One of related, associated, upsell, or crosssell.
  """
  link_type: String

  """
  The SKU of the linked product.
  """
  linked_product_sku: String

  """
  The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable).
  """
  linked_product_type: String

  """
  The position within the list of product links.
  """
  position: Int

  """
  The identifier of the linked product.
  """
  sku: String
}

"""
Contains information about linked products, including the link type and product type of each item.
"""
interface ProductLinksInterface {
  """
  One of related, associated, upsell, or crosssell.
  """
  link_type: String

  """
  The SKU of the linked product.
  """
  linked_product_sku: String

  """
  The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable).
  """
  linked_product_type: String

  """
  The position within the list of product links.
  """
  position: Int

  """
  The identifier of the linked product.
  """
  sku: String
}

"""
Contains fields that are common to all types of products.
"""
interface ProductInterface {
  activity: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  as_featured: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The attribute set assigned to the product.
  """
  attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")

  """
  The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled.
  """
  canonical_url: String

  """
  The categories assigned to a product.
  """
  categories: [CategoryInterface]

  category_gear: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  climate: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  collar: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The product's country of origin.
  """
  country_of_manufacture: String

  """
  Timestamp indicating when the product was created.
  """
  created_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  Crosssell Products
  """
  crosssell_products: [ProductInterface]

  """
  Product custom attributes.
  """
  custom_attributesV2("" filters: AttributeFilterInput): ProductCustomAttributes

  """
  Detailed information about the product. The value can include simple HTML tags.
  """
  description: ComplexTextValue

  eco_collection: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  erin_recommends: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  features_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  format: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  gender: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates whether a gift message is available.
  """
  gift_message_available: String

  """
  The ID number assigned to the product.
  """
  id: Int @deprecated(reason: "Use the `uid` field instead.")

  """
  The relative path to the main image on the product page.
  """
  image: ProductImage

  """
  A number representing the product's manufacturer.
  """
  manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  material: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  An array of media gallery objects.
  """
  media_gallery: [MediaGalleryInterface]

  """
  An array of MediaGalleryEntry objects.
  """
  media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")

  """
  A brief overview of the product for search results listings, maximum 255 characters.
  """
  meta_description: String

  """
  A comma-separated list of keywords that are visible only to search engines.
  """
  meta_keyword: String

  """
  A string that is displayed in the title bar and tab of the browser and in search results lists.
  """
  meta_title: String

  """
  The product name. Customers use this name to identify the product.
  """
  name: String

  new: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The beginning date for new product listings, and determines if the product is featured as a new product.
  """
  new_from_date: String

  """
  The end date for new product listings.
  """
  new_to_date: String

  """
  Product stock only x left count
  """
  only_x_left_in_stock: Float

  """
  If the product has multiple options, determines where they appear on the product page.
  """
  options_container: String

  pattern: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  performance_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates the price of an item.
  """
  price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")

  """
  The range of prices for the product
  """
  price_range: PriceRange!

  """
  An array of `TierPrice` objects.
  """
  price_tiers: [TierPrice]

  """
  An array of `ProductLinks` objects.
  """
  product_links: [ProductLinksInterface]

  """
  The average of all the ratings given to the product.
  """
  rating_summary: Float!

  """
  An array of products to be displayed in a Related Products block.
  """
  related_products: [ProductInterface]

  """
  The total count of all the reviews given to the product.
  """
  review_count: Int!

  """
  The list of products reviews.
  """
  reviews("The maximum number of results to return at once. The default is 20." pageSize: Int = 20, "The page of results to return. The default is 1." currentPage: Int = 1): ProductReviews!

  sale: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  A short description of the product. Its use depends on the theme.
  """
  short_description: ComplexTextValue

  size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  A number or code assigned to a product to identify the product, options, price, and manufacturer.
  """
  sku: String

  sleeve: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The relative path to the small image, which is used on catalog pages.
  """
  small_image: ProductImage

  """
  The beginning date that a product has a special price.
  """
  special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  The discounted price of the product.
  """
  special_price: Float

  """
  The end date for a product with a special price.
  """
  special_to_date: String

  """
  Stock status of the product
  """
  stock_status: ProductStockStatus

  strap_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_bottom: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_general: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The file name of a swatch image.
  """
  swatch_image: String

  """
  The relative path to the product's thumbnail image.
  """
  thumbnail: ProductImage

  """
  The price when tier pricing is in effect and the items purchased threshold has been reached.
  """
  tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")

  """
  An array of ProductTierPrices objects.
  """
  tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")

  """
  One of simple, virtual, bundle, downloadable, grouped, or configurable.
  """
  type_id: String @deprecated(reason: "Use `__typename` instead.")

  """
  The unique ID for a `ProductInterface` object.
  """
  uid: ID!

  """
  Timestamp indicating when the product was updated.
  """
  updated_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  Upsell Products
  """
  upsell_products: [ProductInterface]

  """
  The part of the URL that identifies the product
  """
  url_key: String

  url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")

  """
  URL rewrites list
  """
  url_rewrites: [UrlRewrite]

  """
  The part of the product URL that is appended after the url key
  """
  url_suffix: String

  """
  An array of websites in which the product is available.
  """
  websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
}

"""
Contains attributes specific to tangible products.
"""
interface PhysicalProductInterface {
  """
  The weight of the item, in units defined by the store.
  """
  weight: Float
}

"""
Contains information about a text area that is defined as part of a customizable option.
"""
type CustomizableAreaOption implements CustomizableOptionInterface {
  """
  Option ID.
  """
  option_id: Int @deprecated(reason: "Use `uid` instead")

  """
  The Stock Keeping Unit of the base product.
  """
  product_sku: String

  """
  Indicates whether the option is required.
  """
  required: Boolean

  """
  The order in which the option is displayed.
  """
  sort_order: Int

  """
  The display name for this option.
  """
  title: String

  """
  The unique ID for a `CustomizableOptionInterface` object.
  """
  uid: ID!

  """
  An object that defines a text area.
  """
  value: CustomizableAreaValue
}

"""
Defines the price and sku of a product whose page contains a customized text area.
"""
type CustomizableAreaValue {
  """
  The maximum number of characters that can be entered for this customizable option.
  """
  max_characters: Int

  """
  The price assigned to this option.
  """
  price: Float

  """
  FIXED, PERCENT, or DYNAMIC.
  """
  price_type: PriceTypeEnum

  """
  The Stock Keeping Unit for this option.
  """
  sku: String

  """
  The unique ID for a `CustomizableAreaValue` object.
  """
  uid: ID!
}

"""
Contains the hierarchy of categories.
"""
type CategoryTree implements CategoryInterface & RoutableInterface {
  available_sort_by: [String]

  """
  An array of breadcrumb items.
  """
  breadcrumbs: [Breadcrumb]

  """
  The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled.
  """
  canonical_url: String

  """
  A tree of child categories.
  """
  children: [CategoryTree]

  children_count: String

  """
  Contains a category CMS block.
  """
  cms_block: CmsBlock

  """
  The timestamp indicating when the category was created.
  """
  created_at: String @deprecated(reason: "The field should not be used on the storefront.")

  custom_layout_update_file: String

  """
  The attribute to use for sorting.
  """
  default_sort_by: String

  """
  An optional description of the category.
  """
  description: String

  display_mode: String

  filter_price_range: Float

  """
  An ID that uniquely identifies the category.
  """
  id: Int @deprecated(reason: "Use `uid` instead.")

  image: String

  include_in_menu: Int

  is_anchor: Int

  landing_page: Int

  """
  The depth of the category within the tree.
  """
  level: Int

  meta_description: String

  meta_keywords: String

  meta_title: String

  """
  The display name of the category.
  """
  name: String

  """
  The full category path.
  """
  path: String

  """
  The category path within the store.
  """
  path_in_store: String

  """
  The position of the category relative to other categories at the same level in tree.
  """
  position: Int

  """
  The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not.
  """
  product_count: Int

  """
  The list of products assigned to the category.
  """
  products("The maximum number of results to return at once. The default value is 20." pageSize: Int = 20, "The page of results to return. The default value is 1." currentPage: Int = 1, "The attributes to sort on, and whether to return the results in ascending or descending order." sort: ProductAttributeSortInput): CategoryProducts

  """
  Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect.
  """
  redirect_code: Int!

  """
  The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original.
  """
  relative_url: String

  """
  One of PRODUCT, CATEGORY, or CMS_PAGE.
  """
  type: UrlRewriteEntityTypeEnum

  """
  The unique ID for a `CategoryInterface` object.
  """
  uid: ID!

  """
  The timestamp indicating when the category was updated.
  """
  updated_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  The URL key assigned to the category.
  """
  url_key: String

  """
  The URL path assigned to the category.
  """
  url_path: String

  """
  The part of the category URL that is appended after the url key
  """
  url_suffix: String
}

"""
Contains a collection of `CategoryTree` objects and pagination information.
"""
type CategoryResult {
  """
  A list of categories that match the filter criteria.
  """
  items: [CategoryTree]

  """
  An object that includes the `page_info` and `currentPage` values specified in the query.
  """
  page_info: SearchResultPageInfo

  """
  The total number of categories that match the criteria.
  """
  total_count: Int
}

"""
Contains information about a date picker that is defined as part of a customizable option.
"""
type CustomizableDateOption implements CustomizableOptionInterface {
  """
  Option ID.
  """
  option_id: Int @deprecated(reason: "Use `uid` instead")

  """
  The Stock Keeping Unit of the base product.
  """
  product_sku: String

  """
  Indicates whether the option is required.
  """
  required: Boolean

  """
  The order in which the option is displayed.
  """
  sort_order: Int

  """
  The display name for this option.
  """
  title: String

  """
  The unique ID for a `CustomizableOptionInterface` object.
  """
  uid: ID!

  """
  An object that defines a date field in a customizable option.
  """
  value: CustomizableDateValue
}

"""
Defines the price and sku of a product whose page contains a customized date picker.
"""
type CustomizableDateValue {
  """
  The price assigned to this option.
  """
  price: Float

  """
  FIXED, PERCENT, or DYNAMIC.
  """
  price_type: PriceTypeEnum

  """
  The Stock Keeping Unit for this option.
  """
  sku: String

  """
  DATE, DATE_TIME or TIME
  """
  type: CustomizableDateTypeEnum

  """
  The unique ID for a `CustomizableDateValue` object.
  """
  uid: ID!
}

"""
Contains information about a drop down menu that is defined as part of a customizable option.
"""
type CustomizableDropDownOption implements CustomizableOptionInterface {
  """
  Option ID.
  """
  option_id: Int @deprecated(reason: "Use `uid` instead")

  """
  Indicates whether the option is required.
  """
  required: Boolean

  """
  The order in which the option is displayed.
  """
  sort_order: Int

  """
  The display name for this option.
  """
  title: String

  """
  The unique ID for a `CustomizableOptionInterface` object.
  """
  uid: ID!

  """
  An array that defines the set of options for a drop down menu.
  """
  value: [CustomizableDropDownValue]
}

"""
Defines the price and sku of a product whose page contains a customized drop down menu.
"""
type CustomizableDropDownValue {
  """
  The ID assigned to the value.
  """
  option_type_id: Int

  """
  The price assigned to this option.
  """
  price: Float

  """
  FIXED, PERCENT, or DYNAMIC.
  """
  price_type: PriceTypeEnum

  """
  The Stock Keeping Unit for this option.
  """
  sku: String

  """
  The order in which the option is displayed.
  """
  sort_order: Int

  """
  The display name for this option.
  """
  title: String

  """
  The unique ID for a `CustomizableDropDownValue` object.
  """
  uid: ID!
}

"""
Contains information about a multiselect that is defined as part of a customizable option.
"""
type CustomizableMultipleOption implements CustomizableOptionInterface {
  """
  Option ID.
  """
  option_id: Int @deprecated(reason: "Use `uid` instead")

  """
  Indicates whether the option is required.
  """
  required: Boolean

  """
  The order in which the option is displayed.
  """
  sort_order: Int

  """
  The display name for this option.
  """
  title: String

  """
  The unique ID for a `CustomizableOptionInterface` object.
  """
  uid: ID!

  """
  An array that defines the set of options for a multiselect.
  """
  value: [CustomizableMultipleValue]
}

"""
Defines the price and sku of a product whose page contains a customized multiselect.
"""
type CustomizableMultipleValue {
  """
  The ID assigned to the value.
  """
  option_type_id: Int

  """
  The price assigned to this option.
  """
  price: Float

  """
  FIXED, PERCENT, or DYNAMIC.
  """
  price_type: PriceTypeEnum

  """
  The Stock Keeping Unit for this option.
  """
  sku: String

  """
  The order in which the option is displayed.
  """
  sort_order: Int

  """
  The display name for this option.
  """
  title: String

  """
  The unique ID for a `CustomizableMultipleValue` object.
  """
  uid: ID!
}

"""
Contains information about a text field that is defined as part of a customizable option.
"""
type CustomizableFieldOption implements CustomizableOptionInterface {
  """
  Option ID.
  """
  option_id: Int @deprecated(reason: "Use `uid` instead")

  """
  The Stock Keeping Unit of the base product.
  """
  product_sku: String

  """
  Indicates whether the option is required.
  """
  required: Boolean

  """
  The order in which the option is displayed.
  """
  sort_order: Int

  """
  The display name for this option.
  """
  title: String

  """
  The unique ID for a `CustomizableOptionInterface` object.
  """
  uid: ID!

  """
  An object that defines a text field.
  """
  value: CustomizableFieldValue
}

"""
Defines the price and sku of a product whose page contains a customized text field.
"""
type CustomizableFieldValue {
  """
  The maximum number of characters that can be entered for this customizable option.
  """
  max_characters: Int

  """
  The price of the custom value.
  """
  price: Float

  """
  FIXED, PERCENT, or DYNAMIC.
  """
  price_type: PriceTypeEnum

  """
  The Stock Keeping Unit for this option.
  """
  sku: String

  """
  The unique ID for a `CustomizableFieldValue` object.
  """
  uid: ID!
}

"""
Contains information about a file picker that is defined as part of a customizable option.
"""
type CustomizableFileOption implements CustomizableOptionInterface {
  """
  Option ID.
  """
  option_id: Int @deprecated(reason: "Use `uid` instead")

  """
  The Stock Keeping Unit of the base product.
  """
  product_sku: String

  """
  Indicates whether the option is required.
  """
  required: Boolean

  """
  The order in which the option is displayed.
  """
  sort_order: Int

  """
  The display name for this option.
  """
  title: String

  """
  The unique ID for a `CustomizableOptionInterface` object.
  """
  uid: ID!

  """
  An object that defines a file value.
  """
  value: CustomizableFileValue
}

"""
Defines the price and sku of a product whose page contains a customized file picker.
"""
type CustomizableFileValue {
  """
  The file extension to accept.
  """
  file_extension: String

  """
  The maximum width of an image.
  """
  image_size_x: Int

  """
  The maximum height of an image.
  """
  image_size_y: Int

  """
  The price assigned to this option.
  """
  price: Float

  """
  FIXED, PERCENT, or DYNAMIC.
  """
  price_type: PriceTypeEnum

  """
  The Stock Keeping Unit for this option.
  """
  sku: String

  """
  The unique ID for a `CustomizableFileValue` object.
  """
  uid: ID!
}

"""
Contains basic information about a product image or video.
"""
interface MediaGalleryInterface {
  """
  Indicates whether the image is hidden from view.
  """
  disabled: Boolean

  """
  The label of the product image or video.
  """
  label: String

  """
  The media item's position after it has been sorted.
  """
  position: Int

  """
  The URL of the product image or video.
  """
  url: String
}

"""
Contains product image information, including the image URL and label.
"""
type ProductImage implements MediaGalleryInterface {
  """
  Indicates whether the image is hidden from view.
  """
  disabled: Boolean

  """
  The label of the product image or video.
  """
  label: String

  """
  The media item's position after it has been sorted.
  """
  position: Int

  """
  The URL of the product image or video.
  """
  url: String
}

"""
Contains information about a product video.
"""
type ProductVideo implements MediaGalleryInterface {
  """
  Indicates whether the image is hidden from view.
  """
  disabled: Boolean

  """
  The label of the product image or video.
  """
  label: String

  """
  The media item's position after it has been sorted.
  """
  position: Int

  """
  The URL of the product image or video.
  """
  url: String

  """
  Contains a `ProductMediaGalleryEntriesVideoContent` object.
  """
  video_content: ProductMediaGalleryEntriesVideoContent
}

"""
Contains basic information about a customizable option. It can be implemented by several types of configurable options.
"""
interface CustomizableOptionInterface {
  """
  Option ID.
  """
  option_id: Int @deprecated(reason: "Use `uid` instead")

  """
  Indicates whether the option is required.
  """
  required: Boolean

  """
  The order in which the option is displayed.
  """
  sort_order: Int

  """
  The display name for this option.
  """
  title: String

  """
  The unique ID for a `CustomizableOptionInterface` object.
  """
  uid: ID!
}

"""
Contains information about customizable product options.
"""
interface CustomizableProductInterface {
  """
  An array of options for a customizable product.
  """
  options: [CustomizableOptionInterface]
}

"""
Contains the full set of attributes that can be returned in a category search.
"""
interface CategoryInterface {
  available_sort_by: [String]

  """
  An array of breadcrumb items.
  """
  breadcrumbs: [Breadcrumb]

  """
  The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled.
  """
  canonical_url: String

  children_count: String

  """
  Contains a category CMS block.
  """
  cms_block: CmsBlock

  """
  The timestamp indicating when the category was created.
  """
  created_at: String @deprecated(reason: "The field should not be used on the storefront.")

  custom_layout_update_file: String

  """
  The attribute to use for sorting.
  """
  default_sort_by: String

  """
  An optional description of the category.
  """
  description: String

  display_mode: String

  filter_price_range: Float

  """
  An ID that uniquely identifies the category.
  """
  id: Int @deprecated(reason: "Use `uid` instead.")

  image: String

  include_in_menu: Int

  is_anchor: Int

  landing_page: Int

  """
  The depth of the category within the tree.
  """
  level: Int

  meta_description: String

  meta_keywords: String

  meta_title: String

  """
  The display name of the category.
  """
  name: String

  """
  The full category path.
  """
  path: String

  """
  The category path within the store.
  """
  path_in_store: String

  """
  The position of the category relative to other categories at the same level in tree.
  """
  position: Int

  """
  The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not.
  """
  product_count: Int

  """
  The list of products assigned to the category.
  """
  products("The maximum number of results to return at once. The default value is 20." pageSize: Int = 20, "The page of results to return. The default value is 1." currentPage: Int = 1, "The attributes to sort on, and whether to return the results in ascending or descending order." sort: ProductAttributeSortInput): CategoryProducts

  """
  The unique ID for a `CategoryInterface` object.
  """
  uid: ID!

  """
  The timestamp indicating when the category was updated.
  """
  updated_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  The URL key assigned to the category.
  """
  url_key: String

  """
  The URL path assigned to the category.
  """
  url_path: String

  """
  The part of the category URL that is appended after the url key
  """
  url_suffix: String
}

"""
Contains details about an individual category that comprises a breadcrumb.
"""
type Breadcrumb {
  """
  The ID of the category.
  """
  category_id: Int @deprecated(reason: "Use `category_uid` instead.")

  """
  The category level.
  """
  category_level: Int

  """
  The display name of the category.
  """
  category_name: String

  """
  The unique ID for a `Breadcrumb` object.
  """
  category_uid: ID!

  """
  The URL key of the category.
  """
  category_url_key: String

  """
  The URL path of the category.
  """
  category_url_path: String
}

"""
Contains information about a set of radio buttons that are defined as part of a customizable option.
"""
type CustomizableRadioOption implements CustomizableOptionInterface {
  """
  Option ID.
  """
  option_id: Int @deprecated(reason: "Use `uid` instead")

  """
  Indicates whether the option is required.
  """
  required: Boolean

  """
  The order in which the option is displayed.
  """
  sort_order: Int

  """
  The display name for this option.
  """
  title: String

  """
  The unique ID for a `CustomizableOptionInterface` object.
  """
  uid: ID!

  """
  An array that defines a set of radio buttons.
  """
  value: [CustomizableRadioValue]
}

"""
Defines the price and sku of a product whose page contains a customized set of radio buttons.
"""
type CustomizableRadioValue {
  """
  The ID assigned to the value.
  """
  option_type_id: Int

  """
  The price assigned to this option.
  """
  price: Float

  """
  FIXED, PERCENT, or DYNAMIC.
  """
  price_type: PriceTypeEnum

  """
  The Stock Keeping Unit for this option.
  """
  sku: String

  """
  The order in which the radio button is displayed.
  """
  sort_order: Int

  """
  The display name for this option.
  """
  title: String

  """
  The unique ID for a `CustomizableRadioValue` object.
  """
  uid: ID!
}

"""
Contains information about a set of checkbox values that are defined as part of a customizable option.
"""
type CustomizableCheckboxOption implements CustomizableOptionInterface {
  """
  Option ID.
  """
  option_id: Int @deprecated(reason: "Use `uid` instead")

  """
  Indicates whether the option is required.
  """
  required: Boolean

  """
  The order in which the option is displayed.
  """
  sort_order: Int

  """
  The display name for this option.
  """
  title: String

  """
  The unique ID for a `CustomizableOptionInterface` object.
  """
  uid: ID!

  """
  An array that defines a set of checkbox values.
  """
  value: [CustomizableCheckboxValue]
}

"""
Defines the price and sku of a product whose page contains a customized set of checkbox values.
"""
type CustomizableCheckboxValue {
  """
  The ID assigned to the value.
  """
  option_type_id: Int

  """
  The price assigned to this option.
  """
  price: Float

  """
  FIXED, PERCENT, or DYNAMIC.
  """
  price_type: PriceTypeEnum

  """
  The Stock Keeping Unit for this option.
  """
  sku: String

  """
  The order in which the checkbox value is displayed.
  """
  sort_order: Int

  """
  The display name for this option.
  """
  title: String

  """
  The unique ID for a `CustomizableCheckboxValue` object.
  """
  uid: ID!
}

"""
Defines a virtual product, which is a non-tangible product that does not require shipping and is not kept in inventory.
"""
type VirtualProduct implements ProductInterface & CustomizableProductInterface & RoutableInterface {
  activity: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  as_featured: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The attribute set assigned to the product.
  """
  attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")

  """
  The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled.
  """
  canonical_url: String

  """
  The categories assigned to a product.
  """
  categories: [CategoryInterface]

  category_gear: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  climate: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  collar: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The product's country of origin.
  """
  country_of_manufacture: String

  """
  Timestamp indicating when the product was created.
  """
  created_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  Crosssell Products
  """
  crosssell_products: [ProductInterface]

  """
  Product custom attributes.
  """
  custom_attributesV2("" filters: AttributeFilterInput): ProductCustomAttributes

  """
  Detailed information about the product. The value can include simple HTML tags.
  """
  description: ComplexTextValue

  eco_collection: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  erin_recommends: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  features_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  format: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  gender: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates whether a gift message is available.
  """
  gift_message_available: String

  """
  The ID number assigned to the product.
  """
  id: Int @deprecated(reason: "Use the `uid` field instead.")

  """
  The relative path to the main image on the product page.
  """
  image: ProductImage

  """
  A number representing the product's manufacturer.
  """
  manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  material: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  An array of media gallery objects.
  """
  media_gallery: [MediaGalleryInterface]

  """
  An array of MediaGalleryEntry objects.
  """
  media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")

  """
  A brief overview of the product for search results listings, maximum 255 characters.
  """
  meta_description: String

  """
  A comma-separated list of keywords that are visible only to search engines.
  """
  meta_keyword: String

  """
  A string that is displayed in the title bar and tab of the browser and in search results lists.
  """
  meta_title: String

  """
  The product name. Customers use this name to identify the product.
  """
  name: String

  new: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The beginning date for new product listings, and determines if the product is featured as a new product.
  """
  new_from_date: String

  """
  The end date for new product listings.
  """
  new_to_date: String

  """
  Product stock only x left count
  """
  only_x_left_in_stock: Float

  """
  An array of options for a customizable product.
  """
  options: [CustomizableOptionInterface]

  """
  If the product has multiple options, determines where they appear on the product page.
  """
  options_container: String

  pattern: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  performance_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates the price of an item.
  """
  price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")

  """
  The range of prices for the product
  """
  price_range: PriceRange!

  """
  An array of `TierPrice` objects.
  """
  price_tiers: [TierPrice]

  """
  An array of `ProductLinks` objects.
  """
  product_links: [ProductLinksInterface]

  """
  The average of all the ratings given to the product.
  """
  rating_summary: Float!

  """
  Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect.
  """
  redirect_code: Int!

  """
  An array of products to be displayed in a Related Products block.
  """
  related_products: [ProductInterface]

  """
  The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original.
  """
  relative_url: String

  """
  The total count of all the reviews given to the product.
  """
  review_count: Int!

  """
  The list of products reviews.
  """
  reviews("The maximum number of results to return at once. The default is 20." pageSize: Int = 20, "The page of results to return. The default is 1." currentPage: Int = 1): ProductReviews!

  sale: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  A short description of the product. Its use depends on the theme.
  """
  short_description: ComplexTextValue

  size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  A number or code assigned to a product to identify the product, options, price, and manufacturer.
  """
  sku: String

  sleeve: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The relative path to the small image, which is used on catalog pages.
  """
  small_image: ProductImage

  """
  The beginning date that a product has a special price.
  """
  special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  The discounted price of the product.
  """
  special_price: Float

  """
  The end date for a product with a special price.
  """
  special_to_date: String

  """
  Stock status of the product
  """
  stock_status: ProductStockStatus

  strap_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_bottom: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_general: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The file name of a swatch image.
  """
  swatch_image: String

  """
  The relative path to the product's thumbnail image.
  """
  thumbnail: ProductImage

  """
  The price when tier pricing is in effect and the items purchased threshold has been reached.
  """
  tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")

  """
  An array of ProductTierPrices objects.
  """
  tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")

  """
  One of PRODUCT, CATEGORY, or CMS_PAGE.
  """
  type: UrlRewriteEntityTypeEnum

  """
  One of simple, virtual, bundle, downloadable, grouped, or configurable.
  """
  type_id: String @deprecated(reason: "Use `__typename` instead.")

  """
  The unique ID for a `ProductInterface` object.
  """
  uid: ID!

  """
  Timestamp indicating when the product was updated.
  """
  updated_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  Upsell Products
  """
  upsell_products: [ProductInterface]

  """
  The part of the URL that identifies the product
  """
  url_key: String

  url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")

  """
  URL rewrites list
  """
  url_rewrites: [UrlRewrite]

  """
  The part of the product URL that is appended after the url key
  """
  url_suffix: String

  """
  An array of websites in which the product is available.
  """
  websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
}

"""
Defines a simple product, which is tangible and is usually sold in single units or in fixed quantities.
"""
type SimpleProduct implements ProductInterface & PhysicalProductInterface & CustomizableProductInterface & RoutableInterface {
  activity: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  as_featured: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The attribute set assigned to the product.
  """
  attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")

  """
  The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled.
  """
  canonical_url: String

  """
  The categories assigned to a product.
  """
  categories: [CategoryInterface]

  category_gear: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  climate: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  collar: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The product's country of origin.
  """
  country_of_manufacture: String

  """
  Timestamp indicating when the product was created.
  """
  created_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  Crosssell Products
  """
  crosssell_products: [ProductInterface]

  """
  Product custom attributes.
  """
  custom_attributesV2("" filters: AttributeFilterInput): ProductCustomAttributes

  """
  Detailed information about the product. The value can include simple HTML tags.
  """
  description: ComplexTextValue

  eco_collection: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  erin_recommends: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  features_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  format: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  gender: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates whether a gift message is available.
  """
  gift_message_available: String

  """
  The ID number assigned to the product.
  """
  id: Int @deprecated(reason: "Use the `uid` field instead.")

  """
  The relative path to the main image on the product page.
  """
  image: ProductImage

  """
  A number representing the product's manufacturer.
  """
  manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  material: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  An array of media gallery objects.
  """
  media_gallery: [MediaGalleryInterface]

  """
  An array of MediaGalleryEntry objects.
  """
  media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")

  """
  A brief overview of the product for search results listings, maximum 255 characters.
  """
  meta_description: String

  """
  A comma-separated list of keywords that are visible only to search engines.
  """
  meta_keyword: String

  """
  A string that is displayed in the title bar and tab of the browser and in search results lists.
  """
  meta_title: String

  """
  The product name. Customers use this name to identify the product.
  """
  name: String

  new: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The beginning date for new product listings, and determines if the product is featured as a new product.
  """
  new_from_date: String

  """
  The end date for new product listings.
  """
  new_to_date: String

  """
  Product stock only x left count
  """
  only_x_left_in_stock: Float

  """
  An array of options for a customizable product.
  """
  options: [CustomizableOptionInterface]

  """
  If the product has multiple options, determines where they appear on the product page.
  """
  options_container: String

  pattern: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  performance_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates the price of an item.
  """
  price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")

  """
  The range of prices for the product
  """
  price_range: PriceRange!

  """
  An array of `TierPrice` objects.
  """
  price_tiers: [TierPrice]

  """
  An array of `ProductLinks` objects.
  """
  product_links: [ProductLinksInterface]

  """
  The average of all the ratings given to the product.
  """
  rating_summary: Float!

  """
  Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect.
  """
  redirect_code: Int!

  """
  An array of products to be displayed in a Related Products block.
  """
  related_products: [ProductInterface]

  """
  The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original.
  """
  relative_url: String

  """
  The total count of all the reviews given to the product.
  """
  review_count: Int!

  """
  The list of products reviews.
  """
  reviews("The maximum number of results to return at once. The default is 20." pageSize: Int = 20, "The page of results to return. The default is 1." currentPage: Int = 1): ProductReviews!

  sale: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  A short description of the product. Its use depends on the theme.
  """
  short_description: ComplexTextValue

  size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  A number or code assigned to a product to identify the product, options, price, and manufacturer.
  """
  sku: String

  sleeve: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The relative path to the small image, which is used on catalog pages.
  """
  small_image: ProductImage

  """
  The beginning date that a product has a special price.
  """
  special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  The discounted price of the product.
  """
  special_price: Float

  """
  The end date for a product with a special price.
  """
  special_to_date: String

  """
  Stock status of the product
  """
  stock_status: ProductStockStatus

  strap_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_bottom: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_general: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The file name of a swatch image.
  """
  swatch_image: String

  """
  The relative path to the product's thumbnail image.
  """
  thumbnail: ProductImage

  """
  The price when tier pricing is in effect and the items purchased threshold has been reached.
  """
  tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")

  """
  An array of ProductTierPrices objects.
  """
  tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")

  """
  One of PRODUCT, CATEGORY, or CMS_PAGE.
  """
  type: UrlRewriteEntityTypeEnum

  """
  One of simple, virtual, bundle, downloadable, grouped, or configurable.
  """
  type_id: String @deprecated(reason: "Use `__typename` instead.")

  """
  The unique ID for a `ProductInterface` object.
  """
  uid: ID!

  """
  Timestamp indicating when the product was updated.
  """
  updated_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  Upsell Products
  """
  upsell_products: [ProductInterface]

  """
  The part of the URL that identifies the product
  """
  url_key: String

  url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")

  """
  URL rewrites list
  """
  url_rewrites: [UrlRewrite]

  """
  The part of the product URL that is appended after the url key
  """
  url_suffix: String

  """
  An array of websites in which the product is available.
  """
  websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")

  """
  The weight of the item, in units defined by the store.
  """
  weight: Float
}

"""
Contains the results of a `products` query.
"""
type Products {
  """
  A bucket that contains the attribute code and label for each filterable option.
  """
  aggregations("" filter: AggregationsFilterInput): [Aggregation]

  """
  Layered navigation filters array.
  """
  filters: [LayerFilter] @deprecated(reason: "Use `aggregations` instead.")

  """
  An array of products that match the specified search criteria.
  """
  items: [ProductInterface]

  """
  An object that includes the page_info and currentPage values specified in the query.
  """
  page_info: SearchResultPageInfo

  """
  An object that includes the default sort field and all available sort fields.
  """
  sort_fields: SortFields

  """
  An array of search suggestions for case when search query have no results.
  """
  suggestions: [SearchSuggestion]

  """
  The number of products that are marked as visible. By default, in complex products, parent products are visible, but their child products are not.
  """
  total_count: Int
}

"""
An input object that specifies the filters used in product aggregations.
"""
input AggregationsFilterInput {
  """
  Filter category aggregations in layered navigation.
  """
  category: AggregationsCategoryFilterInput
}

"""
Filter category aggregations in layered navigation.
"""
input AggregationsCategoryFilterInput {
  """
  Indicates whether to include only direct subcategories or all children categories at all levels.
  """
  includeDirectChildrenOnly: Boolean
}

"""
Contains details about the products assigned to a category.
"""
type CategoryProducts {
  """
  An array of products that are assigned to the category.
  """
  items: [ProductInterface]

  """
  Pagination metadata.
  """
  page_info: SearchResultPageInfo

  """
  The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not.
  """
  total_count: Int
}

"""
Defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.
"""
input ProductAttributeFilterInput {
  """
  Attribute label: Activity
  """
  activity: FilterEqualTypeInput

  """
  Attribute label: Category Gear
  """
  category_gear: FilterEqualTypeInput

  """
  Deprecated: use `category_uid` to filter product by category ID.
  """
  category_id: FilterEqualTypeInput

  """
  Filter product by the unique ID for a `CategoryInterface` object.
  """
  category_uid: FilterEqualTypeInput

  """
  Filter product by category URL path.
  """
  category_url_path: FilterEqualTypeInput

  """
  Attribute label: Climate
  """
  climate: FilterEqualTypeInput

  """
  Attribute label: Collar
  """
  collar: FilterEqualTypeInput

  """
  Attribute label: Color
  """
  color: FilterEqualTypeInput

  """
  Attribute label: Description
  """
  description: FilterMatchTypeInput

  """
  Attribute label: Eco Collection
  """
  eco_collection: FilterEqualTypeInput

  """
  Attribute label: Erin Recommends
  """
  erin_recommends: FilterEqualTypeInput

  """
  Attribute label: Features
  """
  features_bags: FilterEqualTypeInput

  """
  Attribute label: Format
  """
  format: FilterEqualTypeInput

  """
  Attribute label: Gender
  """
  gender: FilterEqualTypeInput

  """
  Attribute label: Material
  """
  material: FilterEqualTypeInput

  """
  Attribute label: Product Name
  """
  name: FilterMatchTypeInput

  """
  Attribute label: New
  """
  new: FilterEqualTypeInput

  """
  Attribute label: Pattern
  """
  pattern: FilterEqualTypeInput

  """
  Attribute label: Performance Fabric
  """
  performance_fabric: FilterEqualTypeInput

  """
  Attribute label: Price
  """
  price: FilterRangeTypeInput

  """
  Attribute label: Sale
  """
  sale: FilterEqualTypeInput

  """
  Attribute label: Short Description
  """
  short_description: FilterMatchTypeInput

  """
  Attribute label: Size
  """
  size: FilterEqualTypeInput

  """
  Attribute label: SKU
  """
  sku: FilterEqualTypeInput

  """
  Attribute label: Sleeve
  """
  sleeve: FilterEqualTypeInput

  """
  Attribute label: Strap/Handle
  """
  strap_bags: FilterEqualTypeInput

  """
  Attribute label: Style Bags
  """
  style_bags: FilterEqualTypeInput

  """
  Attribute label: Style Bottom
  """
  style_bottom: FilterEqualTypeInput

  """
  Attribute label: Style General
  """
  style_general: FilterEqualTypeInput

  """
  The part of the URL that identifies the product
  """
  url_key: FilterEqualTypeInput
}

"""
Defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.
"""
input CategoryFilterInput {
  """
  Filter by the unique category ID for a `CategoryInterface` object.
  """
  category_uid: FilterEqualTypeInput

  """
  Deprecated: use 'category_uid' to filter uniquely identifiers of categories.
  """
  ids: FilterEqualTypeInput

  """
  Filter by the display name of the category.
  """
  name: FilterMatchTypeInput

  """
  Filter by the unique parent category ID for a `CategoryInterface` object.
  """
  parent_category_uid: FilterEqualTypeInput

  """
  Filter by the unique parent category ID for a `CategoryInterface` object.
  """
  parent_id: FilterEqualTypeInput

  """
  Filter by the part of the URL that identifies the category.
  """
  url_key: FilterEqualTypeInput

  """
  Filter by the URL path for the category.
  """
  url_path: FilterEqualTypeInput
}

"""
ProductFilterInput is deprecated, use @ProductAttributeFilterInput instead. ProductFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.
"""
input ProductFilterInput {
  """
  The category ID the product belongs to.
  """
  category_id: FilterTypeInput

  """
  The product's country of origin.
  """
  country_of_manufacture: FilterTypeInput

  """
  The timestamp indicating when the product was created.
  """
  created_at: FilterTypeInput

  """
  The name of a custom layout.
  """
  custom_layout: FilterTypeInput

  """
  XML code that is applied as a layout update to the product page.
  """
  custom_layout_update: FilterTypeInput

  """
  Detailed information about the product. The value can include simple HTML tags.
  """
  description: FilterTypeInput

  """
  Indicates whether a gift message is available.
  """
  gift_message_available: FilterTypeInput

  """
  Indicates whether additional attributes have been created for the product.
  """
  has_options: FilterTypeInput

  """
  The relative path to the main image on the product page.
  """
  image: FilterTypeInput

  """
  The label assigned to a product image.
  """
  image_label: FilterTypeInput

  """
  A number representing the product's manufacturer.
  """
  manufacturer: FilterTypeInput

  """
  The numeric maximal price of the product. Do not include the currency code.
  """
  max_price: FilterTypeInput

  """
  A brief overview of the product for search results listings, maximum 255 characters.
  """
  meta_description: FilterTypeInput

  """
  A comma-separated list of keywords that are visible only to search engines.
  """
  meta_keyword: FilterTypeInput

  """
  A string that is displayed in the title bar and tab of the browser and in search results lists.
  """
  meta_title: FilterTypeInput

  """
  The numeric minimal price of the product. Do not include the currency code.
  """
  min_price: FilterTypeInput

  """
  The product name. Customers use this name to identify the product.
  """
  name: FilterTypeInput

  """
  The beginning date for new product listings, and determines if the product is featured as a new product.
  """
  news_from_date: FilterTypeInput

  """
  The end date for new product listings.
  """
  news_to_date: FilterTypeInput

  """
  If the product has multiple options, determines where they appear on the product page.
  """
  options_container: FilterTypeInput

  """
  The keyword required to perform a logical OR comparison.
  """
  or: ProductFilterInput

  """
  The price of an item.
  """
  price: FilterTypeInput

  """
  Indicates whether the product has required options.
  """
  required_options: FilterTypeInput

  """
  A short description of the product. Its use depends on the theme.
  """
  short_description: FilterTypeInput

  """
  A number or code assigned to a product to identify the product, options, price, and manufacturer.
  """
  sku: FilterTypeInput

  """
  The relative path to the small image, which is used on catalog pages.
  """
  small_image: FilterTypeInput

  """
  The label assigned to a product's small image.
  """
  small_image_label: FilterTypeInput

  """
  The beginning date that a product has a special price.
  """
  special_from_date: FilterTypeInput

  """
  The discounted price of the product. Do not include the currency code.
  """
  special_price: FilterTypeInput

  """
  The end date that a product has a special price.
  """
  special_to_date: FilterTypeInput

  """
  The file name of a swatch image.
  """
  swatch_image: FilterTypeInput

  """
  The relative path to the product's thumbnail image.
  """
  thumbnail: FilterTypeInput

  """
  The label assigned to a product's thumbnail image.
  """
  thumbnail_label: FilterTypeInput

  """
  The price when tier pricing is in effect and the items purchased threshold has been reached.
  """
  tier_price: FilterTypeInput

  """
  The timestamp indicating when the product was updated.
  """
  updated_at: FilterTypeInput

  """
  The part of the URL that identifies the product
  """
  url_key: FilterTypeInput

  url_path: FilterTypeInput

  """
  The weight of the item, in units defined by the store.
  """
  weight: FilterTypeInput
}

"""
Contains an image in base64 format and basic information about the image.
"""
type ProductMediaGalleryEntriesContent {
  """
  The image in base64 format.
  """
  base64_encoded_data: String

  """
  The file name of the image.
  """
  name: String

  """
  The MIME type of the file, such as image/png.
  """
  type: String
}

"""
Contains a link to a video file and basic information about the video.
"""
type ProductMediaGalleryEntriesVideoContent {
  """
  Must be external-video.
  """
  media_type: String

  """
  A description of the video.
  """
  video_description: String

  """
  Optional data about the video.
  """
  video_metadata: String

  """
  Describes the video source.
  """
  video_provider: String

  """
  The title of the video.
  """
  video_title: String

  """
  The URL to the video.
  """
  video_url: String
}

"""
Deprecated. Use `ProductAttributeSortInput` instead. Specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order.
"""
input ProductSortInput {
  """
  The product's country of origin.
  """
  country_of_manufacture: SortEnum

  """
  The timestamp indicating when the product was created.
  """
  created_at: SortEnum

  """
  The name of a custom layout.
  """
  custom_layout: SortEnum

  """
  XML code that is applied as a layout update to the product page.
  """
  custom_layout_update: SortEnum

  """
  Detailed information about the product. The value can include simple HTML tags.
  """
  description: SortEnum

  """
  Indicates whether a gift message is available.
  """
  gift_message_available: SortEnum

  """
  Indicates whether additional attributes have been created for the product.
  """
  has_options: SortEnum

  """
  The relative path to the main image on the product page.
  """
  image: SortEnum

  """
  The label assigned to a product image.
  """
  image_label: SortEnum

  """
  A number representing the product's manufacturer.
  """
  manufacturer: SortEnum

  """
  A brief overview of the product for search results listings, maximum 255 characters.
  """
  meta_description: SortEnum

  """
  A comma-separated list of keywords that are visible only to search engines.
  """
  meta_keyword: SortEnum

  """
  A string that is displayed in the title bar and tab of the browser and in search results lists.
  """
  meta_title: SortEnum

  """
  The product name. Customers use this name to identify the product.
  """
  name: SortEnum

  """
  The beginning date for new product listings, and determines if the product is featured as a new product.
  """
  news_from_date: SortEnum

  """
  The end date for new product listings.
  """
  news_to_date: SortEnum

  """
  If the product has multiple options, determines where they appear on the product page.
  """
  options_container: SortEnum

  """
  The price of the item.
  """
  price: SortEnum

  """
  Indicates whether the product has required options.
  """
  required_options: SortEnum

  """
  A short description of the product. Its use depends on the theme.
  """
  short_description: SortEnum

  """
  A number or code assigned to a product to identify the product, options, price, and manufacturer.
  """
  sku: SortEnum

  """
  The relative path to the small image, which is used on catalog pages.
  """
  small_image: SortEnum

  """
  The label assigned to a product's small image.
  """
  small_image_label: SortEnum

  """
  The beginning date that a product has a special price.
  """
  special_from_date: SortEnum

  """
  The discounted price of the product.
  """
  special_price: SortEnum

  """
  The end date that a product has a special price.
  """
  special_to_date: SortEnum

  """
  Indicates the criteria to sort swatches.
  """
  swatch_image: SortEnum

  """
  The relative path to the product's thumbnail image.
  """
  thumbnail: SortEnum

  """
  The label assigned to a product's thumbnail image.
  """
  thumbnail_label: SortEnum

  """
  The price when tier pricing is in effect and the items purchased threshold has been reached.
  """
  tier_price: SortEnum

  """
  The timestamp indicating when the product was updated.
  """
  updated_at: SortEnum

  """
  The part of the URL that identifies the product
  """
  url_key: SortEnum

  url_path: SortEnum

  """
  The weight of the item, in units defined by the store.
  """
  weight: SortEnum
}

"""
Specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. It's possible to sort products using searchable attributes with enabled 'Use in Filter Options' option
"""
input ProductAttributeSortInput {
  """
  Attribute label: Product Name
  """
  name: SortEnum

  """
  Sort by the position assigned to each product.
  """
  position: SortEnum

  """
  Attribute label: Price
  """
  price: SortEnum

  """
  Sort by the search relevance score (default).
  """
  relevance: SortEnum
}

"""
Defines characteristics about images and videos associated with a specific product.
"""
type MediaGalleryEntry {
  """
  Details about the content of the media gallery item.
  """
  content: ProductMediaGalleryEntriesContent

  """
  Indicates whether the image is hidden from view.
  """
  disabled: Boolean

  """
  The path of the image on the server.
  """
  file: String

  """
  The identifier assigned to the object.
  """
  id: Int @deprecated(reason: "Use `uid` instead.")

  """
  The alt text displayed on the storefront when the user points to the image.
  """
  label: String

  """
  Either `image` or `video`.
  """
  media_type: String

  """
  The media item's position after it has been sorted.
  """
  position: Int

  """
  Array of image types. It can have the following values: image, small_image, thumbnail.
  """
  types: [String]

  """
  The unique ID for a `MediaGalleryEntry` object.
  """
  uid: ID!

  """
  Details about the content of a video item.
  """
  video_content: ProductMediaGalleryEntriesVideoContent
}

"""
Contains information for rendering layered navigation.
"""
type LayerFilter {
  """
  An array of filter items.
  """
  filter_items: [LayerFilterItemInterface] @deprecated(reason: "Use `Aggregation.options` instead.")

  """
  The count of filter items in filter group.
  """
  filter_items_count: Int @deprecated(reason: "Use `Aggregation.count` instead.")

  """
  The name of a layered navigation filter.
  """
  name: String @deprecated(reason: "Use `Aggregation.label` instead.")

  """
  The request variable name for a filter query.
  """
  request_var: String @deprecated(reason: "Use `Aggregation.attribute_code` instead.")
}

interface LayerFilterItemInterface {
  """
  The count of items per filter.
  """
  items_count: Int @deprecated(reason: "Use `AggregationOption.count` instead.")

  """
  The label for a filter.
  """
  label: String @deprecated(reason: "Use `AggregationOption.label` instead.")

  """
  The value of a filter request variable to be used in query.
  """
  value_string: String @deprecated(reason: "Use `AggregationOption.value` instead.")
}

type LayerFilterItem implements LayerFilterItemInterface {
  """
  The count of items per filter.
  """
  items_count: Int @deprecated(reason: "Use `AggregationOption.count` instead.")

  """
  The label for a filter.
  """
  label: String @deprecated(reason: "Use `AggregationOption.label` instead.")

  """
  The value of a filter request variable to be used in query.
  """
  value_string: String @deprecated(reason: "Use `AggregationOption.value` instead.")
}

"""
Contains information for each filterable option (such as price, category `UID`, and custom attributes).
"""
type Aggregation {
  """
  Attribute code of the aggregation group.
  """
  attribute_code: String!

  """
  The number of options in the aggregation group.
  """
  count: Int

  """
  The aggregation display name.
  """
  label: String

  """
  Array of options for the aggregation.
  """
  options: [AggregationOption]

  """
  The relative position of the attribute in a layered navigation block.
  """
  position: Int
}

"""
A string that contains search suggestion
"""
type SearchSuggestion {
  message: String

  """
  The search suggestion of existing product.
  """
  search: String!

  success: Boolean

  suggestProductArray: SuggestProductArray
}

"""
Defines aggregation option fields.
"""
interface AggregationOptionInterface {
  """
  The number of items that match the aggregation option.
  """
  count: Int

  """
  The display label for an aggregation option.
  """
  label: String

  """
  The internal ID that represents the value of the option.
  """
  value: String!
}

"""
An implementation of `AggregationOptionInterface`.
"""
type AggregationOption implements AggregationOptionInterface {
  """
  The number of items that match the aggregation option.
  """
  count: Int

  """
  The display label for an aggregation option.
  """
  label: String

  """
  The internal ID that represents the value of the option.
  """
  value: String!
}

"""
Defines a possible sort field.
"""
type SortField {
  """
  The label of the sort field.
  """
  label: String

  """
  The attribute code of the sort field.
  """
  value: String
}

"""
Contains a default value for sort fields and all available sort fields.
"""
type SortFields {
  """
  The default sort field value.
  """
  default: String

  """
  An array of possible sort fields.
  """
  options: [SortField]
}

"""
Contains a simple product wish list item.
"""
type SimpleWishlistItem implements WishlistItemInterface {
  """
  The date and time the item was added to the wish list.
  """
  added_at: String!

  """
  Custom options selected for the wish list item.
  """
  customizable_options: [SelectedCustomizableOption]!

  """
  The description of the item.
  """
  description: String

  """
  The unique ID for a `WishlistItemInterface` object.
  """
  id: ID!

  """
  Product details of the wish list item.
  """
  product: ProductInterface

  """
  The quantity of this wish list item.
  """
  quantity: Float!
}

"""
Contains a virtual product wish list item.
"""
type VirtualWishlistItem implements WishlistItemInterface {
  """
  The date and time the item was added to the wish list.
  """
  added_at: String!

  """
  Custom options selected for the wish list item.
  """
  customizable_options: [SelectedCustomizableOption]!

  """
  The description of the item.
  """
  description: String

  """
  The unique ID for a `WishlistItemInterface` object.
  """
  id: ID!

  """
  Product details of the wish list item.
  """
  product: ProductInterface

  """
  The quantity of this wish list item.
  """
  quantity: Float!
}

"""
Swatch attribute metadata.
"""
type CatalogAttributeMetadata implements CustomAttributeMetadataInterface {
  """
  To which catalog types an attribute can be applied.
  """
  apply_to: [CatalogAttributeApplyToEnum]

  """
  The unique identifier for an attribute code. This value should be in lowercase letters without spaces.
  """
  code: ID!

  """
  Default attribute value.
  """
  default_value: String

  """
  The type of entity that defines the attribute.
  """
  entity_type: AttributeEntityTypeEnum!

  """
  The frontend class of the attribute.
  """
  frontend_class: String

  """
  The frontend input type of the attribute.
  """
  frontend_input: AttributeFrontendInputEnum

  """
  Whether a product or category attribute can be compared against another or not.
  """
  is_comparable: Boolean

  """
  Whether a product or category attribute can be filtered or not.
  """
  is_filterable: Boolean

  """
  Whether a product or category attribute can be filtered in search or not.
  """
  is_filterable_in_search: Boolean

  """
  Whether a product or category attribute can use HTML on front or not.
  """
  is_html_allowed_on_front: Boolean

  """
  Whether the attribute value is required.
  """
  is_required: Boolean!

  """
  Whether a product or category attribute can be searched or not.
  """
  is_searchable: Boolean

  """
  Whether the attribute value must be unique.
  """
  is_unique: Boolean!

  """
  Whether a product or category attribute can be used for price rules or not.
  """
  is_used_for_price_rules: Boolean

  """
  Whether a product or category attribute is used for promo rules or not.
  """
  is_used_for_promo_rules: Boolean

  """
  Whether a product or category attribute is visible in advanced search or not.
  """
  is_visible_in_advanced_search: Boolean

  """
  Whether a product or category attribute is visible on front or not.
  """
  is_visible_on_front: Boolean

  """
  Whether a product or category attribute has WYSIWYG enabled or not.
  """
  is_wysiwyg_enabled: Boolean

  """
  The label assigned to the attribute.
  """
  label: String

  """
  Attribute options.
  """
  options: [CustomAttributeOptionInterface]!

  """
  Input type of the swatch attribute option.
  """
  swatch_input_type: SwatchInputTypeEnum

  """
  Whether update product preview image or not.
  """
  update_product_preview_image: Boolean

  """
  Whether use product image for swatch or not.
  """
  use_product_image_for_swatch: Boolean

  """
  Whether a product or category attribute is used in product listing or not.
  """
  used_in_product_listing: Boolean
}

enum CatalogAttributeApplyToEnum {
  SIMPLE

  VIRTUAL

  BUNDLE

  DOWNLOADABLE

  CONFIGURABLE

  GROUPED

  CATEGORY
}

"""
Product custom attributes
"""
type ProductCustomAttributes {
  """
  Errors when retrieving custom attributes metadata.
  """
  errors: [AttributeMetadataError]!

  """
  Requested custom attributes
  """
  items: [AttributeValueInterface]!
}

input CreateGuestCartInput {
  """
  Optional client-generated ID
  """
  cart_uid: ID
}

"""
Assigns a specific `cart_id` to the empty cart.
"""
input createEmptyCartInput {
  """
  The ID to assign to the cart.
  """
  cart_id: String
}

"""
Defines the simple and group products to add to the cart.
"""
input AddSimpleProductsToCartInput {
  """
  The unique ID of a `Cart` object.
  """
  cart_id: String!

  """
  An array of simple and group items to add.
  """
  cart_items: [SimpleProductCartItemInput]!
}

"""
Defines a single product to add to the cart.
"""
input SimpleProductCartItemInput {
  """
  An array that defines customizable options for the product.
  """
  customizable_options: [CustomizableOptionInput]

  """
  An object containing the `sku`, `quantity`, and other relevant information about the product.
  """
  data: CartItemInput!
}

"""
Defines the virtual products to add to the cart.
"""
input AddVirtualProductsToCartInput {
  """
  The unique ID of a `Cart` object.
  """
  cart_id: String!

  """
  An array of virtual products to add.
  """
  cart_items: [VirtualProductCartItemInput]!
}

"""
Defines a single product to add to the cart.
"""
input VirtualProductCartItemInput {
  """
  An array that defines customizable options for the product.
  """
  customizable_options: [CustomizableOptionInput]

  """
  An object containing the `sku`, `quantity`, and other relevant information about the product.
  """
  data: CartItemInput!
}

"""
Defines an item to be added to the cart.
"""
input CartItemInput {
  """
  An array of entered options for the base product, such as personalization text.
  """
  entered_options: [EnteredOptionInput]

  """
  For a child product, the SKU of its parent product.
  """
  parent_sku: String

  """
  The amount or number of an item to add.
  """
  quantity: Float!

  """
  The selected options for the base product, such as color or size, using the unique ID for an object such as `CustomizableRadioOption`, `CustomizableDropDownOption`, or `ConfigurableProductOptionsValues`.
  """
  selected_options: [ID]

  """
  The SKU of the product.
  """
  sku: String!
}

"""
Specifies the field to use for sorting quote items
"""
enum SortQuoteItemsEnum {
  ITEM_ID

  CREATED_AT

  UPDATED_AT

  PRODUCT_ID

  SKU

  NAME

  DESCRIPTION

  WEIGHT

  QTY

  PRICE

  BASE_PRICE

  CUSTOM_PRICE

  DISCOUNT_PERCENT

  DISCOUNT_AMOUNT

  BASE_DISCOUNT_AMOUNT

  TAX_PERCENT

  TAX_AMOUNT

  BASE_TAX_AMOUNT

  ROW_TOTAL

  BASE_ROW_TOTAL

  ROW_TOTAL_WITH_DISCOUNT

  ROW_WEIGHT

  PRODUCT_TYPE

  BASE_TAX_BEFORE_DISCOUNT

  TAX_BEFORE_DISCOUNT

  ORIGINAL_CUSTOM_PRICE

  PRICE_INC_TAX

  BASE_PRICE_INC_TAX

  ROW_TOTAL_INC_TAX

  BASE_ROW_TOTAL_INC_TAX

  DISCOUNT_TAX_COMPENSATION_AMOUNT

  BASE_DISCOUNT_TAX_COMPENSATION_AMOUNT

  FREE_SHIPPING
}

"""
Specifies the field to use for sorting quote items
"""
input QuoteItemsSortInput {
  """
  Specifies the quote items field to sort by
  """
  field: SortQuoteItemsEnum!

  """
  Specifies the order of quote items' sorting
  """
  order: SortEnum!
}

"""
Defines a customizable option.
"""
input CustomizableOptionInput {
  """
  The customizable option ID of the product.
  """
  id: Int

  """
  The unique ID for a `CartItemInterface` object.
  """
  uid: ID

  """
  The string value of the option.
  """
  value_string: String!
}

"""
Specifies the coupon code to apply to the cart.
"""
input ApplyCouponToCartInput {
  """
  The unique ID of a `Cart` object.
  """
  cart_id: String!

  """
  A valid coupon code.
  """
  coupon_code: String!
}

"""
Modifies the specified items in the cart.
"""
input UpdateCartItemsInput {
  """
  The unique ID of a `Cart` object.
  """
  cart_id: String!

  """
  An array of items to be updated.
  """
  cart_items: [CartItemUpdateInput]!
}

"""
A single item to be updated.
"""
input CartItemUpdateInput {
  """
  Deprecated. Use `cart_item_uid` instead.
  """
  cart_item_id: Int

  """
  The unique ID for a `CartItemInterface` object.
  """
  cart_item_uid: ID

  """
  An array that defines customizable options for the product.
  """
  customizable_options: [CustomizableOptionInput]

  """
  Gift message details for the cart item
  """
  gift_message: GiftMessageInput

  """
  The new quantity of the item.
  """
  quantity: Float
}

"""
Specifies which items to remove from the cart.
"""
input RemoveItemFromCartInput {
  """
  The unique ID of a `Cart` object.
  """
  cart_id: String!

  """
  Deprecated. Use `cart_item_uid` instead.
  """
  cart_item_id: Int

  """
  Required field. The unique ID for a `CartItemInterface` object.
  """
  cart_item_uid: ID
}

"""
Specifies an array of addresses to use for shipping.
"""
input SetShippingAddressesOnCartInput {
  """
  The unique ID of a `Cart` object.
  """
  cart_id: String!

  """
  An array of shipping addresses.
  """
  shipping_addresses: [ShippingAddressInput]!
}

"""
Defines a single shipping address.
"""
input ShippingAddressInput {
  """
  Defines a shipping address.
  """
  address: CartAddressInput

  """
  An ID from the customer's address book that uniquely identifies the address to be used for shipping.
  """
  customer_address_id: Int

  """
  Text provided by the shopper.
  """
  customer_notes: String

  """
  The code of Pickup Location which will be used for In-Store Pickup.
  """
  pickup_location_code: String
}

"""
Sets the billing address.
"""
input SetBillingAddressOnCartInput {
  """
  The billing address.
  """
  billing_address: BillingAddressInput!

  """
  The unique ID of a `Cart` object.
  """
  cart_id: String!
}

"""
Defines the billing address.
"""
input BillingAddressInput {
  """
  Defines a billing address.
  """
  address: CartAddressInput

  """
  An ID from the customer's address book that uniquely identifies the address to be used for billing.
  """
  customer_address_id: Int

  """
  Indicates whether to set the billing address to be the same as the existing shipping address on the cart.
  """
  same_as_shipping: Boolean

  """
  Indicates whether to set the shipping address to be the same as this billing address.
  """
  use_for_shipping: Boolean
}

"""
Defines the billing or shipping address to be applied to the cart.
"""
input CartAddressInput {
  """
  The city specified for the billing or shipping address.
  """
  city: String!

  """
  The company specified for the billing or shipping address.
  """
  company: String

  """
  The country code and label for the billing or shipping address.
  """
  country_code: String!

  """
  The customer's fax number.
  """
  fax: String

  """
  The first name of the customer or guest.
  """
  firstname: String!

  """
  The last name of the customer or guest.
  """
  lastname: String!

  """
  The middle name of the person associated with the billing/shipping address.
  """
  middlename: String

  """
  The ZIP or postal code of the billing or shipping address.
  """
  postcode: String

  """
  An honorific, such as Dr., Mr., or Mrs.
  """
  prefix: String

  """
  A string that defines the state or province of the billing or shipping address.
  """
  region: String

  """
  An integer that defines the state or province of the billing or shipping address.
  """
  region_id: Int

  """
  Determines whether to save the address in the customer's address book. The default value is true.
  """
  save_in_address_book: Boolean

  """
  An array containing the street for the billing or shipping address.
  """
  street: [String]!

  """
  A value such as Sr., Jr., or III.
  """
  suffix: String

  """
  The telephone number for the billing or shipping address.
  """
  telephone: String

  """
  The VAT company number for billing or shipping address.
  """
  vat_id: String
}

"""
Applies one or shipping methods to the cart.
"""
input SetShippingMethodsOnCartInput {
  """
  The unique ID of a `Cart` object.
  """
  cart_id: String!

  """
  An array of shipping methods.
  """
  shipping_methods: [ShippingMethodInput]!
}

"""
Defines the shipping carrier and method.
"""
input ShippingMethodInput {
  """
  A string that identifies a commercial carrier or an offline delivery method.
  """
  carrier_code: String!

  """
  A string that indicates which service a commercial carrier will use to ship items. For offline delivery methods, this value is similar to the label displayed on the checkout page.
  """
  method_code: String!
}

"""
Applies a payment method to the quote.
"""
input SetPaymentMethodAndPlaceOrderInput {
  """
  The unique ID of a `Cart` object.
  """
  cart_id: String!

  """
  The payment method data to apply to the cart.
  """
  payment_method: PaymentMethodInput!
}

"""
Specifies the quote to be converted to an order.
"""
input PlaceOrderInput {
  """
  The unique ID of a `Cart` object.
  """
  cart_id: String!
}

"""
Applies a payment method to the cart.
"""
input SetPaymentMethodOnCartInput {
  """
  The unique ID of a `Cart` object.
  """
  cart_id: String!

  """
  The payment method data to apply to the cart.
  """
  payment_method: PaymentMethodInput!
}

"""
Defines the payment method.
"""
input PaymentMethodInput {
  """
  The internal name for the payment method.
  """
  code: String!

  """
  The purchase order number. Optional for most payment methods.
  """
  purchase_order_number: String
}

"""
Defines the guest email and cart.
"""
input SetGuestEmailOnCartInput {
  """
  The unique ID of a `Cart` object.
  """
  cart_id: String!

  """
  The email address of the guest.
  """
  email: String!
}

"""
Contains details about the final price of items in the cart, including discount and tax information.
"""
type CartPrices {
  """
  An array containing the names and amounts of taxes applied to each item in the cart.
  """
  applied_taxes: [CartTaxItem]

  discount: CartDiscount @deprecated(reason: "Use discounts instead.")

  """
  An array containing cart rule discounts, store credit and gift cards applied to the cart.
  """
  discounts: [Discount]

  """
  The total, including discounts, taxes, shipping, and other fees.
  """
  grand_total: Money

  """
  The subtotal without any applied taxes.
  """
  subtotal_excluding_tax: Money

  """
  The subtotal including any applied taxes.
  """
  subtotal_including_tax: Money

  """
  The subtotal with any discounts applied, but not taxes.
  """
  subtotal_with_discount_excluding_tax: Money
}

"""
Contains tax information about an item in the cart.
"""
type CartTaxItem {
  """
  The amount of tax applied to the item.
  """
  amount: Money!

  """
  The description of the tax.
  """
  label: String!
}

"""
Contains information about discounts applied to the cart.
"""
type CartDiscount {
  """
  The amount of the discount applied to the item.
  """
  amount: Money!

  """
  The description of the discount.
  """
  label: [String]!
}

type CreateGuestCartOutput {
  """
  The newly created cart.
  """
  cart: Cart
}

"""
Contains details about the cart after setting the payment method.
"""
type SetPaymentMethodOnCartOutput {
  """
  The cart after setting the payment method.
  """
  cart: Cart!
}

"""
Contains details about the cart after setting the billing address.
"""
type SetBillingAddressOnCartOutput {
  """
  The cart after setting the billing address.
  """
  cart: Cart!
}

"""
Contains details about the cart after setting the shipping addresses.
"""
type SetShippingAddressesOnCartOutput {
  """
  The cart after setting the shipping addresses.
  """
  cart: Cart!
}

"""
Contains details about the cart after setting the shipping methods.
"""
type SetShippingMethodsOnCartOutput {
  """
  The cart after setting the shipping methods.
  """
  cart: Cart!
}

"""
Contains details about the cart after applying a coupon.
"""
type ApplyCouponToCartOutput {
  """
  The cart after applying a coupon.
  """
  cart: Cart!
}

"""
Contains the results of the request to place an order.
"""
type PlaceOrderOutput {
  """
  An array of place order errors.
  """
  errors: [PlaceOrderError]!

  """
  The ID of the order.
  """
  order: Order @deprecated(reason: "Use `orderV2` instead.")

  """
  Full order information.
  """
  orderV2: CustomerOrder
}

"""
An error encountered while placing an order.
"""
type PlaceOrderError {
  """
  An error code that is specific to place order.
  """
  code: PlaceOrderErrorCodes!

  """
  A localized error message.
  """
  message: String!
}

"""
Contains the contents and other details about a guest or customer cart.
"""
type Cart {
  applied_coupon: AppliedCoupon @deprecated(reason: "Use `applied_coupons` instead.")

  """
  An array of `AppliedCoupon` objects. Each object contains the `code` text attribute, which specifies the coupon code.
  """
  applied_coupons: [AppliedCoupon]

  """
  An array of available payment methods.
  """
  available_payment_methods: [AvailablePaymentMethod]

  """
  The billing address assigned to the cart.
  """
  billing_address: BillingCartAddress

  """
  The email address of the guest or customer.
  """
  email: String

  """
  The entered gift message for the cart
  """
  gift_message: GiftMessage

  """
  The unique ID for a `Cart` object.
  """
  id: ID!

  """
  Indicates whether the cart contains only virtual products.
  """
  is_virtual: Boolean!

  """
  An array of products that have been added to the cart.
  """
  items: [CartItemInterface] @deprecated(reason: "Use `itemsV2` instead.")

  itemsV2("" pageSize: Int = 20, "" currentPage: Int = 1, "" sort: QuoteItemsSortInput): CartItems

  """
  Pricing details for the quote.
  """
  prices: CartPrices

  """
  Indicates which payment method was applied to the cart.
  """
  selected_payment_method: SelectedPaymentMethod

  """
  An array of shipping addresses assigned to the cart.
  """
  shipping_addresses: [ShippingCartAddress]!

  """
  The total number of items in the cart.
  """
  total_quantity: Float!
}

type CartItems {
  canMoveToWishlist: Boolean

  dominantColor: String

  finalPrice: Float

  formattedFinalPrice: String

  formattedPrice: String

  groupedProductId: Int

  id: String

  image: String

  isInRange: Boolean

  """
  An array of products that have been added to the cart.
  """
  items: [CartItemInterface]!

  message: [String]

  name: String

  options: [CartItemOptions]

  """
  Metadata for pagination rendering.
  """
  page_info: SearchResultPageInfo

  price: Float

  productId: String

  qty: Int

  remainingQty: Int

  sku: String

  subTotal: String

  thresholdQty: String

  """
  The number of returned cart items.
  """
  total_count: Int!

  typeId: String
}

interface CartAddressInterface {
  """
  The city specified for the billing or shipping address.
  """
  city: String!

  """
  The company specified for the billing or shipping address.
  """
  company: String

  """
  An object containing the country label and code.
  """
  country: CartAddressCountry!

  """
  The customer's fax number.
  """
  fax: String

  """
  The first name of the customer or guest.
  """
  firstname: String!

  """
  The last name of the customer or guest.
  """
  lastname: String!

  """
  The middle name of the person associated with the billing/shipping address.
  """
  middlename: String

  """
  The ZIP or postal code of the billing or shipping address.
  """
  postcode: String

  """
  An honorific, such as Dr., Mr., or Mrs.
  """
  prefix: String

  """
  An object containing the region label and code.
  """
  region: CartAddressRegion

  """
  An array containing the street for the billing or shipping address.
  """
  street: [String]!

  """
  A value such as Sr., Jr., or III.
  """
  suffix: String

  """
  The telephone number for the billing or shipping address.
  """
  telephone: String

  """
  The unique id of the customer address.
  """
  uid: String!

  """
  The VAT company number for billing or shipping address.
  """
  vat_id: String
}

"""
Contains shipping addresses and methods.
"""
type ShippingCartAddress implements CartAddressInterface {
  """
  An array that lists the shipping methods that can be applied to the cart.
  """
  available_shipping_methods: [AvailableShippingMethod]

  cart_items: [CartItemQuantity] @deprecated(reason: "Use `cart_items_v2` instead.")

  """
  An array that lists the items in the cart.
  """
  cart_items_v2: [CartItemInterface]

  """
  The city specified for the billing or shipping address.
  """
  city: String!

  """
  The company specified for the billing or shipping address.
  """
  company: String

  """
  An object containing the country label and code.
  """
  country: CartAddressCountry!

  """
  Text provided by the shopper.
  """
  customer_notes: String

  """
  The customer's fax number.
  """
  fax: String

  """
  The first name of the customer or guest.
  """
  firstname: String!

  items_weight: Float @deprecated(reason: "This information should not be exposed on the frontend.")

  """
  The last name of the customer or guest.
  """
  lastname: String!

  """
  The middle name of the person associated with the billing/shipping address.
  """
  middlename: String

  pickup_location_code: String

  """
  The ZIP or postal code of the billing or shipping address.
  """
  postcode: String

  """
  An honorific, such as Dr., Mr., or Mrs.
  """
  prefix: String

  """
  An object containing the region label and code.
  """
  region: CartAddressRegion

  """
  An object that describes the selected shipping method.
  """
  selected_shipping_method: SelectedShippingMethod

  """
  An array containing the street for the billing or shipping address.
  """
  street: [String]!

  """
  A value such as Sr., Jr., or III.
  """
  suffix: String

  """
  The telephone number for the billing or shipping address.
  """
  telephone: String

  """
  The unique id of the customer address.
  """
  uid: String!

  """
  The VAT company number for billing or shipping address.
  """
  vat_id: String
}

"""
Contains details about the billing address.
"""
type BillingCartAddress implements CartAddressInterface {
  """
  The city specified for the billing or shipping address.
  """
  city: String!

  """
  The company specified for the billing or shipping address.
  """
  company: String

  """
  An object containing the country label and code.
  """
  country: CartAddressCountry!

  customer_notes: String @deprecated(reason: "The field is used only in shipping address.")

  """
  The customer's fax number.
  """
  fax: String

  """
  The first name of the customer or guest.
  """
  firstname: String!

  """
  The last name of the customer or guest.
  """
  lastname: String!

  """
  The middle name of the person associated with the billing/shipping address.
  """
  middlename: String

  """
  The ZIP or postal code of the billing or shipping address.
  """
  postcode: String

  """
  An honorific, such as Dr., Mr., or Mrs.
  """
  prefix: String

  """
  An object containing the region label and code.
  """
  region: CartAddressRegion

  """
  An array containing the street for the billing or shipping address.
  """
  street: [String]!

  """
  A value such as Sr., Jr., or III.
  """
  suffix: String

  """
  The telephone number for the billing or shipping address.
  """
  telephone: String

  """
  The unique id of the customer address.
  """
  uid: String!

  """
  The VAT company number for billing or shipping address.
  """
  vat_id: String
}

"""
Deprecated: The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`.
"""
type CartItemQuantity {
  cart_item_id: Int! @deprecated(reason: "The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`.")

  quantity: Float! @deprecated(reason: "The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`.")
}

"""
Contains details about the region in a billing or shipping address.
"""
type CartAddressRegion {
  """
  The state or province code.
  """
  code: String

  """
  The display label for the region.
  """
  label: String

  """
  The unique ID for a pre-defined region.
  """
  region_id: Int
}

"""
Contains details the country in a billing or shipping address.
"""
type CartAddressCountry {
  """
  The country code.
  """
  code: String!

  """
  The display label for the country.
  """
  label: String!
}

"""
Contains details about the selected shipping method and carrier.
"""
type SelectedShippingMethod {
  """
  The cost of shipping using this shipping method.
  """
  amount: Money!

  base_amount: Money @deprecated(reason: "The field should not be used on the storefront.")

  """
  A string that identifies a commercial carrier or an offline shipping method.
  """
  carrier_code: String!

  """
  The label for the carrier code.
  """
  carrier_title: String!

  """
  A shipping method code associated with a carrier.
  """
  method_code: String!

  """
  The label for the method code.
  """
  method_title: String!

  """
  The cost of shipping using this shipping method, excluding tax.
  """
  price_excl_tax: Money!

  """
  The cost of shipping using this shipping method, including tax.
  """
  price_incl_tax: Money!
}

"""
Contains details about the possible shipping methods and carriers.
"""
type AvailableShippingMethod {
  """
  The cost of shipping using this shipping method.
  """
  amount: Money!

  """
  Indicates whether this shipping method can be applied to the cart.
  """
  available: Boolean!

  base_amount: Money @deprecated(reason: "The field should not be used on the storefront.")

  """
  A string that identifies a commercial carrier or an offline shipping method.
  """
  carrier_code: String!

  """
  The label for the carrier code.
  """
  carrier_title: String!

  """
  Describes an error condition.
  """
  error_message: String

  """
  A shipping method code associated with a carrier. The value could be null if no method is available.
  """
  method_code: String

  """
  The label for the shipping method code. The value could be null if no method is available.
  """
  method_title: String

  """
  The cost of shipping using this shipping method, excluding tax.
  """
  price_excl_tax: Money!

  """
  The cost of shipping using this shipping method, including tax.
  """
  price_incl_tax: Money!
}

"""
Describes a payment method that the shopper can use to pay for the order.
"""
type AvailablePaymentMethod {
  """
  The payment method code.
  """
  code: String!

  """
  If the payment method is an online integration
  """
  is_deferred: Boolean!

  """
  The payment method title.
  """
  title: String!
}

"""
Describes the payment method the shopper selected.
"""
type SelectedPaymentMethod {
  """
  The payment method code.
  """
  code: String!

  """
  The purchase order number.
  """
  purchase_order_number: String

  """
  The payment method title.
  """
  title: String!
}

"""
Contains the applied coupon code.
"""
type AppliedCoupon {
  """
  The coupon code the shopper applied to the card.
  """
  code: String!
}

"""
Specifies the cart from which to remove a coupon.
"""
input RemoveCouponFromCartInput {
  """
  The unique ID of a `Cart` object.
  """
  cart_id: String!
}

"""
Contains details about the cart after removing a coupon.
"""
type RemoveCouponFromCartOutput {
  """
  The cart after removing a coupon.
  """
  cart: Cart
}

"""
Contains details about the cart after adding simple or group products.
"""
type AddSimpleProductsToCartOutput {
  """
  The cart after adding products.
  """
  cart: Cart!
}

"""
Contains details about the cart after adding virtual products.
"""
type AddVirtualProductsToCartOutput {
  """
  The cart after adding products.
  """
  cart: Cart!
}

"""
Contains details about the cart after updating items.
"""
type UpdateCartItemsOutput {
  """
  The cart after updating products.
  """
  cart: Cart!
}

"""
Contains details about the cart after removing an item.
"""
type RemoveItemFromCartOutput {
  """
  The cart after removing an item.
  """
  cart: Cart!
}

"""
Contains details about the cart after setting the email of a guest.
"""
type SetGuestEmailOnCartOutput {
  """
  The cart after setting the guest email.
  """
  cart: Cart!
}

"""
An implementation for simple product cart items.
"""
type SimpleCartItem implements CartItemInterface {
  """
  An array containing the customizable options the shopper selected.
  """
  customizable_options: [SelectedCustomizableOption]!

  """
  An array of errors encountered while loading the cart item
  """
  errors: [CartItemError]

  """
  The entered gift message for the cart item
  """
  gift_message: GiftMessage

  id: String! @deprecated(reason: "Use `uid` instead.")

  """
  True if requested quantity is less than available stock, false otherwise.
  """
  is_available: Boolean!

  """
  Contains details about the price of the item, including taxes and discounts.
  """
  prices: CartItemPrices

  """
  Details about an item in the cart.
  """
  product: ProductInterface!

  """
  The quantity of this item in the cart.
  """
  quantity: Float!

  """
  The unique ID for a `CartItemInterface` object.
  """
  uid: ID!
}

"""
An implementation for virtual product cart items.
"""
type VirtualCartItem implements CartItemInterface {
  """
  An array containing customizable options the shopper selected.
  """
  customizable_options: [SelectedCustomizableOption]!

  """
  An array of errors encountered while loading the cart item
  """
  errors: [CartItemError]

  id: String! @deprecated(reason: "Use `uid` instead.")

  """
  True if requested quantity is less than available stock, false otherwise.
  """
  is_available: Boolean!

  """
  Contains details about the price of the item, including taxes and discounts.
  """
  prices: CartItemPrices

  """
  Details about an item in the cart.
  """
  product: ProductInterface!

  """
  The quantity of this item in the cart.
  """
  quantity: Float!

  """
  The unique ID for a `CartItemInterface` object.
  """
  uid: ID!
}

"""
An interface for products in a cart.
"""
interface CartItemInterface {
  """
  An array of errors encountered while loading the cart item
  """
  errors: [CartItemError]

  id: String! @deprecated(reason: "Use `uid` instead.")

  """
  True if requested quantity is less than available stock, false otherwise.
  """
  is_available: Boolean!

  """
  Contains details about the price of the item, including taxes and discounts.
  """
  prices: CartItemPrices

  """
  Details about an item in the cart.
  """
  product: ProductInterface!

  """
  The quantity of this item in the cart.
  """
  quantity: Float!

  """
  The unique ID for a `CartItemInterface` object.
  """
  uid: ID!
}

type CartItemError {
  """
  An error code that describes the error encountered
  """
  code: CartItemErrorType!

  """
  A localized error message
  """
  message: String!
}

enum CartItemErrorType {
  UNDEFINED

  ITEM_QTY

  ITEM_INCREMENTS
}

"""
Defines an individual discount. A discount can be applied to the cart as a whole or to an item, shipping.
"""
type Discount {
  """
  The amount of the discount.
  """
  amount: Money!

  """
  The type of the entity the discount is applied to.
  """
  applied_to: CartDiscountType!

  """
  The coupon related to the discount.
  """
  coupon: AppliedCoupon

  """
  A description of the discount.
  """
  label: String!
}

enum CartDiscountType {
  ITEM

  SHIPPING
}

"""
Contains details about the price of the item, including taxes and discounts.
"""
type CartItemPrices {
  """
  An array of discounts to be applied to the cart item.
  """
  discounts: [Discount]

  """
  An array of FPTs applied to the cart item.
  """
  fixed_product_taxes: [FixedProductTax]

  """
  The price of the item before any discounts were applied. The price that might include tax, depending on the configured display settings for cart.
  """
  price: Money!

  """
  The price of the item before any discounts were applied. The price that might include tax, depending on the configured display settings for cart.
  """
  price_including_tax: Money!

  """
  The value of the price multiplied by the quantity of the item.
  """
  row_total: Money!

  """
  The value of `row_total` plus the tax applied to the item.
  """
  row_total_including_tax: Money!

  """
  The total of all discounts applied to the item.
  """
  total_item_discount: Money
}

"""
Identifies a customized product that has been placed in a cart.
"""
type SelectedCustomizableOption {
  """
  The unique ID for a specific `CustomizableOptionInterface` object, such as a `CustomizableFieldOption`, `CustomizableFileOption`, or `CustomizableAreaOption` object.
  """
  customizable_option_uid: ID!

  id: Int! @deprecated(reason: "Use `SelectedCustomizableOption.customizable_option_uid` instead.")

  """
  Indicates whether the customizable option is required.
  """
  is_required: Boolean!

  """
  The display name of the selected customizable option.
  """
  label: String!

  """
  A value indicating the order to display this option.
  """
  sort_order: Int!

  """
  The type of `CustomizableOptionInterface` object.
  """
  type: String!

  """
  An array of selectable values.
  """
  values: [SelectedCustomizableOptionValue]!
}

"""
Identifies the value of the selected customized option.
"""
type SelectedCustomizableOptionValue {
  """
  The unique ID for a value object that corresponds to the object represented by the `customizable_option_uid` attribute.
  """
  customizable_option_value_uid: ID!

  id: Int! @deprecated(reason: "Use `SelectedCustomizableOptionValue.customizable_option_value_uid` instead.")

  """
  The display name of the selected value.
  """
  label: String!

  """
  The price of the selected customizable value.
  """
  price: CartItemSelectedOptionValuePrice!

  """
  The text identifying the selected value.
  """
  value: String!
}

"""
Contains details about the price of a selected customizable value.
"""
type CartItemSelectedOptionValuePrice {
  """
  Indicates whether the price type is fixed, percent, or dynamic.
  """
  type: PriceTypeEnum!

  """
  A string that describes the unit of the value.
  """
  units: String!

  """
  A price value.
  """
  value: Float!
}

"""
Contains the order ID.
"""
type Order {
  order_id: String @deprecated(reason: "Use `order_number` instead.")

  """
  The unique ID for an `Order` object.
  """
  order_number: String!
}

"""
An error encountered while adding an item to the the cart.
"""
type CartUserInputError {
  """
  A cart-specific error code.
  """
  code: CartUserInputErrorType!

  """
  A localized error message.
  """
  message: String!
}

"""
Contains details about the cart after adding products to it.
"""
type AddProductsToCartOutput {
  """
  The cart after products have been added.
  """
  cart: Cart!

  """
  Contains errors encountered while adding an item to the cart.
  """
  user_errors: [CartUserInputError]!
}

enum CartUserInputErrorType {
  PRODUCT_NOT_FOUND

  NOT_SALABLE

  INSUFFICIENT_STOCK

  UNDEFINED
}

enum PlaceOrderErrorCodes {
  CART_NOT_FOUND

  CART_NOT_ACTIVE

  GUEST_EMAIL_MISSING

  UNABLE_TO_PLACE_ORDER

  UNDEFINED
}

input EstimateTotalsInput {
  """
  Customer's address to estimate totals.
  """
  address: EstimateAddressInput!

  """
  The unique ID of the cart to query.
  """
  cart_id: String!

  """
  Selected shipping method to estimate totals.
  """
  shipping_method: ShippingMethodInput
}

"""
Estimate totals output.
"""
type EstimateTotalsOutput {
  """
  Cart after totals estimation
  """
  cart: Cart
}

"""
Contains details about an address.
"""
input EstimateAddressInput {
  """
  The two-letter code representing the customer's country.
  """
  country_code: CountryCodeEnum!

  """
  The customer's ZIP or postal code.
  """
  postcode: String

  """
  An object containing the region name, region code, and region ID.
  """
  region: CustomerAddressRegionInput
}

input ContactUsInput {
  """
  The shopper's comment to the merchant.
  """
  comment: String!

  """
  The email address of the shopper.
  """
  email: String!

  """
  The full name of the shopper.
  """
  name: String!

  """
  The shopper's telephone number.
  """
  telephone: String
}

"""
Contains the status of the request.
"""
type ContactUsOutput {
  """
  Indicates whether the request was successful.
  """
  status: Boolean!
}

input AddDownloadableProductsToCartInput {
  """
  The ID of the cart.
  """
  cart_id: String!

  """
  An array of downloadable products to add.
  """
  cart_items: [DownloadableProductCartItemInput]!
}

"""
Defines a single downloadable product.
"""
input DownloadableProductCartItemInput {
  """
  The ID and value of the option.
  """
  customizable_options: [CustomizableOptionInput]

  """
  The quantity and SKU of the downloadable product.
  """
  data: CartItemInput!

  """
  An array of objects containing the link_id of the downloadable product link.
  """
  downloadable_product_links: [DownloadableProductLinksInput]
}

"""
Contains the link ID for the downloadable product.
"""
input DownloadableProductLinksInput {
  """
  The unique ID of the downloadable product link.
  """
  link_id: Int!
}

"""
Contains details about the cart after adding downloadable products.
"""
type AddDownloadableProductsToCartOutput {
  """
  The cart after adding products.
  """
  cart: Cart!
}

"""
An implementation for downloadable product cart items.
"""
type DownloadableCartItem implements CartItemInterface {
  """
  An array containing the customizable options the shopper selected.
  """
  customizable_options: [SelectedCustomizableOption]!

  """
  An array of errors encountered while loading the cart item
  """
  errors: [CartItemError]

  id: String! @deprecated(reason: "Use `uid` instead.")

  """
  True if requested quantity is less than available stock, false otherwise.
  """
  is_available: Boolean!

  """
  An array containing information about the links for the downloadable product added to the cart.
  """
  links: [DownloadableProductLinks]

  """
  Contains details about the price of the item, including taxes and discounts.
  """
  prices: CartItemPrices

  """
  Details about an item in the cart.
  """
  product: ProductInterface!

  """
  The quantity of this item in the cart.
  """
  quantity: Float!

  """
  An array containing information about samples of the selected downloadable product.
  """
  samples: [DownloadableProductSamples]

  """
  The unique ID for a `CartItemInterface` object.
  """
  uid: ID!
}

"""
Defines a product that the shopper downloads.
"""
type DownloadableProduct implements ProductInterface & CustomizableProductInterface & RoutableInterface {
  activity: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  as_featured: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The attribute set assigned to the product.
  """
  attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")

  """
  The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled.
  """
  canonical_url: String

  """
  The categories assigned to a product.
  """
  categories: [CategoryInterface]

  category_gear: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  climate: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  collar: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The product's country of origin.
  """
  country_of_manufacture: String

  """
  Timestamp indicating when the product was created.
  """
  created_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  Crosssell Products
  """
  crosssell_products: [ProductInterface]

  """
  Product custom attributes.
  """
  custom_attributesV2("" filters: AttributeFilterInput): ProductCustomAttributes

  """
  Detailed information about the product. The value can include simple HTML tags.
  """
  description: ComplexTextValue

  """
  An array containing information about the links for this downloadable product.
  """
  downloadable_product_links: [DownloadableProductLinks]

  """
  An array containing information about samples of this downloadable product.
  """
  downloadable_product_samples: [DownloadableProductSamples]

  eco_collection: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  erin_recommends: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  features_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  format: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  gender: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates whether a gift message is available.
  """
  gift_message_available: String

  """
  The ID number assigned to the product.
  """
  id: Int @deprecated(reason: "Use the `uid` field instead.")

  """
  The relative path to the main image on the product page.
  """
  image: ProductImage

  """
  A value of 1 indicates that each link in the array must be purchased separately.
  """
  links_purchased_separately: Int

  """
  The heading above the list of downloadable products.
  """
  links_title: String

  """
  A number representing the product's manufacturer.
  """
  manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  material: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  An array of media gallery objects.
  """
  media_gallery: [MediaGalleryInterface]

  """
  An array of MediaGalleryEntry objects.
  """
  media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")

  """
  A brief overview of the product for search results listings, maximum 255 characters.
  """
  meta_description: String

  """
  A comma-separated list of keywords that are visible only to search engines.
  """
  meta_keyword: String

  """
  A string that is displayed in the title bar and tab of the browser and in search results lists.
  """
  meta_title: String

  """
  The product name. Customers use this name to identify the product.
  """
  name: String

  new: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The beginning date for new product listings, and determines if the product is featured as a new product.
  """
  new_from_date: String

  """
  The end date for new product listings.
  """
  new_to_date: String

  """
  Product stock only x left count
  """
  only_x_left_in_stock: Float

  """
  An array of options for a customizable product.
  """
  options: [CustomizableOptionInterface]

  """
  If the product has multiple options, determines where they appear on the product page.
  """
  options_container: String

  pattern: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  performance_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates the price of an item.
  """
  price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")

  """
  The range of prices for the product
  """
  price_range: PriceRange!

  """
  An array of `TierPrice` objects.
  """
  price_tiers: [TierPrice]

  """
  An array of `ProductLinks` objects.
  """
  product_links: [ProductLinksInterface]

  """
  The average of all the ratings given to the product.
  """
  rating_summary: Float!

  """
  Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect.
  """
  redirect_code: Int!

  """
  An array of products to be displayed in a Related Products block.
  """
  related_products: [ProductInterface]

  """
  The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original.
  """
  relative_url: String

  """
  The total count of all the reviews given to the product.
  """
  review_count: Int!

  """
  The list of products reviews.
  """
  reviews("The maximum number of results to return at once. The default is 20." pageSize: Int = 20, "The page of results to return. The default is 1." currentPage: Int = 1): ProductReviews!

  sale: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  A short description of the product. Its use depends on the theme.
  """
  short_description: ComplexTextValue

  size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  A number or code assigned to a product to identify the product, options, price, and manufacturer.
  """
  sku: String

  sleeve: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The relative path to the small image, which is used on catalog pages.
  """
  small_image: ProductImage

  """
  The beginning date that a product has a special price.
  """
  special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  The discounted price of the product.
  """
  special_price: Float

  """
  The end date for a product with a special price.
  """
  special_to_date: String

  """
  Stock status of the product
  """
  stock_status: ProductStockStatus

  strap_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_bottom: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_general: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The file name of a swatch image.
  """
  swatch_image: String

  """
  The relative path to the product's thumbnail image.
  """
  thumbnail: ProductImage

  """
  The price when tier pricing is in effect and the items purchased threshold has been reached.
  """
  tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")

  """
  An array of ProductTierPrices objects.
  """
  tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")

  """
  One of PRODUCT, CATEGORY, or CMS_PAGE.
  """
  type: UrlRewriteEntityTypeEnum

  """
  One of simple, virtual, bundle, downloadable, grouped, or configurable.
  """
  type_id: String @deprecated(reason: "Use `__typename` instead.")

  """
  The unique ID for a `ProductInterface` object.
  """
  uid: ID!

  """
  Timestamp indicating when the product was updated.
  """
  updated_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  Upsell Products
  """
  upsell_products: [ProductInterface]

  """
  The part of the URL that identifies the product
  """
  url_key: String

  url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")

  """
  URL rewrites list
  """
  url_rewrites: [UrlRewrite]

  """
  The part of the product URL that is appended after the url key
  """
  url_suffix: String

  """
  An array of websites in which the product is available.
  """
  websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")
}

enum DownloadableFileTypeEnum {
  FILE @deprecated(reason: "`sample_url` serves to get the downloadable sample")

  URL @deprecated(reason: "`sample_url` serves to get the downloadable sample")
}

"""
Defines characteristics of a downloadable product.
"""
type DownloadableProductLinks {
  id: Int @deprecated(reason: "This information should not be exposed on frontend.")

  is_shareable: Boolean @deprecated(reason: "This information should not be exposed on frontend.")

  link_type: DownloadableFileTypeEnum @deprecated(reason: "`sample_url` serves to get the downloadable sample")

  number_of_downloads: Int @deprecated(reason: "This information should not be exposed on frontend.")

  """
  The price of the downloadable product.
  """
  price: Float

  sample_file: String @deprecated(reason: "`sample_url` serves to get the downloadable sample")

  sample_type: DownloadableFileTypeEnum @deprecated(reason: "`sample_url` serves to get the downloadable sample")

  """
  The full URL to the downloadable sample.
  """
  sample_url: String

  """
  A number indicating the sort order.
  """
  sort_order: Int

  """
  The display name of the link.
  """
  title: String

  """
  The unique ID for a `DownloadableProductLinks` object.
  """
  uid: ID!
}

"""
Defines characteristics of a downloadable product.
"""
type DownloadableProductSamples {
  id: Int @deprecated(reason: "This information should not be exposed on frontend.")

  sample_file: String @deprecated(reason: "`sample_url` serves to get the downloadable sample")

  sample_type: DownloadableFileTypeEnum @deprecated(reason: "`sample_url` serves to get the downloadable sample")

  """
  The full URL to the downloadable sample.
  """
  sample_url: String

  """
  A number indicating the sort order.
  """
  sort_order: Int

  """
  The display name of the sample.
  """
  title: String
}

"""
Defines downloadable product options for `OrderItemInterface`.
"""
type DownloadableOrderItem implements OrderItemInterface {
  """
  The final discount information for the product.
  """
  discounts: [Discount]

  """
  A list of downloadable links that are ordered from the downloadable product.
  """
  downloadable_links: [DownloadableItemsLinks]

  """
  The entered option for the base product, such as a logo or image.
  """
  entered_options: [OrderItemOption]

  """
  The selected gift message for the order item
  """
  gift_message: GiftMessage

  """
  The unique ID for an `OrderItemInterface` object.
  """
  id: ID!

  """
  The ProductInterface object, which contains details about the base product
  """
  product: ProductInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price of the base product, including selected options.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The type of product, such as simple, configurable, etc.
  """
  product_type: String

  """
  URL key of the base product.
  """
  product_url_key: String

  """
  The number of canceled items.
  """
  quantity_canceled: Float

  """
  The number of invoiced items.
  """
  quantity_invoiced: Float

  """
  The number of units ordered for this item.
  """
  quantity_ordered: Float

  """
  The number of refunded items.
  """
  quantity_refunded: Float

  """
  The number of returned items.
  """
  quantity_returned: Float

  """
  The number of shipped items.
  """
  quantity_shipped: Float

  """
  The selected options for the base product, such as color or size.
  """
  selected_options: [OrderItemOption]

  """
  The status of the order item.
  """
  status: String
}

"""
Defines downloadable product options for `InvoiceItemInterface`.
"""
type DownloadableInvoiceItem implements InvoiceItemInterface {
  """
  Information about the final discount amount for the base product, including discounts on options.
  """
  discounts: [Discount]

  """
  A list of downloadable links that are invoiced from the downloadable product.
  """
  downloadable_links: [DownloadableItemsLinks]

  """
  The unique ID for an `InvoiceItemInterface` object.
  """
  id: ID!

  """
  Details about an individual order item.
  """
  order_item: OrderItemInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price for the base product including selected options.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The number of invoiced items.
  """
  quantity_invoiced: Float
}

"""
Defines downloadable product options for `CreditMemoItemInterface`.
"""
type DownloadableCreditMemoItem implements CreditMemoItemInterface {
  """
  Details about the final discount amount for the base product, including discounts on options.
  """
  discounts: [Discount]

  """
  A list of downloadable links that are refunded from the downloadable product.
  """
  downloadable_links: [DownloadableItemsLinks]

  """
  The unique ID for a `CreditMemoItemInterface` object.
  """
  id: ID!

  """
  The order item the credit memo is applied to.
  """
  order_item: OrderItemInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price for the base product, including selected options.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The number of refunded items.
  """
  quantity_refunded: Float
}

"""
Defines characteristics of the links for downloadable product.
"""
type DownloadableItemsLinks {
  """
  A number indicating the sort order.
  """
  sort_order: Int

  """
  The display name of the link.
  """
  title: String

  """
  The unique ID for a `DownloadableItemsLinks` object.
  """
  uid: ID!
}

"""
A downloadable product wish list item.
"""
type DownloadableWishlistItem implements WishlistItemInterface {
  """
  The date and time the item was added to the wish list.
  """
  added_at: String!

  """
  Custom options selected for the wish list item.
  """
  customizable_options: [SelectedCustomizableOption]!

  """
  The description of the item.
  """
  description: String

  """
  The unique ID for a `WishlistItemInterface` object.
  """
  id: ID!

  """
  An array containing information about the selected links.
  """
  links_v2: [DownloadableProductLinks]

  """
  Product details of the wish list item.
  """
  product: ProductInterface

  """
  The quantity of this wish list item.
  """
  quantity: Float!

  """
  An array containing information about the selected samples.
  """
  samples: [DownloadableProductSamples]
}

type Currency {
  """
  An array of three-letter currency codes accepted by the store, such as USD and EUR.
  """
  available_currency_codes: [String]

  """
  The base currency set for the store, such as USD.
  """
  base_currency_code: String

  """
  The symbol for the specified base currency, such as $.
  """
  base_currency_symbol: String

  default_display_currecy_code: String @deprecated(reason: "Symbol was missed. Use `default_display_currency_code`.")

  default_display_currecy_symbol: String @deprecated(reason: "Symbol was missed. Use `default_display_currency_code`.")

  """
  The currency that is displayed by default, such as USD.
  """
  default_display_currency_code: String

  """
  The currency symbol that is displayed by default, such as $.
  """
  default_display_currency_symbol: String

  """
  An array of exchange rates for currencies defined in the store.
  """
  exchange_rates: [ExchangeRate]
}

"""
Lists the exchange rate.
"""
type ExchangeRate {
  """
  Specifies the store’s default currency to exchange to.
  """
  currency_to: String

  """
  The exchange rate for the store’s default currency.
  """
  rate: Float
}

type Country {
  """
  An array of regions within a particular country.
  """
  available_regions: [Region]

  """
  The name of the country in English.
  """
  full_name_english: String

  """
  The name of the country in the current locale.
  """
  full_name_locale: String

  """
  The unique ID for a `Country` object.
  """
  id: String

  """
  The three-letter abbreviation of the country, such as USA.
  """
  three_letter_abbreviation: String

  """
  The two-letter abbreviation of the country, such as US.
  """
  two_letter_abbreviation: String
}

type Region {
  """
  The two-letter code for the region, such as TX for Texas.
  """
  code: String

  """
  The unique ID for a `Region` object.
  """
  id: Int

  """
  The name of the region, such as Texas.
  """
  name: String
}

"""
Contains a list of downloadable products.
"""
type CustomerDownloadableProducts {
  """
  An array of purchased downloadable items.
  """
  items: [CustomerDownloadableProduct]
}

"""
Contains details about a single downloadable product.
"""
type CustomerDownloadableProduct {
  """
  The date and time the purchase was made.
  """
  date: String

  """
  The fully qualified URL to the download file.
  """
  download_url: String

  """
  The unique ID assigned to the item.
  """
  order_increment_id: String

  """
  The remaining number of times the customer can download the product.
  """
  remaining_downloads: String

  """
  Indicates when the product becomes available for download. Options are `Pending` and `Invoiced`.
  """
  status: String
}

"""
Deprecated. Use `TierPrice` instead. Defines a tier price, which is a quantity discount offered to a specific customer group.
"""
type ProductTierPrices {
  """
  The ID of the customer group.
  """
  customer_group_id: String @deprecated(reason: "Not relevant for the storefront.")

  """
  The percentage discount of the item.
  """
  percentage_value: Float @deprecated(reason: "Use `TierPrice.discount` instead.")

  """
  The number of items that must be purchased to qualify for tier pricing.
  """
  qty: Float @deprecated(reason: "Use `TierPrice.quantity` instead.")

  """
  The price of the fixed price item.
  """
  value: Float @deprecated(reason: "Use `TierPrice.final_price` instead.")

  """
  The ID assigned to the website.
  """
  website_id: Float @deprecated(reason: "Not relevant for the storefront.")
}

"""
Defines a price based on the quantity purchased.
"""
type TierPrice {
  """
  The price discount that this tier represents.
  """
  discount: ProductDiscount

  """
  The price of the product at this tier.
  """
  final_price: Money

  """
  The minimum number of items that must be purchased to qualify for this price tier.
  """
  quantity: Float
}

"""
An implementation for configurable product cart items.
"""
type ConfigurableCartItem implements CartItemInterface {
  """
  An array containing the configuranle options the shopper selected.
  """
  configurable_options: [SelectedConfigurableOption]!

  """
  Product details of the cart item.
  """
  configured_variant: ProductInterface!

  """
  An array containing the customizable options the shopper selected.
  """
  customizable_options: [SelectedCustomizableOption]!

  """
  An array of errors encountered while loading the cart item
  """
  errors: [CartItemError]

  """
  The entered gift message for the cart item
  """
  gift_message: GiftMessage

  id: String! @deprecated(reason: "Use `uid` instead.")

  """
  True if requested quantity is less than available stock, false otherwise.
  """
  is_available: Boolean!

  """
  Contains details about the price of the item, including taxes and discounts.
  """
  prices: CartItemPrices

  """
  Details about an item in the cart.
  """
  product: ProductInterface!

  """
  The quantity of this item in the cart.
  """
  quantity: Float!

  """
  The unique ID for a `CartItemInterface` object.
  """
  uid: ID!
}

"""
An implementation for bundle product cart items.
"""
type BundleCartItem implements CartItemInterface {
  """
  An array containing the bundle options the shopper selected.
  """
  bundle_options: [SelectedBundleOption]!

  """
  An array containing the customizable options the shopper selected.
  """
  customizable_options: [SelectedCustomizableOption]!

  """
  An array of errors encountered while loading the cart item
  """
  errors: [CartItemError]

  """
  The entered gift message for the cart item
  """
  gift_message: GiftMessage

  id: String! @deprecated(reason: "Use `uid` instead.")

  """
  True if requested quantity is less than available stock, false otherwise.
  """
  is_available: Boolean!

  """
  Contains details about the price of the item, including taxes and discounts.
  """
  prices: CartItemPrices

  """
  Details about an item in the cart.
  """
  product: ProductInterface!

  """
  The quantity of this item in the cart.
  """
  quantity: Float!

  """
  The unique ID for a `CartItemInterface` object.
  """
  uid: ID!
}

"""
Contains the text of a gift message, its sender, and recipient
"""
type GiftMessage {
  """
  Sender name
  """
  from: String!

  """
  Gift message text
  """
  message: String!

  """
  Recipient name
  """
  to: String!
}

"""
Contains the text of a gift message, its sender, and recipient
"""
input GiftMessageInput {
  """
  Sender name
  """
  from: String!

  """
  Gift message text
  """
  message: String!

  """
  Recipient name
  """
  to: String!
}

type SalesItemInterface {
  """
  The entered gift message for the order item
  """
  gift_message: GiftMessage
}

"""
Contains details about each of the customer's orders.
"""
type CustomerOrder {
  """
  Coupons applied to the order.
  """
  applied_coupons: [AppliedCoupon]!

  """
  The billing address for the order.
  """
  billing_address: OrderAddress

  """
  The shipping carrier for the order delivery.
  """
  carrier: String

  """
  Comments about the order.
  """
  comments: [SalesCommentItem]

  created_at: String @deprecated(reason: "Use the `order_date` field instead.")

  """
  A list of credit memos.
  """
  credit_memos: [CreditMemo]

  """
  Order customer email.
  """
  email: String

  """
  The entered gift message for the order
  """
  gift_message: GiftMessage

  grand_total: Float @deprecated(reason: "Use the `totals.grand_total` field instead.")

  """
  The unique ID for a `CustomerOrder` object.
  """
  id: ID!

  increment_id: String @deprecated(reason: "Use the `id` field instead.")

  """
  A list of invoices for the order.
  """
  invoices: [Invoice]!

  """
  An array containing the items purchased in this order.
  """
  items: [OrderItemInterface]

  """
  The order number.
  """
  number: String!

  """
  The date the order was placed.
  """
  order_date: String!

  order_number: String! @deprecated(reason: "Use the `number` field instead.")

  """
  Payment details for the order.
  """
  payment_methods: [OrderPaymentMethod]

  """
  A list of shipments for the order.
  """
  shipments: [OrderShipment]

  """
  The shipping address for the order.
  """
  shipping_address: OrderAddress

  """
  The delivery method for the order.
  """
  shipping_method: String

  """
  The current status of the order.
  """
  status: String!

  """
  The token that can be used to retrieve the order using order query.
  """
  token: String!

  """
  Details about the calculated totals for this order.
  """
  total: OrderTotal
}

"""
Order item details.
"""
interface OrderItemInterface {
  """
  The final discount information for the product.
  """
  discounts: [Discount]

  """
  The entered option for the base product, such as a logo or image.
  """
  entered_options: [OrderItemOption]

  """
  The selected gift message for the order item
  """
  gift_message: GiftMessage

  """
  The unique ID for an `OrderItemInterface` object.
  """
  id: ID!

  """
  The ProductInterface object, which contains details about the base product
  """
  product: ProductInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price of the base product, including selected options.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The type of product, such as simple, configurable, etc.
  """
  product_type: String

  """
  URL key of the base product.
  """
  product_url_key: String

  """
  The number of canceled items.
  """
  quantity_canceled: Float

  """
  The number of invoiced items.
  """
  quantity_invoiced: Float

  """
  The number of units ordered for this item.
  """
  quantity_ordered: Float

  """
  The number of refunded items.
  """
  quantity_refunded: Float

  """
  The number of returned items.
  """
  quantity_returned: Float

  """
  The number of shipped items.
  """
  quantity_shipped: Float

  """
  The selected options for the base product, such as color or size.
  """
  selected_options: [OrderItemOption]

  """
  The status of the order item.
  """
  status: String
}

"""
Defines the bundle products to add to the cart.
"""
input AddBundleProductsToCartInput {
  """
  The ID of the cart.
  """
  cart_id: String!

  """
  An array of bundle products to add.
  """
  cart_items: [BundleProductCartItemInput]!
}

"""
Defines a single bundle product.
"""
input BundleProductCartItemInput {
  """
  A mandatory array of options for the bundle product, including each chosen option and specified quantity.
  """
  bundle_options: [BundleOptionInput]!

  """
  The ID and value of the option.
  """
  customizable_options: [CustomizableOptionInput]

  """
  The quantity and SKU of the bundle product.
  """
  data: CartItemInput!
}

"""
Defines the input for a bundle option.
"""
input BundleOptionInput {
  """
  The ID of the option.
  """
  id: Int!

  """
  The number of the selected item to add to the cart.
  """
  quantity: Float!

  """
  An array with the chosen value of the option.
  """
  value: [String]!
}

"""
Contains details about the cart after adding bundle products.
"""
type AddBundleProductsToCartOutput {
  """
  The cart after adding products.
  """
  cart: Cart!
}

"""
Contains details about a selected bundle option.
"""
type SelectedBundleOption {
  id: Int! @deprecated(reason: "Use `uid` instead")

  """
  The display name of the selected bundle product option.
  """
  label: String!

  """
  The type of selected bundle product option.
  """
  type: String!

  """
  The unique ID for a `SelectedBundleOption` object
  """
  uid: ID!

  """
  An array of selected bundle option values.
  """
  values: [SelectedBundleOptionValue]!
}

"""
Contains details about a value for a selected bundle option.
"""
type SelectedBundleOptionValue {
  """
  Use `uid` instead
  """
  id: Int!

  """
  The display name of the value for the selected bundle product option.
  """
  label: String!

  """
  The price of the value for the selected bundle product option.
  """
  price: Float!

  """
  The quantity of the value for the selected bundle product option.
  """
  quantity: Float!

  """
  The unique ID for a `SelectedBundleOptionValue` object
  """
  uid: ID!
}

"""
Can be used to retrieve the main price details in case of bundle product
"""
type PriceDetails {
  """
  The percentage of discount applied to the main product price
  """
  discount_percentage: Float

  """
  The final price after applying the discount to the main product
  """
  main_final_price: Float

  """
  The regular price of the main product
  """
  main_price: Float
}

"""
Defines an individual item within a bundle product.
"""
type BundleItem {
  """
  An ID assigned to each type of item in a bundle product.
  """
  option_id: Int @deprecated(reason: "Use `uid` instead")

  """
  An array of additional options for this bundle item.
  """
  options: [BundleItemOption]

  """
  A number indicating the sequence order of this item compared to the other bundle items.
  """
  position: Int

  """
  The range of prices for the product
  """
  price_range: PriceRange!

  """
  Indicates whether the item must be included in the bundle.
  """
  required: Boolean

  """
  The SKU of the bundle product.
  """
  sku: String

  """
  The display name of the item.
  """
  title: String

  """
  The input type that the customer uses to select the item. Examples include radio button and checkbox.
  """
  type: String

  """
  The unique ID for a `BundleItem` object.
  """
  uid: ID
}

"""
Defines the characteristics that comprise a specific bundle item and its options.
"""
type BundleItemOption {
  """
  Indicates whether the customer can change the number of items for this option.
  """
  can_change_quantity: Boolean

  """
  The ID assigned to the bundled item option.
  """
  id: Int @deprecated(reason: "Use `uid` instead")

  """
  Indicates whether this option is the default option.
  """
  is_default: Boolean

  """
  The text that identifies the bundled item option.
  """
  label: String

  """
  When a bundle item contains multiple options, the relative position of this option compared to the other options.
  """
  position: Int

  """
  The price of the selected option.
  """
  price: Float

  """
  One of FIXED, PERCENT, or DYNAMIC.
  """
  price_type: PriceTypeEnum

  """
  Contains details about this product option.
  """
  product: ProductInterface

  """
  Indicates the quantity of this specific bundle item.
  """
  qty: Float @deprecated(reason: "Use `quantity` instead.")

  """
  The quantity of this specific bundle item.
  """
  quantity: Float

  """
  The unique ID for a `BundleItemOption` object.
  """
  uid: ID!
}

"""
Defines basic features of a bundle product and contains multiple BundleItems.
"""
type BundleProduct implements ProductInterface & PhysicalProductInterface & CustomizableProductInterface & RoutableInterface {
  activity: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  as_featured: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The attribute set assigned to the product.
  """
  attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")

  """
  The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled.
  """
  canonical_url: String

  """
  The categories assigned to a product.
  """
  categories: [CategoryInterface]

  category_gear: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  climate: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  collar: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The product's country of origin.
  """
  country_of_manufacture: String

  """
  Timestamp indicating when the product was created.
  """
  created_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  Crosssell Products
  """
  crosssell_products: [ProductInterface]

  """
  Product custom attributes.
  """
  custom_attributesV2("" filters: AttributeFilterInput): ProductCustomAttributes

  """
  Detailed information about the product. The value can include simple HTML tags.
  """
  description: ComplexTextValue

  """
  Indicates whether the bundle product has a dynamic price.
  """
  dynamic_price: Boolean

  """
  Indicates whether the bundle product has a dynamic SKU.
  """
  dynamic_sku: Boolean

  """
  Indicates whether the bundle product has a dynamically calculated weight.
  """
  dynamic_weight: Boolean

  eco_collection: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  erin_recommends: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  features_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  format: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  gender: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates whether a gift message is available.
  """
  gift_message_available: String

  """
  The ID number assigned to the product.
  """
  id: Int @deprecated(reason: "Use the `uid` field instead.")

  """
  The relative path to the main image on the product page.
  """
  image: ProductImage

  """
  An array containing information about individual bundle items.
  """
  items: [BundleItem]

  """
  A number representing the product's manufacturer.
  """
  manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  material: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  An array of media gallery objects.
  """
  media_gallery: [MediaGalleryInterface]

  """
  An array of MediaGalleryEntry objects.
  """
  media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")

  """
  A brief overview of the product for search results listings, maximum 255 characters.
  """
  meta_description: String

  """
  A comma-separated list of keywords that are visible only to search engines.
  """
  meta_keyword: String

  """
  A string that is displayed in the title bar and tab of the browser and in search results lists.
  """
  meta_title: String

  """
  The product name. Customers use this name to identify the product.
  """
  name: String

  new: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The beginning date for new product listings, and determines if the product is featured as a new product.
  """
  new_from_date: String

  """
  The end date for new product listings.
  """
  new_to_date: String

  """
  Product stock only x left count
  """
  only_x_left_in_stock: Float

  """
  An array of options for a customizable product.
  """
  options: [CustomizableOptionInterface]

  """
  If the product has multiple options, determines where they appear on the product page.
  """
  options_container: String

  pattern: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  performance_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates the price of an item.
  """
  price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")

  """
  The price details of the main product
  """
  price_details: PriceDetails

  """
  The range of prices for the product
  """
  price_range: PriceRange!

  """
  An array of `TierPrice` objects.
  """
  price_tiers: [TierPrice]

  """
  One of PRICE_RANGE or AS_LOW_AS.
  """
  price_view: PriceViewEnum

  """
  An array of `ProductLinks` objects.
  """
  product_links: [ProductLinksInterface]

  """
  The average of all the ratings given to the product.
  """
  rating_summary: Float!

  """
  Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect.
  """
  redirect_code: Int!

  """
  An array of products to be displayed in a Related Products block.
  """
  related_products: [ProductInterface]

  """
  The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original.
  """
  relative_url: String

  """
  The total count of all the reviews given to the product.
  """
  review_count: Int!

  """
  The list of products reviews.
  """
  reviews("The maximum number of results to return at once. The default is 20." pageSize: Int = 20, "The page of results to return. The default is 1." currentPage: Int = 1): ProductReviews!

  sale: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates whether to ship bundle items together or individually.
  """
  ship_bundle_items: ShipBundleItemsEnum

  """
  A short description of the product. Its use depends on the theme.
  """
  short_description: ComplexTextValue

  size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  A number or code assigned to a product to identify the product, options, price, and manufacturer.
  """
  sku: String

  sleeve: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The relative path to the small image, which is used on catalog pages.
  """
  small_image: ProductImage

  """
  The beginning date that a product has a special price.
  """
  special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  The discounted price of the product.
  """
  special_price: Float

  """
  The end date for a product with a special price.
  """
  special_to_date: String

  """
  Stock status of the product
  """
  stock_status: ProductStockStatus

  strap_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_bottom: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_general: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The file name of a swatch image.
  """
  swatch_image: String

  """
  The relative path to the product's thumbnail image.
  """
  thumbnail: ProductImage

  """
  The price when tier pricing is in effect and the items purchased threshold has been reached.
  """
  tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")

  """
  An array of ProductTierPrices objects.
  """
  tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")

  """
  One of PRODUCT, CATEGORY, or CMS_PAGE.
  """
  type: UrlRewriteEntityTypeEnum

  """
  One of simple, virtual, bundle, downloadable, grouped, or configurable.
  """
  type_id: String @deprecated(reason: "Use `__typename` instead.")

  """
  The unique ID for a `ProductInterface` object.
  """
  uid: ID!

  """
  Timestamp indicating when the product was updated.
  """
  updated_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  Upsell Products
  """
  upsell_products: [ProductInterface]

  """
  The part of the URL that identifies the product
  """
  url_key: String

  url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")

  """
  URL rewrites list
  """
  url_rewrites: [UrlRewrite]

  """
  The part of the product URL that is appended after the url key
  """
  url_suffix: String

  """
  An array of websites in which the product is available.
  """
  websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")

  """
  The weight of the item, in units defined by the store.
  """
  weight: Float
}

"""
Defines whether a bundle product's price is displayed as the lowest possible value or as a range.
"""
enum PriceViewEnum {
  PRICE_RANGE

  AS_LOW_AS
}

"""
Defines whether bundle items must be shipped together.
"""
enum ShipBundleItemsEnum {
  TOGETHER

  SEPARATELY
}

"""
Defines bundle product options for `OrderItemInterface`.
"""
type BundleOrderItem implements OrderItemInterface {
  """
  A list of bundle options that are assigned to the bundle product.
  """
  bundle_options: [ItemSelectedBundleOption]

  """
  The final discount information for the product.
  """
  discounts: [Discount]

  """
  The entered option for the base product, such as a logo or image.
  """
  entered_options: [OrderItemOption]

  """
  The selected gift message for the order item
  """
  gift_message: GiftMessage

  """
  The unique ID for an `OrderItemInterface` object.
  """
  id: ID!

  """
  The ProductInterface object, which contains details about the base product
  """
  product: ProductInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price of the base product, including selected options.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The type of product, such as simple, configurable, etc.
  """
  product_type: String

  """
  URL key of the base product.
  """
  product_url_key: String

  """
  The number of canceled items.
  """
  quantity_canceled: Float

  """
  The number of invoiced items.
  """
  quantity_invoiced: Float

  """
  The number of units ordered for this item.
  """
  quantity_ordered: Float

  """
  The number of refunded items.
  """
  quantity_refunded: Float

  """
  The number of returned items.
  """
  quantity_returned: Float

  """
  The number of shipped items.
  """
  quantity_shipped: Float

  """
  The selected options for the base product, such as color or size.
  """
  selected_options: [OrderItemOption]

  """
  The status of the order item.
  """
  status: String
}

"""
Defines bundle product options for `InvoiceItemInterface`.
"""
type BundleInvoiceItem implements InvoiceItemInterface {
  """
  A list of bundle options that are assigned to an invoiced bundle product.
  """
  bundle_options: [ItemSelectedBundleOption]

  """
  Information about the final discount amount for the base product, including discounts on options.
  """
  discounts: [Discount]

  """
  The unique ID for an `InvoiceItemInterface` object.
  """
  id: ID!

  """
  Details about an individual order item.
  """
  order_item: OrderItemInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price for the base product including selected options.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The number of invoiced items.
  """
  quantity_invoiced: Float
}

"""
Defines bundle product options for `ShipmentItemInterface`.
"""
type BundleShipmentItem implements ShipmentItemInterface {
  """
  A list of bundle options that are assigned to a shipped product.
  """
  bundle_options: [ItemSelectedBundleOption]

  """
  The unique ID for a `ShipmentItemInterface` object.
  """
  id: ID!

  """
  The order item associated with the shipment item.
  """
  order_item: OrderItemInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price for the base product.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The number of shipped items.
  """
  quantity_shipped: Float!
}

"""
Defines bundle product options for `CreditMemoItemInterface`.
"""
type BundleCreditMemoItem implements CreditMemoItemInterface {
  """
  A list of bundle options that are assigned to a bundle product that is part of a credit memo.
  """
  bundle_options: [ItemSelectedBundleOption]

  """
  Details about the final discount amount for the base product, including discounts on options.
  """
  discounts: [Discount]

  """
  The unique ID for a `CreditMemoItemInterface` object.
  """
  id: ID!

  """
  The order item the credit memo is applied to.
  """
  order_item: OrderItemInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price for the base product, including selected options.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The number of refunded items.
  """
  quantity_refunded: Float
}

"""
A list of options of the selected bundle product.
"""
type ItemSelectedBundleOption {
  """
  The unique ID for a `ItemSelectedBundleOption` object.
  """
  id: ID! @deprecated(reason: "Use `uid` instead.")

  """
  The label of the option.
  """
  label: String!

  """
  The unique ID for a `ItemSelectedBundleOption` object.
  """
  uid: ID!

  """
  A list of products that represent the values of the parent option.
  """
  values: [ItemSelectedBundleOptionValue]
}

"""
A list of values for the selected bundle product.
"""
type ItemSelectedBundleOptionValue {
  """
  The unique ID for a `ItemSelectedBundleOptionValue` object.
  """
  id: ID! @deprecated(reason: "Use `uid` instead.")

  """
  The price of the child bundle product.
  """
  price: Money!

  """
  The name of the child bundle product.
  """
  product_name: String!

  """
  The SKU of the child bundle product.
  """
  product_sku: String!

  """
  The number of this bundle product that were ordered.
  """
  quantity: Float!

  """
  The unique ID for a `ItemSelectedBundleOptionValue` object.
  """
  uid: ID!
}

"""
Defines bundle product options for `WishlistItemInterface`.
"""
type BundleWishlistItem implements WishlistItemInterface {
  """
  The date and time the item was added to the wish list.
  """
  added_at: String!

  """
  An array containing information about the selected bundle items.
  """
  bundle_options: [SelectedBundleOption]

  """
  Custom options selected for the wish list item.
  """
  customizable_options: [SelectedCustomizableOption]!

  """
  The description of the item.
  """
  description: String

  """
  The unique ID for a `WishlistItemInterface` object.
  """
  id: ID!

  """
  Product details of the wish list item.
  """
  product: ProductInterface

  """
  The quantity of this wish list item.
  """
  quantity: Float!
}

"""
Defines a grouped product, which consists of simple standalone products that are presented as a group.
"""
type GroupedProduct implements ProductInterface & PhysicalProductInterface & RoutableInterface {
  activity: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  as_featured: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The attribute set assigned to the product.
  """
  attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")

  """
  The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled.
  """
  canonical_url: String

  """
  The categories assigned to a product.
  """
  categories: [CategoryInterface]

  category_gear: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  climate: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  collar: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The product's country of origin.
  """
  country_of_manufacture: String

  """
  Timestamp indicating when the product was created.
  """
  created_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  Crosssell Products
  """
  crosssell_products: [ProductInterface]

  """
  Product custom attributes.
  """
  custom_attributesV2("" filters: AttributeFilterInput): ProductCustomAttributes

  """
  Detailed information about the product. The value can include simple HTML tags.
  """
  description: ComplexTextValue

  eco_collection: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  erin_recommends: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  features_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  format: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  gender: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates whether a gift message is available.
  """
  gift_message_available: String

  """
  The ID number assigned to the product.
  """
  id: Int @deprecated(reason: "Use the `uid` field instead.")

  """
  The relative path to the main image on the product page.
  """
  image: ProductImage

  """
  An array containing grouped product items.
  """
  items: [GroupedProductItem]

  """
  A number representing the product's manufacturer.
  """
  manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  material: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  An array of media gallery objects.
  """
  media_gallery: [MediaGalleryInterface]

  """
  An array of MediaGalleryEntry objects.
  """
  media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")

  """
  A brief overview of the product for search results listings, maximum 255 characters.
  """
  meta_description: String

  """
  A comma-separated list of keywords that are visible only to search engines.
  """
  meta_keyword: String

  """
  A string that is displayed in the title bar and tab of the browser and in search results lists.
  """
  meta_title: String

  """
  The product name. Customers use this name to identify the product.
  """
  name: String

  new: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The beginning date for new product listings, and determines if the product is featured as a new product.
  """
  new_from_date: String

  """
  The end date for new product listings.
  """
  new_to_date: String

  """
  Product stock only x left count
  """
  only_x_left_in_stock: Float

  """
  If the product has multiple options, determines where they appear on the product page.
  """
  options_container: String

  pattern: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  performance_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates the price of an item.
  """
  price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")

  """
  The range of prices for the product
  """
  price_range: PriceRange!

  """
  An array of `TierPrice` objects.
  """
  price_tiers: [TierPrice]

  """
  An array of `ProductLinks` objects.
  """
  product_links: [ProductLinksInterface]

  """
  The average of all the ratings given to the product.
  """
  rating_summary: Float!

  """
  Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect.
  """
  redirect_code: Int!

  """
  An array of products to be displayed in a Related Products block.
  """
  related_products: [ProductInterface]

  """
  The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original.
  """
  relative_url: String

  """
  The total count of all the reviews given to the product.
  """
  review_count: Int!

  """
  The list of products reviews.
  """
  reviews("The maximum number of results to return at once. The default is 20." pageSize: Int = 20, "The page of results to return. The default is 1." currentPage: Int = 1): ProductReviews!

  sale: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  A short description of the product. Its use depends on the theme.
  """
  short_description: ComplexTextValue

  size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  A number or code assigned to a product to identify the product, options, price, and manufacturer.
  """
  sku: String

  sleeve: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The relative path to the small image, which is used on catalog pages.
  """
  small_image: ProductImage

  """
  The beginning date that a product has a special price.
  """
  special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  The discounted price of the product.
  """
  special_price: Float

  """
  The end date for a product with a special price.
  """
  special_to_date: String

  """
  Stock status of the product
  """
  stock_status: ProductStockStatus

  strap_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_bottom: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_general: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The file name of a swatch image.
  """
  swatch_image: String

  """
  The relative path to the product's thumbnail image.
  """
  thumbnail: ProductImage

  """
  The price when tier pricing is in effect and the items purchased threshold has been reached.
  """
  tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")

  """
  An array of ProductTierPrices objects.
  """
  tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")

  """
  One of PRODUCT, CATEGORY, or CMS_PAGE.
  """
  type: UrlRewriteEntityTypeEnum

  """
  One of simple, virtual, bundle, downloadable, grouped, or configurable.
  """
  type_id: String @deprecated(reason: "Use `__typename` instead.")

  """
  The unique ID for a `ProductInterface` object.
  """
  uid: ID!

  """
  Timestamp indicating when the product was updated.
  """
  updated_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  Upsell Products
  """
  upsell_products: [ProductInterface]

  """
  The part of the URL that identifies the product
  """
  url_key: String

  url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")

  """
  URL rewrites list
  """
  url_rewrites: [UrlRewrite]

  """
  The part of the product URL that is appended after the url key
  """
  url_suffix: String

  """
  An array of websites in which the product is available.
  """
  websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")

  """
  The weight of the item, in units defined by the store.
  """
  weight: Float
}

"""
Contains information about an individual grouped product item.
"""
type GroupedProductItem {
  """
  The relative position of this item compared to the other group items.
  """
  position: Int

  """
  Details about this product option.
  """
  product: ProductInterface

  """
  The quantity of this grouped product item.
  """
  qty: Float
}

"""
A grouped product wish list item.
"""
type GroupedProductWishlistItem implements WishlistItemInterface {
  """
  The date and time the item was added to the wish list.
  """
  added_at: String!

  """
  Custom options selected for the wish list item.
  """
  customizable_options: [SelectedCustomizableOption]!

  """
  The description of the item.
  """
  description: String

  """
  The unique ID for a `WishlistItemInterface` object.
  """
  id: ID!

  """
  Product details of the wish list item.
  """
  product: ProductInterface

  """
  The quantity of this wish list item.
  """
  quantity: Float!
}

"""
Defines basic features of a configurable product and its simple product variants.
"""
type ConfigurableProduct implements ProductInterface & PhysicalProductInterface & CustomizableProductInterface & RoutableInterface {
  activity: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  as_featured: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The attribute set assigned to the product.
  """
  attribute_set_id: Int @deprecated(reason: "The field should not be used on the storefront.")

  """
  The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled.
  """
  canonical_url: String

  """
  The categories assigned to a product.
  """
  categories: [CategoryInterface]

  category_gear: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  climate: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  collar: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  color: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  An array of options for the configurable product.
  """
  configurable_options: [ConfigurableProductOptions]

  """
  An array of media gallery items and other details about selected configurable product options as well as details about remaining selectable options.
  """
  configurable_product_options_selection("" configurableOptionValueUids: [ID!]): ConfigurableProductOptionsSelection

  """
  The product's country of origin.
  """
  country_of_manufacture: String

  """
  Timestamp indicating when the product was created.
  """
  created_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  Crosssell Products
  """
  crosssell_products: [ProductInterface]

  """
  Product custom attributes.
  """
  custom_attributesV2("" filters: AttributeFilterInput): ProductCustomAttributes

  """
  Detailed information about the product. The value can include simple HTML tags.
  """
  description: ComplexTextValue

  eco_collection: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  erin_recommends: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  features_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  format: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  gender: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates whether a gift message is available.
  """
  gift_message_available: String

  """
  The ID number assigned to the product.
  """
  id: Int @deprecated(reason: "Use the `uid` field instead.")

  """
  The relative path to the main image on the product page.
  """
  image: ProductImage

  """
  A number representing the product's manufacturer.
  """
  manufacturer: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  material: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  An array of media gallery objects.
  """
  media_gallery: [MediaGalleryInterface]

  """
  An array of MediaGalleryEntry objects.
  """
  media_gallery_entries: [MediaGalleryEntry] @deprecated(reason: "Use `media_gallery` instead.")

  """
  A brief overview of the product for search results listings, maximum 255 characters.
  """
  meta_description: String

  """
  A comma-separated list of keywords that are visible only to search engines.
  """
  meta_keyword: String

  """
  A string that is displayed in the title bar and tab of the browser and in search results lists.
  """
  meta_title: String

  """
  The product name. Customers use this name to identify the product.
  """
  name: String

  new: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The beginning date for new product listings, and determines if the product is featured as a new product.
  """
  new_from_date: String

  """
  The end date for new product listings.
  """
  new_to_date: String

  """
  Product stock only x left count
  """
  only_x_left_in_stock: Float

  """
  An array of options for a customizable product.
  """
  options: [CustomizableOptionInterface]

  """
  If the product has multiple options, determines where they appear on the product page.
  """
  options_container: String

  pattern: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  performance_fabric: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  Indicates the price of an item.
  """
  price: ProductPrices @deprecated(reason: "Use `price_range` for product price information.")

  """
  The range of prices for the product
  """
  price_range: PriceRange!

  """
  An array of `TierPrice` objects.
  """
  price_tiers: [TierPrice]

  """
  An array of `ProductLinks` objects.
  """
  product_links: [ProductLinksInterface]

  """
  The average of all the ratings given to the product.
  """
  rating_summary: Float!

  """
  Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect.
  """
  redirect_code: Int!

  """
  An array of products to be displayed in a Related Products block.
  """
  related_products: [ProductInterface]

  """
  The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original.
  """
  relative_url: String

  """
  The total count of all the reviews given to the product.
  """
  review_count: Int!

  """
  The list of products reviews.
  """
  reviews("The maximum number of results to return at once. The default is 20." pageSize: Int = 20, "The page of results to return. The default is 1." currentPage: Int = 1): ProductReviews!

  sale: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  A short description of the product. Its use depends on the theme.
  """
  short_description: ComplexTextValue

  size: Int @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  A number or code assigned to a product to identify the product, options, price, and manufacturer.
  """
  sku: String

  sleeve: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The relative path to the small image, which is used on catalog pages.
  """
  small_image: ProductImage

  """
  The beginning date that a product has a special price.
  """
  special_from_date: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  The discounted price of the product.
  """
  special_price: Float

  """
  The end date for a product with a special price.
  """
  special_to_date: String

  """
  Stock status of the product
  """
  stock_status: ProductStockStatus

  strap_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_bags: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_bottom: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  style_general: String @deprecated(reason: "Use the `custom_attributes` field instead.")

  """
  The file name of a swatch image.
  """
  swatch_image: String

  """
  The relative path to the product's thumbnail image.
  """
  thumbnail: ProductImage

  """
  The price when tier pricing is in effect and the items purchased threshold has been reached.
  """
  tier_price: Float @deprecated(reason: "Use `price_tiers` for product tier price information.")

  """
  An array of ProductTierPrices objects.
  """
  tier_prices: [ProductTierPrices] @deprecated(reason: "Use `price_tiers` for product tier price information.")

  """
  One of PRODUCT, CATEGORY, or CMS_PAGE.
  """
  type: UrlRewriteEntityTypeEnum

  """
  One of simple, virtual, bundle, downloadable, grouped, or configurable.
  """
  type_id: String @deprecated(reason: "Use `__typename` instead.")

  """
  The unique ID for a `ProductInterface` object.
  """
  uid: ID!

  """
  Timestamp indicating when the product was updated.
  """
  updated_at: String @deprecated(reason: "The field should not be used on the storefront.")

  """
  Upsell Products
  """
  upsell_products: [ProductInterface]

  """
  The part of the URL that identifies the product
  """
  url_key: String

  url_path: String @deprecated(reason: "Use product's `canonical_url` or url rewrites instead")

  """
  URL rewrites list
  """
  url_rewrites: [UrlRewrite]

  """
  The part of the product URL that is appended after the url key
  """
  url_suffix: String

  """
  An array of simple product variants.
  """
  variants: [ConfigurableVariant]

  """
  An array of websites in which the product is available.
  """
  websites: [Website] @deprecated(reason: "The field should not be used on the storefront.")

  """
  The weight of the item, in units defined by the store.
  """
  weight: Float
}

"""
Contains all the simple product variants of a configurable product.
"""
type ConfigurableVariant {
  """
  An array of configurable attribute options.
  """
  attributes: [ConfigurableAttributeOption]

  """
  An array of linked simple products.
  """
  product: SimpleProduct
}

"""
Contains details about a configurable product attribute option.
"""
type ConfigurableAttributeOption {
  """
  The ID assigned to the attribute.
  """
  code: String

  """
  A string that describes the configurable attribute option.
  """
  label: String

  """
  The unique ID for a `ConfigurableAttributeOption` object.
  """
  uid: ID!

  """
  A unique index number assigned to the configurable product option.
  """
  value_index: Int
}

"""
Defines configurable attributes for the specified product.
"""
type ConfigurableProductOptions {
  """
  A string that identifies the attribute.
  """
  attribute_code: String

  """
  The ID assigned to the attribute.
  """
  attribute_id: String @deprecated(reason: "Use `attribute_uid` instead.")

  """
  The ID assigned to the attribute.
  """
  attribute_id_v2: Int @deprecated(reason: "Use `attribute_uid` instead.")

  """
  The unique ID for an `Attribute` object.
  """
  attribute_uid: ID!

  """
  The configurable option ID number assigned by the system.
  """
  id: Int @deprecated(reason: "Use `uid` instead.")

  """
  A displayed string that describes the configurable product option.
  """
  label: String

  """
  A number that indicates the order in which the attribute is displayed.
  """
  position: Int

  """
  This is the same as a product's `id` field.
  """
  product_id: Int @deprecated(reason: "`product_id` is not needed and can be obtained from its parent.")

  """
  The unique ID for a `ConfigurableProductOptions` object.
  """
  uid: ID!

  """
  Indicates whether the option is the default.
  """
  use_default: Boolean

  """
  An array that defines the `value_index` codes assigned to the configurable product.
  """
  values: [ConfigurableProductOptionsValues]
}

"""
Contains the index number assigned to a configurable product option.
"""
type ConfigurableProductOptionsValues {
  """
  The label of the product on the default store.
  """
  default_label: String

  """
  The label of the product.
  """
  label: String

  """
  The label of the product on the current store.
  """
  store_label: String

  """
  Swatch data for a configurable product option.
  """
  swatch_data: SwatchDataInterface

  """
  The unique ID for a `ConfigurableProductOptionsValues` object.
  """
  uid: ID

  """
  Indicates whether to use the default_label.
  """
  use_default_value: Boolean

  """
  A unique index number assigned to the configurable product option.
  """
  value_index: Int @deprecated(reason: "Use `uid` instead.")
}

"""
Defines the configurable products to add to the cart.
"""
input AddConfigurableProductsToCartInput {
  """
  The ID of the cart.
  """
  cart_id: String!

  """
  An array of configurable products to add.
  """
  cart_items: [ConfigurableProductCartItemInput]!
}

"""
Contains details about the cart after adding configurable products.
"""
type AddConfigurableProductsToCartOutput {
  """
  The cart after adding products.
  """
  cart: Cart!
}

input ConfigurableProductCartItemInput {
  """
  The ID and value of the option.
  """
  customizable_options: [CustomizableOptionInput]

  """
  The quantity and SKU of the configurable product.
  """
  data: CartItemInput!

  """
  The SKU of the parent configurable product.
  """
  parent_sku: String

  """
  Deprecated. Use `CartItemInput.sku` instead.
  """
  variant_sku: String
}

"""
Contains details about a selected configurable option.
"""
type SelectedConfigurableOption {
  """
  The unique ID for a `ConfigurableProductOptions` object.
  """
  configurable_product_option_uid: ID!

  """
  The unique ID for a `ConfigurableProductOptionsValues` object.
  """
  configurable_product_option_value_uid: ID!

  id: Int! @deprecated(reason: "Use `SelectedConfigurableOption.configurable_product_option_uid` instead.")

  """
  The display text for the option.
  """
  option_label: String!

  value_id: Int! @deprecated(reason: "Use `SelectedConfigurableOption.configurable_product_option_value_uid` instead.")

  """
  The display name of the selected configurable option.
  """
  value_label: String!
}

"""
A configurable product wish list item.
"""
type ConfigurableWishlistItem implements WishlistItemInterface {
  """
  The date and time the item was added to the wish list.
  """
  added_at: String!

  """
  The SKU of the simple product corresponding to a set of selected configurable options.
  """
  child_sku: String! @deprecated(reason: "Use `ConfigurableWishlistItem.configured_variant.sku` instead.")

  """
  An array of selected configurable options.
  """
  configurable_options: [SelectedConfigurableOption]

  """
  Product details of the selected variant. The value is null if some options are not configured.
  """
  configured_variant: ProductInterface

  """
  Custom options selected for the wish list item.
  """
  customizable_options: [SelectedCustomizableOption]!

  """
  The description of the item.
  """
  description: String

  """
  The unique ID for a `WishlistItemInterface` object.
  """
  id: ID!

  """
  Product details of the wish list item.
  """
  product: ProductInterface

  """
  The quantity of this wish list item.
  """
  quantity: Float!
}

"""
Contains metadata corresponding to the selected configurable options.
"""
type ConfigurableProductOptionsSelection {
  """
  An array of all possible configurable options.
  """
  configurable_options: [ConfigurableProductOption]

  """
  Product images and videos corresponding to the specified configurable options selection.
  """
  media_gallery: [MediaGalleryInterface]

  """
  The configurable options available for further selection based on the current selection.
  """
  options_available_for_selection: [ConfigurableOptionAvailableForSelection]

  """
  A variant represented by the specified configurable options selection. The value is expected to be null until selections are made for each configurable option.
  """
  variant: SimpleProduct
}

"""
Describes configurable options that have been selected and can be selected as a result of the previous selections.
"""
type ConfigurableOptionAvailableForSelection {
  """
  An attribute code that uniquely identifies a configurable option.
  """
  attribute_code: String!

  """
  An array of selectable option value IDs.
  """
  option_value_uids: [ID]!
}

"""
Contains details about configurable product options.
"""
type ConfigurableProductOption {
  """
  An attribute code that uniquely identifies a configurable option.
  """
  attribute_code: String!

  """
  The display name of the option.
  """
  label: String!

  """
  The unique ID of the configurable option.
  """
  uid: ID!

  """
  An array of values that are applicable for this option.
  """
  values: [ConfigurableProductOptionValue]
}

"""
Defines a value for a configurable product option.
"""
type ConfigurableProductOptionValue {
  """
  Indicates whether the product is available with this selected option.
  """
  is_available: Boolean!

  """
  Indicates whether the value is the default.
  """
  is_use_default: Boolean!

  """
  The display name of the value.
  """
  label: String!

  """
  The URL assigned to the thumbnail of the swatch image.
  """
  swatch: SwatchDataInterface

  """
  The unique ID of the value.
  """
  uid: ID!
}

"""
AreaInput defines the parameters which will be used for filter by specified location.
"""
input AreaInput {
  """
  The radius for the search in KM.
  """
  radius: Int!

  """
  The country code where search must be performed. Required parameter together with region, city or postcode.
  """
  search_term: String!
}

"""
PickupLocationFilterInput defines the list of attributes and filters for the search.
"""
input PickupLocationFilterInput {
  """
  Filter by city.
  """
  city: FilterTypeInput

  """
  Filter by country.
  """
  country_id: FilterTypeInput

  """
  Filter by pickup location name.
  """
  name: FilterTypeInput

  """
  Filter by pickup location code.
  """
  pickup_location_code: FilterTypeInput

  """
  Filter by postcode.
  """
  postcode: FilterTypeInput

  """
  Filter by region.
  """
  region: FilterTypeInput

  """
  Filter by region id.
  """
  region_id: FilterTypeInput

  """
  Filter by street.
  """
  street: FilterTypeInput
}

"""
PickupLocationSortInput specifies attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order.
"""
input PickupLocationSortInput {
  """
  City where pickup location is placed.
  """
  city: SortEnum

  """
  Name of the contact person.
  """
  contact_name: SortEnum

  """
  Id of the country in two letters.
  """
  country_id: SortEnum

  """
  Description of the pickup location.
  """
  description: SortEnum

  """
  Distance to the address, requested by distance filter. Applicable only with distance filter. If distance sort order is present, all other sort orders will be ignored.
  """
  distance: SortEnum

  """
  Contact email of the pickup location.
  """
  email: SortEnum

  """
  Contact fax of the pickup location.
  """
  fax: SortEnum

  """
  Geographic latitude where pickup location is placed.
  """
  latitude: SortEnum

  """
  Geographic longitude where pickup location is placed.
  """
  longitude: SortEnum

  """
  The pickup location name. Customer use this to identify the pickup location.
  """
  name: SortEnum

  """
  Contact phone number of the pickup location.
  """
  phone: SortEnum

  """
  A code assigned to pickup location to identify the source.
  """
  pickup_location_code: SortEnum

  """
  Postcode where pickup location is placed.
  """
  postcode: SortEnum

  """
  Name of the region.
  """
  region: SortEnum

  """
  Id of the region.
  """
  region_id: SortEnum

  """
  Street where pickup location is placed.
  """
  street: SortEnum
}

"""
Top level object returned in a pickup locations search.
"""
type PickupLocations {
  """
  An array of pickup locations that match the specific search request.
  """
  items: [PickupLocation]

  """
  An object that includes the page_info and currentPage values specified in the query.
  """
  page_info: SearchResultPageInfo

  """
  The number of products returned.
  """
  total_count: Int
}

"""
Defines Pickup Location information.
"""
type PickupLocation {
  city: String

  contact_name: String

  country_id: String

  description: String

  email: String

  fax: String

  latitude: Float

  longitude: Float

  name: String

  phone: String

  pickup_location_code: String

  postcode: String

  region: String

  region_id: Int

  street: String
}

"""
Product Information used for Pickup Locations search.
"""
input ProductInfoInput {
  """
  Product SKU.
  """
  sku: String!
}

"""
This enumeration states whether a product stock status is in stock or out of stock
"""
enum ProductStockStatus {
  IN_STOCK

  OUT_OF_STOCK
}

"""
Identifies which customer requires remote shopping assistance.
"""
input GenerateCustomerTokenAsAdminInput {
  """
  The email address of the customer requesting remote shopping assistance.
  """
  customer_email: String!
}

"""
Contains the generated customer token.
"""
type GenerateCustomerTokenAsAdminOutput {
  """
  The generated customer token.
  """
  customer_token: String!
}

"""
Defines the customer name, addresses, and other details.
"""
type Customer {
  """
  An array containing the customer's shipping and billing addresses.
  """
  addresses: [CustomerAddress]

  """
  Indicates whether the customer has enabled remote shopping assistance.
  """
  allow_remote_shopping_assistance: Boolean!

  """
  The contents of the customer's compare list.
  """
  compare_list: CompareList

  """
  The customer's confirmation status.
  """
  confirmation_status: ConfirmationStatusEnum!

  """
  Timestamp indicating when the account was created.
  """
  created_at: String

  """
  Customer's custom attributes.
  """
  custom_attributes("" attributeCodes: [ID!]): [AttributeValueInterface]

  """
  The customer's date of birth.
  """
  date_of_birth: String

  """
  The ID assigned to the billing address.
  """
  default_billing: String

  """
  The ID assigned to the shipping address.
  """
  default_shipping: String

  """
  The customer's date of birth.
  """
  dob: String @deprecated(reason: "Use `date_of_birth` instead.")

  """
  The customer's email address. Required.
  """
  email: String

  """
  The customer's first name.
  """
  firstname: String

  """
  The customer's gender (Male - 1, Female - 2).
  """
  gender: Int

  group_id: Int @deprecated(reason: "Customer group should not be exposed in the storefront scenarios.")

  """
  The ID assigned to the customer.
  """
  id: Int @deprecated(reason: "`id` is not needed as part of `Customer`, because on the server side, it can be identified based on the customer token used for authentication. There is no need to know customer ID on the client side.")

  """
  Indicates whether the customer is subscribed to the company's newsletter.
  """
  is_subscribed: Boolean

  """
  The customer's family name.
  """
  lastname: String

  """
  The customer's middle name.
  """
  middlename: String

  orders("Defines the filter to use for searching customer orders." filter: CustomerOrdersFilterInput, "Specifies which page of results to return. The default value is 1." currentPage: Int = 1, "Specifies the maximum number of results to return at once. The default value is 20." pageSize: Int = 20, "Specifies which field to sort on, and whether to return the results in ascending or descending order." sort: CustomerOrderSortInput, "Specifies the scope to search for customer orders. The Store request header identifies the customer's store view code. The default value of STORE limits the search to the value specified in the header. Specify WEBSITE to expand the search to include all customer orders assigned to the website that is defined in the header, or specify GLOBAL to include all customer orders across all websites and stores." scope: ScopeTypeEnum): CustomerOrders

  """
  An honorific, such as Dr., Mr., or Mrs.
  """
  prefix: String

  """
  Contains the customer's product reviews.
  """
  reviews("The maximum number of results to return at once. The default value is 20." pageSize: Int = 20, "The page of results to return. The default value is 1." currentPage: Int = 1): ProductReviews!

  """
  A value such as Sr., Jr., or III.
  """
  suffix: String

  """
  The customer's Value-added tax (VAT) number (for corporate customers).
  """
  taxvat: String

  """
  Return a customer's wish lists.
  """
  wishlist: Wishlist! @deprecated(reason: "Use `Customer.wishlists` or `Customer.wishlist_v2` instead.")

  """
  Retrieve the wish list identified by the unique ID for a `Wishlist` object.
  """
  wishlist_v2("" id: ID!): Wishlist

  """
  An array of wishlists. In Magento Open Source, customers are limited to one wish list. The number of wish lists is configurable for Adobe Commerce.
  """
  wishlists("Specifies the maximum number of results to return at once. This attribute is optional." pageSize: Int = 20, "Specifies which page of results to return. The default value is 1." currentPage: Int = 1): [Wishlist]!
}

"""
An input object for creating a customer.
"""
input CustomerCreateInput {
  """
  Indicates whether the customer has enabled remote shopping assistance.
  """
  allow_remote_shopping_assistance: Boolean

  """
  The customer's custom attributes.
  """
  custom_attributes: [AttributeValueInput]

  """
  The customer's date of birth.
  """
  date_of_birth: String

  """
  Deprecated: Use `date_of_birth` instead.
  """
  dob: String

  """
  The customer's email address.
  """
  email: String!

  """
  The customer's first name.
  """
  firstname: String!

  """
  The customer's gender (Male - 1, Female - 2).
  """
  gender: Int

  """
  Indicates whether the customer is subscribed to the company's newsletter.
  """
  is_subscribed: Boolean

  """
  The customer's family name.
  """
  lastname: String!

  """
  The customer's middle name.
  """
  middlename: String

  """
  The customer's password.
  """
  password: String

  """
  An honorific, such as Dr., Mr., or Mrs.
  """
  prefix: String

  """
  A value such as Sr., Jr., or III.
  """
  suffix: String

  """
  The customer's Tax/VAT number (for corporate customers).
  """
  taxvat: String
}

"""
An input object for updating a customer.
"""
input CustomerUpdateInput {
  """
  Indicates whether the customer has enabled remote shopping assistance.
  """
  allow_remote_shopping_assistance: Boolean

  """
  The customer's custom attributes.
  """
  custom_attributes: [AttributeValueInput]

  """
  The customer's date of birth.
  """
  date_of_birth: String

  """
  Deprecated: Use `date_of_birth` instead.
  """
  dob: String

  """
  The customer's first name.
  """
  firstname: String

  """
  The customer's gender (Male - 1, Female - 2).
  """
  gender: Int

  """
  Indicates whether the customer is subscribed to the company's newsletter.
  """
  is_subscribed: Boolean

  """
  The customer's family name.
  """
  lastname: String

  """
  The customer's middle name.
  """
  middlename: String

  """
  An honorific, such as Dr., Mr., or Mrs.
  """
  prefix: String

  """
  A value such as Sr., Jr., or III.
  """
  suffix: String

  """
  The customer's Tax/VAT number (for corporate customers).
  """
  taxvat: String
}

"""
Contains details about a customer email address to confirm.
"""
input ConfirmEmailInput {
  """
  The key to confirm the email address.
  """
  confirmation_key: String!

  """
  The email address to be confirmed.
  """
  email: String!
}

"""
Contains details about a billing or shipping address.
"""
input CustomerAddressInput {
  """
  The customer's city or town.
  """
  city: String

  """
  The customer's company.
  """
  company: String

  """
  The two-letter code representing the customer's country.
  """
  country_code: CountryCodeEnum

  """
  Deprecated: use `country_code` instead.
  """
  country_id: CountryCodeEnum

  """
  Deprecated. Use custom_attributesV2 instead.
  """
  custom_attributes: [CustomerAddressAttributeInput]

  """
  Custom attributes assigned to the customer address.
  """
  custom_attributesV2: [AttributeValueInput]

  """
  Indicates whether the address is the default billing address.
  """
  default_billing: Boolean

  """
  Indicates whether the address is the default shipping address.
  """
  default_shipping: Boolean

  """
  The customer's fax number.
  """
  fax: String

  """
  The first name of the person associated with the billing/shipping address.
  """
  firstname: String

  """
  The family name of the person associated with the billing/shipping address.
  """
  lastname: String

  """
  The middle name of the person associated with the billing/shipping address.
  """
  middlename: String

  """
  The customer's ZIP or postal code.
  """
  postcode: String

  """
  An honorific, such as Dr., Mr., or Mrs.
  """
  prefix: String

  """
  An object containing the region name, region code, and region ID.
  """
  region: CustomerAddressRegionInput

  """
  An array of strings that define the street number and name.
  """
  street: [String]

  """
  A value such as Sr., Jr., or III.
  """
  suffix: String

  """
  The customer's telephone number.
  """
  telephone: String

  """
  The customer's Tax/VAT number (for corporate customers).
  """
  vat_id: String
}

"""
Defines the customer's state or province.
"""
input CustomerAddressRegionInput {
  """
  The state or province name.
  """
  region: String

  """
  The address region code.
  """
  region_code: String

  """
  The unique ID for a pre-defined region.
  """
  region_id: Int
}

"""
Specifies the attribute code and value of a customer attribute.
"""
input CustomerAddressAttributeInput {
  """
  The name assigned to the attribute.
  """
  attribute_code: String!

  """
  The value assigned to the attribute.
  """
  value: String!
}

"""
Contains a customer authorization token.
"""
type CustomerToken {
  """
  The customer authorization token.
  """
  token: String
}

"""
An input object that assigns or updates customer attributes.
"""
input CustomerInput {
  """
  The customer's date of birth.
  """
  date_of_birth: String

  """
  Deprecated: Use `date_of_birth` instead.
  """
  dob: String

  """
  The customer's email address. Required when creating a customer.
  """
  email: String

  """
  The customer's first name.
  """
  firstname: String

  """
  The customer's gender (Male - 1, Female - 2).
  """
  gender: Int

  """
  Indicates whether the customer is subscribed to the company's newsletter.
  """
  is_subscribed: Boolean

  """
  The customer's family name.
  """
  lastname: String

  """
  The customer's middle name.
  """
  middlename: String

  """
  The customer's password.
  """
  password: String

  """
  An honorific, such as Dr., Mr., or Mrs.
  """
  prefix: String

  """
  A value such as Sr., Jr., or III.
  """
  suffix: String

  """
  The customer's Tax/VAT number (for corporate customers).
  """
  taxvat: String
}

"""
Contains details about a newly-created or updated customer.
"""
type CustomerOutput {
  """
  Customer details after creating or updating a customer.
  """
  customer: Customer!
}

"""
Contains the result of a request to revoke a customer token.
"""
type RevokeCustomerTokenOutput {
  """
  The result of a request to revoke a customer token.
  """
  result: Boolean!
}

"""
Contains detailed information about a customer's billing or shipping address.
"""
type CustomerAddress {
  """
  The customer's city or town.
  """
  city: String

  """
  The customer's company.
  """
  company: String

  """
  The customer's country.
  """
  country_code: CountryCodeEnum

  """
  The customer's country.
  """
  country_id: String @deprecated(reason: "Use `country_code` instead.")

  custom_attributes: [CustomerAddressAttribute] @deprecated(reason: "Use custom_attributesV2 instead.")

  """
  Custom attributes assigned to the customer address.
  """
  custom_attributesV2("" attributeCodes: [ID!]): [AttributeValueInterface]!

  """
  The customer ID
  """
  customer_id: Int @deprecated(reason: "`customer_id` is not needed as part of `CustomerAddress`. The `id` is a unique identifier for the addresses.")

  """
  Indicates whether the address is the customer's default billing address.
  """
  default_billing: Boolean

  """
  Indicates whether the address is the customer's default shipping address.
  """
  default_shipping: Boolean

  """
  Contains any extension attributes for the address.
  """
  extension_attributes: [CustomerAddressAttribute]

  """
  The customer's fax number.
  """
  fax: String

  """
  The first name of the person associated with the shipping/billing address.
  """
  firstname: String

  """
  The ID of a `CustomerAddress` object.
  """
  id: Int

  """
  The family name of the person associated with the shipping/billing address.
  """
  lastname: String

  """
  The middle name of the person associated with the shipping/billing address.
  """
  middlename: String

  """
  The customer's ZIP or postal code.
  """
  postcode: String

  """
  An honorific, such as Dr., Mr., or Mrs.
  """
  prefix: String

  """
  An object containing the region name, region code, and region ID.
  """
  region: CustomerAddressRegion

  """
  The unique ID for a pre-defined region.
  """
  region_id: Int

  """
  An array of strings that define the street number and name.
  """
  street: [String]

  """
  A value such as Sr., Jr., or III.
  """
  suffix: String

  """
  The customer's telephone number.
  """
  telephone: String

  """
  The customer's Value-added tax (VAT) number (for corporate customers).
  """
  vat_id: String
}

"""
Defines the customer's state or province.
"""
type CustomerAddressRegion {
  """
  The state or province name.
  """
  region: String

  """
  The address region code.
  """
  region_code: String

  """
  The unique ID for a pre-defined region.
  """
  region_id: Int
}

"""
Specifies the attribute code and value of a customer address attribute.
"""
type CustomerAddressAttribute {
  """
  The name assigned to the customer address attribute.
  """
  attribute_code: String

  """
  The value assigned to the customer address attribute.
  """
  value: String
}

"""
Contains the result of the `isEmailAvailable` query.
"""
type IsEmailAvailableOutput {
  """
  Indicates whether the specified email address can be used to create a customer.
  """
  is_email_available: Boolean
}

"""
The list of country codes.
"""
enum CountryCodeEnum {
  """
  Afghanistan
  """
  AF

  """
  Åland Islands
  """
  AX

  """
  Albania
  """
  AL

  """
  Algeria
  """
  DZ

  """
  American Samoa
  """
  AS

  """
  Andorra
  """
  AD

  """
  Angola
  """
  AO

  """
  Anguilla
  """
  AI

  """
  Antarctica
  """
  AQ

  """
  Antigua & Barbuda
  """
  AG

  """
  Argentina
  """
  AR

  """
  Armenia
  """
  AM

  """
  Aruba
  """
  AW

  """
  Australia
  """
  AU

  """
  Austria
  """
  AT

  """
  Azerbaijan
  """
  AZ

  """
  Bahamas
  """
  BS

  """
  Bahrain
  """
  BH

  """
  Bangladesh
  """
  BD

  """
  Barbados
  """
  BB

  """
  Belarus
  """
  BY

  """
  Belgium
  """
  BE

  """
  Belize
  """
  BZ

  """
  Benin
  """
  BJ

  """
  Bermuda
  """
  BM

  """
  Bhutan
  """
  BT

  """
  Bolivia
  """
  BO

  """
  Bosnia & Herzegovina
  """
  BA

  """
  Botswana
  """
  BW

  """
  Bouvet Island
  """
  BV

  """
  Brazil
  """
  BR

  """
  British Indian Ocean Territory
  """
  IO

  """
  British Virgin Islands
  """
  VG

  """
  Brunei
  """
  BN

  """
  Bulgaria
  """
  BG

  """
  Burkina Faso
  """
  BF

  """
  Burundi
  """
  BI

  """
  Cambodia
  """
  KH

  """
  Cameroon
  """
  CM

  """
  Canada
  """
  CA

  """
  Cape Verde
  """
  CV

  """
  Cayman Islands
  """
  KY

  """
  Central African Republic
  """
  CF

  """
  Chad
  """
  TD

  """
  Chile
  """
  CL

  """
  China
  """
  CN

  """
  Christmas Island
  """
  CX

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Colombia
  """
  CO

  """
  Comoros
  """
  KM

  """
  Congo-Brazzaville
  """
  CG

  """
  Congo-Kinshasa
  """
  CD

  """
  Cook Islands
  """
  CK

  """
  Costa Rica
  """
  CR

  """
  Côte d’Ivoire
  """
  CI

  """
  Croatia
  """
  HR

  """
  Cuba
  """
  CU

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Denmark
  """
  DK

  """
  Djibouti
  """
  DJ

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Ecuador
  """
  EC

  """
  Egypt
  """
  EG

  """
  El Salvador
  """
  SV

  """
  Equatorial Guinea
  """
  GQ

  """
  Eritrea
  """
  ER

  """
  Estonia
  """
  EE

  """
  Eswatini
  """
  SZ

  """
  Ethiopia
  """
  ET

  """
  Falkland Islands
  """
  FK

  """
  Faroe Islands
  """
  FO

  """
  Fiji
  """
  FJ

  """
  Finland
  """
  FI

  """
  France
  """
  FR

  """
  French Guiana
  """
  GF

  """
  French Polynesia
  """
  PF

  """
  French Southern Territories
  """
  TF

  """
  Gabon
  """
  GA

  """
  Gambia
  """
  GM

  """
  Georgia
  """
  GE

  """
  Germany
  """
  DE

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greece
  """
  GR

  """
  Greenland
  """
  GL

  """
  Grenada
  """
  GD

  """
  Guadeloupe
  """
  GP

  """
  Guam
  """
  GU

  """
  Guatemala
  """
  GT

  """
  Guernsey
  """
  GG

  """
  Guinea
  """
  GN

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Haiti
  """
  HT

  """
  Heard &amp; McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Hong Kong SAR China
  """
  HK

  """
  Hungary
  """
  HU

  """
  Iceland
  """
  IS

  """
  India
  """
  IN

  """
  Indonesia
  """
  ID

  """
  Iran
  """
  IR

  """
  Iraq
  """
  IQ

  """
  Ireland
  """
  IE

  """
  Isle of Man
  """
  IM

  """
  Israel
  """
  IL

  """
  Italy
  """
  IT

  """
  Jamaica
  """
  JM

  """
  Japan
  """
  JP

  """
  Jersey
  """
  JE

  """
  Jordan
  """
  JO

  """
  Kazakhstan
  """
  KZ

  """
  Kenya
  """
  KE

  """
  Kiribati
  """
  KI

  """
  Kuwait
  """
  KW

  """
  Kyrgyzstan
  """
  KG

  """
  Laos
  """
  LA

  """
  Latvia
  """
  LV

  """
  Lebanon
  """
  LB

  """
  Lesotho
  """
  LS

  """
  Liberia
  """
  LR

  """
  Libya
  """
  LY

  """
  Liechtenstein
  """
  LI

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Macau SAR China
  """
  MO

  """
  Macedonia
  """
  MK

  """
  Madagascar
  """
  MG

  """
  Malawi
  """
  MW

  """
  Malaysia
  """
  MY

  """
  Maldives
  """
  MV

  """
  Mali
  """
  ML

  """
  Malta
  """
  MT

  """
  Marshall Islands
  """
  MH

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Mauritius
  """
  MU

  """
  Mayotte
  """
  YT

  """
  Mexico
  """
  MX

  """
  Micronesia
  """
  FM

  """
  Moldova
  """
  MD

  """
  Monaco
  """
  MC

  """
  Mongolia
  """
  MN

  """
  Montenegro
  """
  ME

  """
  Montserrat
  """
  MS

  """
  Morocco
  """
  MA

  """
  Mozambique
  """
  MZ

  """
  Myanmar (Burma)
  """
  MM

  """
  Namibia
  """
  NA

  """
  Nauru
  """
  NR

  """
  Nepal
  """
  NP

  """
  Netherlands
  """
  NL

  """
  Netherlands Antilles
  """
  AN

  """
  New Caledonia
  """
  NC

  """
  New Zealand
  """
  NZ

  """
  Nicaragua
  """
  NI

  """
  Niger
  """
  NE

  """
  Nigeria
  """
  NG

  """
  Niue
  """
  NU

  """
  Norfolk Island
  """
  NF

  """
  Northern Mariana Islands
  """
  MP

  """
  North Korea
  """
  KP

  """
  Norway
  """
  NO

  """
  Oman
  """
  OM

  """
  Pakistan
  """
  PK

  """
  Palau
  """
  PW

  """
  Palestinian Territories
  """
  PS

  """
  Panama
  """
  PA

  """
  Papua New Guinea
  """
  PG

  """
  Paraguay
  """
  PY

  """
  Peru
  """
  PE

  """
  Philippines
  """
  PH

  """
  Pitcairn Islands
  """
  PN

  """
  Poland
  """
  PL

  """
  Portugal
  """
  PT

  """
  Qatar
  """
  QA

  """
  Réunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Russia
  """
  RU

  """
  Rwanda
  """
  RW

  """
  Samoa
  """
  WS

  """
  San Marino
  """
  SM

  """
  São Tomé & Príncipe
  """
  ST

  """
  Saudi Arabia
  """
  SA

  """
  Senegal
  """
  SN

  """
  Serbia
  """
  RS

  """
  Seychelles
  """
  SC

  """
  Sierra Leone
  """
  SL

  """
  Singapore
  """
  SG

  """
  Slovakia
  """
  SK

  """
  Slovenia
  """
  SI

  """
  Solomon Islands
  """
  SB

  """
  Somalia
  """
  SO

  """
  South Africa
  """
  ZA

  """
  South Georgia & South Sandwich Islands
  """
  GS

  """
  South Korea
  """
  KR

  """
  Spain
  """
  ES

  """
  Sri Lanka
  """
  LK

  """
  St. Barthélemy
  """
  BL

  """
  St. Helena
  """
  SH

  """
  St. Kitts & Nevis
  """
  KN

  """
  St. Lucia
  """
  LC

  """
  St. Martin
  """
  MF

  """
  St. Pierre & Miquelon
  """
  PM

  """
  St. Vincent & Grenadines
  """
  VC

  """
  Sudan
  """
  SD

  """
  Suriname
  """
  SR

  """
  Svalbard & Jan Mayen
  """
  SJ

  """
  Sweden
  """
  SE

  """
  Switzerland
  """
  CH

  """
  Syria
  """
  SY

  """
  Taiwan
  """
  TW

  """
  Tajikistan
  """
  TJ

  """
  Tanzania
  """
  TZ

  """
  Thailand
  """
  TH

  """
  Timor-Leste
  """
  TL

  """
  Togo
  """
  TG

  """
  Tokelau
  """
  TK

  """
  Tonga
  """
  TO

  """
  Trinidad & Tobago
  """
  TT

  """
  Tunisia
  """
  TN

  """
  Turkey
  """
  TR

  """
  Turkmenistan
  """
  TM

  """
  Turks & Caicos Islands
  """
  TC

  """
  Tuvalu
  """
  TV

  """
  Uganda
  """
  UG

  """
  Ukraine
  """
  UA

  """
  United Arab Emirates
  """
  AE

  """
  United Kingdom
  """
  GB

  """
  United States
  """
  US

  """
  Uruguay
  """
  UY

  """
  U.S. Outlying Islands
  """
  UM

  """
  U.S. Virgin Islands
  """
  VI

  """
  Uzbekistan
  """
  UZ

  """
  Vanuatu
  """
  VU

  """
  Vatican City
  """
  VA

  """
  Venezuela
  """
  VE

  """
  Vietnam
  """
  VN

  """
  Wallis & Futuna
  """
  WF

  """
  Western Sahara
  """
  EH

  """
  Yemen
  """
  YE

  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  ZW
}

"""
Customer attribute metadata.
"""
type CustomerAttributeMetadata implements CustomAttributeMetadataInterface {
  """
  The unique identifier for an attribute code. This value should be in lowercase letters without spaces.
  """
  code: ID!

  """
  Default attribute value.
  """
  default_value: String

  """
  The type of entity that defines the attribute.
  """
  entity_type: AttributeEntityTypeEnum!

  """
  The frontend class of the attribute.
  """
  frontend_class: String

  """
  The frontend input type of the attribute.
  """
  frontend_input: AttributeFrontendInputEnum

  """
  The template used for the input of the attribute (e.g., 'date').
  """
  input_filter: InputFilterEnum

  """
  Whether the attribute value is required.
  """
  is_required: Boolean!

  """
  Whether the attribute value must be unique.
  """
  is_unique: Boolean!

  """
  The label assigned to the attribute.
  """
  label: String

  """
  The number of lines of the attribute value.
  """
  multiline_count: Int

  """
  Attribute options.
  """
  options: [CustomAttributeOptionInterface]!

  """
  The position of the attribute in the form.
  """
  sort_order: Int

  """
  The validation rules of the attribute value.
  """
  validate_rules: [ValidationRule]
}

"""
List of templates/filters applied to customer attribute input.
"""
enum InputFilterEnum {
  """
  There are no templates or filters to be applied.
  """
  NONE

  """
  Forces attribute input to follow the date format.
  """
  DATE

  """
  Strip whitespace (or other characters) from the beginning and end of the input.
  """
  TRIM

  """
  Strip HTML Tags.
  """
  STRIPTAGS

  """
  Escape HTML Entities.
  """
  ESCAPEHTML
}

"""
Defines a customer attribute validation rule.
"""
type ValidationRule {
  """
  Validation rule name applied to a customer attribute.
  """
  name: ValidationRuleEnum

  """
  Validation rule value.
  """
  value: String
}

"""
List of validation rule names applied to a customer attribute.
"""
enum ValidationRuleEnum {
  DATE_RANGE_MAX

  DATE_RANGE_MIN

  FILE_EXTENSIONS

  INPUT_VALIDATION

  MAX_TEXT_LENGTH

  MIN_TEXT_LENGTH

  MAX_FILE_SIZE

  MAX_IMAGE_HEIGHT

  MAX_IMAGE_WIDTH
}

"""
List of account confirmation statuses.
"""
enum ConfirmationStatusEnum {
  """
  Account confirmed
  """
  ACCOUNT_CONFIRMED

  """
  Account confirmation not required
  """
  ACCOUNT_CONFIRMATION_NOT_REQUIRED
}

"""
Contains the result of the `subscribeEmailToNewsletter` operation.
"""
type SubscribeEmailToNewsletterOutput {
  """
  The status of the subscription request.
  """
  status: SubscriptionStatusesEnum
}

"""
Indicates the status of the request.
"""
enum SubscriptionStatusesEnum {
  NOT_ACTIVE

  SUBSCRIBED

  UNSUBSCRIBED

  UNCONFIRMED
}

type CancellationReason {
  description: String!
}

"""
Defines the order to cancel.
"""
input CancelOrderInput {
  """
  Order ID.
  """
  order_id: ID!

  """
  Cancellation reason.
  """
  reason: String!
}

"""
Contains the updated customer order and error message if any.
"""
type CancelOrderOutput {
  """
  Error encountered while cancelling the order.
  """
  error: String

  """
  Updated customer order.
  """
  order: CustomerOrder
}

enum ReCaptchaFormEnum {
  PLACE_ORDER

  CONTACT

  CUSTOMER_LOGIN

  CUSTOMER_FORGOT_PASSWORD

  CUSTOMER_CREATE

  CUSTOMER_EDIT

  NEWSLETTER

  PRODUCT_REVIEW

  SENDFRIEND

  BRAINTREE
}

"""
Contains reCAPTCHA V3-Invisible configuration details.
"""
type ReCaptchaConfigurationV3 {
  """
  The position of the invisible reCAPTCHA badge on each page.
  """
  badge_position: String!

  """
  The message that appears to the user if validation fails.
  """
  failure_message: String!

  """
  A list of forms on the storefront that have been configured to use reCAPTCHA V3.
  """
  forms: [ReCaptchaFormEnum]!

  """
  Return whether recaptcha is enabled or not
  """
  is_enabled: Boolean!

  """
  A two-character code that specifies the language that is used for Google reCAPTCHA text and messaging.
  """
  language_code: String

  """
  The minimum score that identifies a user interaction as a potential risk.
  """
  minimum_score: Float!

  """
  The website key generated when the Google reCAPTCHA account was registered.
  """
  website_key: String!
}

"""
Contains an array of product reviews.
"""
type ProductReviews {
  """
  An array of product reviews.
  """
  items: [ProductReview]!

  """
  Metadata for pagination rendering.
  """
  page_info: SearchResultPageInfo!
}

"""
Contains details of a product review.
"""
type ProductReview {
  """
  The average of all ratings for this product.
  """
  average_rating: Float!

  """
  The date the review was created.
  """
  created_at: String!

  """
  The customer's nickname. Defaults to the customer name, if logged in.
  """
  nickname: String!

  """
  The reviewed product.
  """
  product: ProductInterface!

  """
  An array of ratings by rating category, such as quality, price, and value.
  """
  ratings_breakdown: [ProductReviewRating]!

  """
  The summary (title) of the review.
  """
  summary: String!

  """
  The review text.
  """
  text: String!
}

"""
Contains data about a single aspect of a product review.
"""
type ProductReviewRating {
  """
  The label assigned to an aspect of a product that is being rated, such as quality or price.
  """
  name: String!

  """
  The rating value given by customer. By default, possible values range from 1 to 5.
  """
  value: String!
}

"""
Contains an array of metadata about each aspect of a product review.
"""
type ProductReviewRatingsMetadata {
  """
  An array of product reviews sorted by position.
  """
  items: [ProductReviewRatingMetadata]!
}

"""
Contains details about a single aspect of a product review.
"""
type ProductReviewRatingMetadata {
  """
  An encoded rating ID.
  """
  id: String!

  """
  The label assigned to an aspect of a product that is being rated, such as quality or price.
  """
  name: String!

  """
  List of product review ratings sorted by position.
  """
  values: [ProductReviewRatingValueMetadata]!
}

"""
Contains details about a single value in a product review.
"""
type ProductReviewRatingValueMetadata {
  """
  A ratings scale, such as the number of stars awarded.
  """
  value: String!

  """
  An encoded rating value ID.
  """
  value_id: String!
}

"""
Contains the completed product review.
"""
type CreateProductReviewOutput {
  """
  Product review details.
  """
  review: ProductReview!
}

"""
Defines a new product review.
"""
input CreateProductReviewInput {
  """
  The customer's nickname. Defaults to the customer name, if logged in.
  """
  nickname: String!

  """
  The ratings details by category. For example, Price: 5 stars, Quality: 4 stars, etc.
  """
  ratings: [ProductReviewRatingInput]!

  """
  The SKU of the reviewed product.
  """
  sku: String!

  """
  The summary (title) of the review.
  """
  summary: String!

  """
  The review text.
  """
  text: String!
}

"""
Contains the reviewer's rating for a single aspect of a review.
"""
input ProductReviewRatingInput {
  """
  An encoded rating ID.
  """
  id: String!

  """
  An encoded rating value ID.
  """
  value_id: String!
}

"""
Contains the cart and any errors after adding products.
"""
type ReorderItemsOutput {
  """
  Detailed information about the customer's cart.
  """
  cart: Cart!

  """
  An array of reordering errors.
  """
  userInputErrors: [CheckoutUserInputError]!
}

"""
An error encountered while adding an item to the cart.
"""
type CheckoutUserInputError {
  """
  An error code that is specific to Checkout.
  """
  code: CheckoutUserInputErrorCodes!

  """
  A localized error message.
  """
  message: String!

  """
  The path to the input field that caused an error. See the GraphQL specification about path errors for details: http://spec.graphql.org/draft/#sec-Errors
  """
  path: [String]!
}

"""
Identifies the filter to use for filtering orders.
"""
input CustomerOrdersFilterInput {
  """
  Filters by order number.
  """
  number: FilterStringTypeInput
}

"""
CustomerOrderSortInput specifies the field to use for sorting search results and indicates whether the results are sorted in ascending or descending order.
"""
input CustomerOrderSortInput {
  """
  This enumeration indicates whether to return results in ascending or descending order
  """
  sort_direction: SortEnum!

  """
  Specifies the field to use for sorting
  """
  sort_field: CustomerOrderSortableField!
}

"""
Specifies the field to use for sorting
"""
enum CustomerOrderSortableField {
  """
  Sorts customer orders by number
  """
  NUMBER

  """
  Sorts customer orders by created_at field
  """
  CREATED_AT
}

"""
The collection of orders that match the conditions defined in the filter.
"""
type CustomerOrders {
  """
  An array of customer orders.
  """
  items: [CustomerOrder]!

  """
  Contains pagination metadata.
  """
  page_info: SearchResultPageInfo

  """
  The total count of customer orders.
  """
  total_count: Int
}

"""
Contains detailed information about an order's billing and shipping addresses.
"""
type OrderAddress {
  """
  The city or town.
  """
  city: String!

  """
  The customer's company.
  """
  company: String

  """
  The customer's country.
  """
  country_code: CountryCodeEnum

  """
  The fax number.
  """
  fax: String

  """
  The first name of the person associated with the shipping/billing address.
  """
  firstname: String!

  """
  The family name of the person associated with the shipping/billing address.
  """
  lastname: String!

  """
  The middle name of the person associated with the shipping/billing address.
  """
  middlename: String

  """
  The customer's ZIP or postal code.
  """
  postcode: String

  """
  An honorific, such as Dr., Mr., or Mrs.
  """
  prefix: String

  """
  The state or province name.
  """
  region: String

  """
  The unique ID for a `Region` object of a pre-defined region.
  """
  region_id: ID

  """
  An array of strings that define the street number and name.
  """
  street: [String]!

  """
  A value such as Sr., Jr., or III.
  """
  suffix: String

  """
  The telephone number.
  """
  telephone: String

  """
  The customer's Value-added tax (VAT) number (for corporate customers).
  """
  vat_id: String
}

type OrderItem implements OrderItemInterface {
  """
  The final discount information for the product.
  """
  discounts: [Discount]

  """
  The entered option for the base product, such as a logo or image.
  """
  entered_options: [OrderItemOption]

  """
  The selected gift message for the order item
  """
  gift_message: GiftMessage

  """
  The unique ID for an `OrderItemInterface` object.
  """
  id: ID!

  """
  The ProductInterface object, which contains details about the base product
  """
  product: ProductInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price of the base product, including selected options.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The type of product, such as simple, configurable, etc.
  """
  product_type: String

  """
  URL key of the base product.
  """
  product_url_key: String

  """
  The number of canceled items.
  """
  quantity_canceled: Float

  """
  The number of invoiced items.
  """
  quantity_invoiced: Float

  """
  The number of units ordered for this item.
  """
  quantity_ordered: Float

  """
  The number of refunded items.
  """
  quantity_refunded: Float

  """
  The number of returned items.
  """
  quantity_returned: Float

  """
  The number of shipped items.
  """
  quantity_shipped: Float

  """
  The selected options for the base product, such as color or size.
  """
  selected_options: [OrderItemOption]

  """
  The status of the order item.
  """
  status: String
}

"""
Represents order item options like selected or entered.
"""
type OrderItemOption {
  """
  The name of the option.
  """
  label: String!

  """
  The value of the option.
  """
  value: String!
}

"""
Contains tax item details.
"""
type TaxItem {
  """
  The amount of tax applied to the item.
  """
  amount: Money!

  """
  The rate used to calculate the tax.
  """
  rate: Float!

  """
  A title that describes the tax.
  """
  title: String!
}

"""
Contains details about the sales total amounts used to calculate the final price.
"""
type OrderTotal {
  """
  The final base grand total amount in the base currency.
  """
  base_grand_total: Money!

  """
  The applied discounts to the order.
  """
  discounts: [Discount]

  """
  The final total amount, including shipping, discounts, and taxes.
  """
  grand_total: Money!

  """
  Details about the shipping and handling costs for the order.
  """
  shipping_handling: ShippingHandling

  """
  The subtotal of the order, excluding shipping, discounts, and taxes.
  """
  subtotal: Money!

  """
  The order tax details.
  """
  taxes: [TaxItem]

  """
  The shipping amount for the order.
  """
  total_shipping: Money!

  """
  The amount of tax applied to the order.
  """
  total_tax: Money!
}

"""
Contains invoice details.
"""
type Invoice {
  """
  Comments on the invoice.
  """
  comments: [SalesCommentItem]

  """
  The unique ID for a `Invoice` object.
  """
  id: ID!

  """
  Invoiced product details.
  """
  items: [InvoiceItemInterface]

  """
  Sequential invoice number.
  """
  number: String!

  """
  Invoice total amount details.
  """
  total: InvoiceTotal
}

"""
Contains detailes about invoiced items.
"""
interface InvoiceItemInterface {
  """
  Information about the final discount amount for the base product, including discounts on options.
  """
  discounts: [Discount]

  """
  The unique ID for an `InvoiceItemInterface` object.
  """
  id: ID!

  """
  Details about an individual order item.
  """
  order_item: OrderItemInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price for the base product including selected options.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The number of invoiced items.
  """
  quantity_invoiced: Float
}

type InvoiceItem implements InvoiceItemInterface {
  """
  Information about the final discount amount for the base product, including discounts on options.
  """
  discounts: [Discount]

  """
  The unique ID for an `InvoiceItemInterface` object.
  """
  id: ID!

  """
  Details about an individual order item.
  """
  order_item: OrderItemInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price for the base product including selected options.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The number of invoiced items.
  """
  quantity_invoiced: Float
}

"""
Contains price details from an invoice.
"""
type InvoiceTotal {
  """
  The final base grand total amount in the base currency.
  """
  base_grand_total: Money!

  """
  The applied discounts to the invoice.
  """
  discounts: [Discount]

  """
  The final total amount, including shipping, discounts, and taxes.
  """
  grand_total: Money!

  """
  Details about the shipping and handling costs for the invoice.
  """
  shipping_handling: ShippingHandling

  """
  The subtotal of the invoice, excluding shipping, discounts, and taxes.
  """
  subtotal: Money!

  """
  The invoice tax details.
  """
  taxes: [TaxItem]

  """
  The shipping amount for the invoice.
  """
  total_shipping: Money!

  """
  The amount of tax applied to the invoice.
  """
  total_tax: Money!
}

"""
Contains details about shipping and handling costs.
"""
type ShippingHandling {
  """
  The shipping amount, excluding tax.
  """
  amount_excluding_tax: Money

  """
  The shipping amount, including tax.
  """
  amount_including_tax: Money

  """
  The applied discounts to the shipping.
  """
  discounts: [ShippingDiscount]

  """
  Details about taxes applied for shipping.
  """
  taxes: [TaxItem]

  """
  The total amount for shipping.
  """
  total_amount: Money!
}

"""
Defines an individual shipping discount. This discount can be applied to shipping.
"""
type ShippingDiscount {
  """
  The amount of the discount.
  """
  amount: Money!
}

"""
Contains order shipment details.
"""
type OrderShipment {
  """
  Comments added to the shipment.
  """
  comments: [SalesCommentItem]

  """
  The unique ID for a `OrderShipment` object.
  """
  id: ID!

  """
  An array of items included in the shipment.
  """
  items: [ShipmentItemInterface]

  """
  The sequential credit shipment number.
  """
  number: String!

  """
  An array of shipment tracking details.
  """
  tracking: [ShipmentTracking]
}

"""
Contains details about a comment.
"""
type SalesCommentItem {
  """
  The text of the message.
  """
  message: String!

  """
  The timestamp of the comment.
  """
  timestamp: String!
}

"""
Order shipment item details.
"""
interface ShipmentItemInterface {
  """
  The unique ID for a `ShipmentItemInterface` object.
  """
  id: ID!

  """
  The order item associated with the shipment item.
  """
  order_item: OrderItemInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price for the base product.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The number of shipped items.
  """
  quantity_shipped: Float!
}

type ShipmentItem implements ShipmentItemInterface {
  """
  The unique ID for a `ShipmentItemInterface` object.
  """
  id: ID!

  """
  The order item associated with the shipment item.
  """
  order_item: OrderItemInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price for the base product.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The number of shipped items.
  """
  quantity_shipped: Float!
}

"""
Contains order shipment tracking details.
"""
type ShipmentTracking {
  """
  The shipping carrier for the order delivery.
  """
  carrier: String!

  """
  The tracking number of the order shipment.
  """
  number: String

  """
  The shipment tracking title.
  """
  title: String!
}

"""
Contains details about the payment method used to pay for the order.
"""
type OrderPaymentMethod {
  """
  Additional data per payment method type.
  """
  additional_data: [KeyValue]

  """
  The label that describes the payment method.
  """
  name: String!

  """
  The payment method code that indicates how the order was paid for.
  """
  type: String!
}

"""
Contains credit memo details.
"""
type CreditMemo {
  """
  Comments on the credit memo.
  """
  comments: [SalesCommentItem]

  """
  The unique ID for a `CreditMemo` object.
  """
  id: ID!

  """
  An array containing details about refunded items.
  """
  items: [CreditMemoItemInterface]

  """
  The sequential credit memo number.
  """
  number: String!

  """
  Details about the total refunded amount.
  """
  total: CreditMemoTotal
}

"""
Credit memo item details.
"""
interface CreditMemoItemInterface {
  """
  Details about the final discount amount for the base product, including discounts on options.
  """
  discounts: [Discount]

  """
  The unique ID for a `CreditMemoItemInterface` object.
  """
  id: ID!

  """
  The order item the credit memo is applied to.
  """
  order_item: OrderItemInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price for the base product, including selected options.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The number of refunded items.
  """
  quantity_refunded: Float
}

type CreditMemoItem implements CreditMemoItemInterface {
  """
  Details about the final discount amount for the base product, including discounts on options.
  """
  discounts: [Discount]

  """
  The unique ID for a `CreditMemoItemInterface` object.
  """
  id: ID!

  """
  The order item the credit memo is applied to.
  """
  order_item: OrderItemInterface

  """
  The name of the base product.
  """
  product_name: String

  """
  The sale price for the base product, including selected options.
  """
  product_sale_price: Money!

  """
  The SKU of the base product.
  """
  product_sku: String!

  """
  The number of refunded items.
  """
  quantity_refunded: Float
}

"""
Contains credit memo price details.
"""
type CreditMemoTotal {
  """
  An adjustment manually applied to the order.
  """
  adjustment: Money!

  """
  The final base grand total amount in the base currency.
  """
  base_grand_total: Money!

  """
  The applied discounts to the credit memo.
  """
  discounts: [Discount]

  """
  The final total amount, including shipping, discounts, and taxes.
  """
  grand_total: Money!

  """
  Details about the shipping and handling costs for the credit memo.
  """
  shipping_handling: ShippingHandling

  """
  The subtotal of the invoice, excluding shipping, discounts, and taxes.
  """
  subtotal: Money!

  """
  The credit memo tax details.
  """
  taxes: [TaxItem]

  """
  The shipping amount for the credit memo.
  """
  total_shipping: Money!

  """
  The amount of tax applied to the credit memo.
  """
  total_tax: Money!
}

"""
Contains a key-value pair.
"""
type KeyValue {
  """
  The name part of the key/value pair.
  """
  name: String

  """
  The value part of the key/value pair.
  """
  value: String
}

enum CheckoutUserInputErrorCodes {
  REORDER_NOT_AVAILABLE

  PRODUCT_NOT_FOUND

  NOT_SALABLE

  INSUFFICIENT_STOCK

  UNDEFINED
}

"""
This enumeration defines the scope type for customer orders.
"""
enum ScopeTypeEnum {
  GLOBAL

  WEBSITE

  STORE
}

"""
Input to retrieve an order based on token.
"""
input OrderTokenInput {
  """
  Order token.
  """
  token: String!
}

"""
Input to retrieve an order based on details.
"""
input OrderInformationInput {
  """
  Order billing address email.
  """
  email: String!

  """
  Order number.
  """
  number: String!

  """
  Order billing address postcode.
  """
  postcode: String!
}

"""
Defines the referenced product and the email sender and recipients.
"""
input SendEmailToFriendInput {
  """
  The ID of the product that the sender is referencing.
  """
  product_id: Int!

  """
  An array containing information about each recipient.
  """
  recipients: [SendEmailToFriendRecipientInput]!

  """
  Information about the customer and the content of the message.
  """
  sender: SendEmailToFriendSenderInput!
}

"""
Contains details about the sender.
"""
input SendEmailToFriendSenderInput {
  """
  The email address of the sender.
  """
  email: String!

  """
  The text of the message to be sent.
  """
  message: String!

  """
  The name of the sender.
  """
  name: String!
}

"""
Contains details about a recipient.
"""
input SendEmailToFriendRecipientInput {
  """
  The email address of the recipient.
  """
  email: String!

  """
  The name of the recipient.
  """
  name: String!
}

"""
Contains information about the sender and recipients.
"""
type SendEmailToFriendOutput {
  """
  An array containing information about each recipient.
  """
  recipients: [SendEmailToFriendRecipient]

  """
  Information about the customer and the content of the message.
  """
  sender: SendEmailToFriendSender
}

"""
An output object that contains information about the sender.
"""
type SendEmailToFriendSender {
  """
  The email address of the sender.
  """
  email: String!

  """
  The text of the message to be sent.
  """
  message: String!

  """
  The name of the sender.
  """
  name: String!
}

"""
An output object that contains information about the recipient.
"""
type SendEmailToFriendRecipient {
  """
  The email address of the recipient.
  """
  email: String!

  """
  The name of the recipient.
  """
  name: String!
}

"""
Contains details about the configuration of the Email to a Friend feature.
"""
type SendFriendConfiguration {
  """
  Indicates whether the Email to a Friend feature is enabled.
  """
  enabled_for_customers: Boolean!

  """
  Indicates whether the Email to a Friend feature is enabled for guests.
  """
  enabled_for_guests: Boolean!
}

"""
Contains the `uid`, `relative_url`, and `type` attributes.
"""
type EntityUrl {
  canonical_url: String @deprecated(reason: "Use `relative_url` instead.")

  """
  The unique ID for a `ProductInterface`, `CategoryInterface`, `CmsPage`, or similar object associated with the specified URL. This could be a product, category, or CMS page UID.
  """
  entity_uid: ID

  """
  The ID assigned to the object associated with the specified url. This could be a product ID, category ID, or page ID.
  """
  id: Int @deprecated(reason: "Use `entity_uid` instead.")

  """
  Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect.
  """
  redirectCode: Int

  """
  The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original.
  """
  relative_url: String

  """
  One of PRODUCT, CATEGORY, or CMS_PAGE.
  """
  type: UrlRewriteEntityTypeEnum
}

"""
Contains URL rewrite details.
"""
type UrlRewrite {
  """
  An array of request parameters.
  """
  parameters: [HttpQueryParameter]

  """
  The request URL.
  """
  url: String
}

"""
Contains target path parameters.
"""
type HttpQueryParameter {
  """
  A parameter name.
  """
  name: String

  """
  A parameter value.
  """
  value: String
}

"""
Default implementation of RoutableInterface. This type is returned when the URL is not linked to an entity.
"""
type RoutableUrl implements RoutableInterface {
  """
  Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect.
  """
  redirect_code: Int!

  """
  The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original.
  """
  relative_url: String

  """
  One of PRODUCT, CATEGORY, or CMS_PAGE.
  """
  type: UrlRewriteEntityTypeEnum
}

"""
Routable entities serve as the model for a rendered page.
"""
interface RoutableInterface {
  """
  Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect.
  """
  redirect_code: Int!

  """
  The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original.
  """
  relative_url: String

  """
  One of PRODUCT, CATEGORY, or CMS_PAGE.
  """
  type: UrlRewriteEntityTypeEnum
}

"""
Defines an object used to iterate through items for product comparisons.
"""
type ComparableItem {
  """
  An array of product attributes that can be used to compare products.
  """
  attributes: [ProductAttribute]!

  """
  Details about a product in a compare list.
  """
  product: ProductInterface!

  """
  The unique ID of an item in a compare list.
  """
  uid: ID!
}

"""
Contains a product attribute code and value.
"""
type ProductAttribute {
  """
  The unique identifier for a product attribute code.
  """
  code: String!

  """
  The display value of the attribute.
  """
  value: String!
}

"""
Contains an attribute code that is used for product comparisons.
"""
type ComparableAttribute {
  """
  An attribute code that is enabled for product comparisons.
  """
  code: String!

  """
  The label of the attribute code.
  """
  label: String!
}

"""
Contains iterable information such as the array of items, the count, and attributes that represent the compare list.
"""
type CompareList {
  attributeValueList: [CompareAttributeList]

  """
  An array of attributes that can be used for comparing products.
  """
  attributes: [ComparableAttribute]

  """
  The number of items in the compare list.
  """
  item_count: Int!

  """
  An array of products to compare.
  """
  items: [ComparableItem]

  message: String

  productList: [OneProductList]

  showSwatchOnCollection: Boolean

  success: Boolean

  """
  The unique ID assigned to the compare list.
  """
  uid: ID!
}

"""
Contains an array of product IDs to use for creating a compare list.
"""
input CreateCompareListInput {
  """
  An array of product IDs to add to the compare list.
  """
  products: [ID]
}

"""
Contains products to add to an existing compare list.
"""
input AddProductsToCompareListInput {
  """
  An array of product IDs to add to the compare list.
  """
  products: [ID]!

  """
  The unique identifier of the compare list to modify.
  """
  uid: ID!
}

"""
Defines which products to remove from a compare list.
"""
input RemoveProductsFromCompareListInput {
  """
  An array of product IDs to remove from the compare list.
  """
  products: [ID]!

  """
  The unique identifier of the compare list to modify.
  """
  uid: ID!
}

"""
Contains the results of the request to delete a compare list.
"""
type DeleteCompareListOutput {
  """
  Indicates whether the compare list was successfully deleted.
  """
  result: Boolean!
}

"""
Contains the results of the request to assign a compare list.
"""
type AssignCompareListToCustomerOutput {
  """
  The contents of the customer's compare list.
  """
  compare_list: CompareList

  """
  Indicates whether the compare list was successfully assigned to the customer.
  """
  result: Boolean!
}

interface SwatchLayerFilterItemInterface {
  """
  Data required to render a swatch filter item.
  """
  swatch_data: SwatchData
}

type SwatchLayerFilterItem implements LayerFilterItemInterface & SwatchLayerFilterItemInterface {
  """
  The count of items per filter.
  """
  items_count: Int @deprecated(reason: "Use `AggregationOption.count` instead.")

  """
  The label for a filter.
  """
  label: String @deprecated(reason: "Use `AggregationOption.label` instead.")

  """
  Data required to render a swatch filter item.
  """
  swatch_data: SwatchData

  """
  The value of a filter request variable to be used in query.
  """
  value_string: String @deprecated(reason: "Use `AggregationOption.value` instead.")
}

"""
Describes the swatch type and a value.
"""
type SwatchData {
  """
  The type of swatch filter item: 1 - text; 2 - image.
  """
  type: String

  """
  The value for the swatch item. It could be text or an image link.
  """
  value: String
}

interface SwatchDataInterface {
  """
  The value can be represented as color (HEX code), image link, or text.
  """
  value: String
}

type ImageSwatchData implements SwatchDataInterface {
  """
  The URL assigned to the thumbnail of the swatch image.
  """
  thumbnail: String

  """
  The value can be represented as color (HEX code), image link, or text.
  """
  value: String
}

type TextSwatchData implements SwatchDataInterface {
  """
  The value can be represented as color (HEX code), image link, or text.
  """
  value: String
}

type ColorSwatchData implements SwatchDataInterface {
  """
  The value can be represented as color (HEX code), image link, or text.
  """
  value: String
}

"""
Swatch attribute metadata input types.
"""
enum SwatchInputTypeEnum {
  BOOLEAN

  DATE

  DATETIME

  DROPDOWN

  FILE

  GALLERY

  HIDDEN

  IMAGE

  MEDIA_IMAGE

  MULTILINE

  MULTISELECT

  PRICE

  SELECT

  TEXT

  TEXTAREA

  UNDEFINED

  VISUAL

  WEIGHT
}

enum TaxWrappingEnum {
  DISPLAY_EXCLUDING_TAX

  DISPLAY_INCLUDING_TAX

  DISPLAY_TYPE_BOTH
}

"""
Indicates whether the request succeeded and returns the remaining customer payment tokens.
"""
type DeletePaymentTokenOutput {
  """
  A container for the customer's remaining payment tokens.
  """
  customerPaymentTokens: CustomerPaymentTokens

  """
  Indicates whether the request succeeded.
  """
  result: Boolean!
}

"""
Contains payment tokens stored in the customer's vault.
"""
type CustomerPaymentTokens {
  """
  An array of payment tokens.
  """
  items: [PaymentToken]!
}

"""
The stored payment method available to the customer.
"""
type PaymentToken {
  """
  A description of the stored account details.
  """
  details: String

  """
  The payment method code associated with the token.
  """
  payment_method_code: String!

  """
  The public hash of the token.
  """
  public_hash: String!

  """
  Specifies the payment token type.
  """
  type: PaymentTokenTypeEnum!
}

"""
The list of available payment token types.
"""
enum PaymentTokenTypeEnum {
  """
  phpcs:ignore Magento2.GraphQL.ValidArgumentName
  """
  card

  """
  phpcs:ignore Magento2.GraphQL.ValidArgumentName
  """
  account
}

"""
A single FPT that can be applied to a product price.
"""
type FixedProductTax {
  """
  The amount of the Fixed Product Tax.
  """
  amount: Money

  """
  The display label assigned to the Fixed Product Tax.
  """
  label: String
}

"""
Lists display settings for the Fixed Product Tax.
"""
enum FixedProductTaxDisplaySettings {
  """
  The displayed price includes the FPT amount without displaying the `ProductPrice.fixed_product_taxes` values. This value corresponds to 'Including FPT only'.
  """
  INCLUDE_FPT_WITHOUT_DETAILS

  """
  The displayed price includes the FPT amount while displaying the values of `ProductPrice.fixed_product_taxes` separately. This value corresponds to 'Including FPT and FPT description'.
  """
  INCLUDE_FPT_WITH_DETAILS

  """
  The displayed price does not include the FPT amount. The values of `ProductPrice.fixed_product_taxes` and the price including the FPT are displayed separately. This value corresponds to 'Excluding FPT, Including FPT description and final price.'
  """
  EXCLUDE_FPT_AND_INCLUDE_WITH_DETAILS

  """
  The displayed price does not include the FPT amount. The values from `ProductPrice.fixed_product_taxes` are not displayed. This value corresponds to 'Excluding FPT'.
  """
  EXCLUDE_FPT_WITHOUT_DETAILS

  """
  The FPT feature is not enabled. You can omit `ProductPrice.fixed_product_taxes` from your query.
  """
  FPT_DISABLED
}

"""
Deprecated: Use the `Wishlist` type instead.
"""
type WishlistOutput {
  """
  An array of items in the customer's wish list
  """
  items: [WishlistItem] @deprecated(reason: "Use the `Wishlist.items` field instead.")

  """
  The number of items in the wish list.
  """
  items_count: Int @deprecated(reason: "Use the `Wishlist.items_count` field instead.")

  """
  When multiple wish lists are enabled, the name the customer assigns to the wishlist.
  """
  name: String @deprecated(reason: "This field is related to Commerce functionality and is always `null` in Open Source.")

  """
  An encrypted code that links to the wish list.
  """
  sharing_code: String @deprecated(reason: "Use the `Wishlist.sharing_code` field instead.")

  """
  The time of the last modification to the wish list.
  """
  updated_at: String @deprecated(reason: "Use the `Wishlist.updated_at` field instead.")
}

"""
Contains a customer wish list.
"""
type Wishlist {
  """
  The unique ID for a `Wishlist` object.
  """
  id: ID

  items: [WishlistItem] @deprecated(reason: "Use the `items_v2` field instead.")

  """
  The number of items in the wish list.
  """
  items_count: Int

  """
  An array of items in the customer's wish list.
  """
  items_v2("" currentPage: Int = 1, "" pageSize: Int = 20): WishlistItems

  message: String

  """
  An encrypted code that Magento uses to link to the wish list.
  """
  sharing_code: String

  success: Boolean

  totalCount: Int

  """
  The time of the last modification to the wish list.
  """
  updated_at: String

  wishList: [WishlistItems]
}

"""
The interface for wish list items.
"""
interface WishlistItemInterface {
  """
  The date and time the item was added to the wish list.
  """
  added_at: String!

  """
  Custom options selected for the wish list item.
  """
  customizable_options: [SelectedCustomizableOption]!

  """
  The description of the item.
  """
  description: String

  """
  The unique ID for a `WishlistItemInterface` object.
  """
  id: ID!

  """
  Product details of the wish list item.
  """
  product: ProductInterface

  """
  The quantity of this wish list item.
  """
  quantity: Float!
}

"""
Contains an array of items in a wish list.
"""
type WishlistItems {
  arTextureImages: [String]

  arType: String

  arUrl: String

  availability: String

  configurableData: ConfigurableData

  description: String

  dominantColor: String

  entityId: Int

  finalPrice: String

  formattedFinalPrice: String

  formattedMaxPrice: String

  formattedMinPrice: String

  formattedPrice: String

  formattedTierPrice: String

  groupedPrice: String

  hasRequiredOptions: Boolean

  id: String

  isAvailable: Boolean

  isInRange: Boolean

  isInWishlist: Boolean

  isNew: Boolean

  """
  A list of items in the wish list.
  """
  items: [WishlistItemInterface]!

  linksPurchasedSeparately: Boolean

  maxPrice: String

  minAddToCartQty: Int

  minPrice: String

  msrpDisplayActualPriceType: String

  msrpEnabled: Boolean

  name: String

  options: [WishlistOptions]

  """
  Contains pagination metadata.
  """
  page_info: SearchResultPageInfo

  price: String

  priceView: String

  productId: String

  qty: Int

  rating: String

  reviewCount: Int

  sku: String

  thumbNail: String

  tierPrice: String

  typeId: String

  wishlistItemId: Int
}

"""
Contains details about a wish list item.
"""
type WishlistItem {
  """
  The time when the customer added the item to the wish list.
  """
  added_at: String

  """
  The customer's comment about this item.
  """
  description: String

  """
  The unique ID for a `WishlistItem` object.
  """
  id: Int

  """
  Details about the wish list item.
  """
  product: ProductInterface

  """
  The quantity of this wish list item
  """
  qty: Float
}

"""
Contains the resultant wish list and any error information.
"""
type AddWishlistItemsToCartOutput {
  """
  An array of errors encountered while adding products to the customer's cart.
  """
  add_wishlist_items_to_cart_user_errors: [WishlistCartUserInputError]!

  """
  Indicates whether the attempt to add items to the customer's cart was successful.
  """
  status: Boolean!

  """
  Contains the wish list with all items that were successfully added.
  """
  wishlist: Wishlist!
}

"""
Contains details about errors encountered when a customer added wish list items to the cart.
"""
type WishlistCartUserInputError {
  """
  An error code that describes the error encountered.
  """
  code: WishlistCartUserInputErrorType!

  """
  A localized error message.
  """
  message: String!

  """
  The unique ID of the `Wishlist` object containing an error.
  """
  wishlistId: ID!

  """
  The unique ID of the wish list item containing an error.
  """
  wishlistItemId: ID!
}

"""
A list of possible error types.
"""
enum WishlistCartUserInputErrorType {
  PRODUCT_NOT_FOUND

  NOT_SALABLE

  INSUFFICIENT_STOCK

  UNDEFINED
}

"""
Defines the items to add to a wish list.
"""
input WishlistItemInput {
  """
  An array of options that the customer entered.
  """
  entered_options: [EnteredOptionInput]

  """
  For complex product types, the SKU of the parent product.
  """
  parent_sku: String

  """
  The amount or number of items to add.
  """
  quantity: Float!

  """
  An array of strings corresponding to options the customer selected.
  """
  selected_options: [ID]

  """
  The SKU of the product to add. For complex product types, specify the child product SKU.
  """
  sku: String!
}

"""
Contains the customer's wish list and any errors encountered.
"""
type AddProductsToWishlistOutput {
  """
  An array of errors encountered while adding products to a wish list.
  """
  user_errors: [WishListUserInputError]!

  """
  Contains the wish list with all items that were successfully added.
  """
  wishlist: Wishlist!
}

"""
Contains the customer's wish list and any errors encountered.
"""
type RemoveProductsFromWishlistOutput {
  """
  An array of errors encountered while deleting products from a wish list.
  """
  user_errors: [WishListUserInputError]!

  """
  Contains the wish list with after items were successfully deleted.
  """
  wishlist: Wishlist!
}

"""
Defines updates to items in a wish list.
"""
input WishlistItemUpdateInput {
  """
  Customer-entered comments about the item.
  """
  description: String

  """
  An array of options that the customer entered.
  """
  entered_options: [EnteredOptionInput]

  """
  The new amount or number of this item.
  """
  quantity: Float

  """
  An array of strings corresponding to options the customer selected.
  """
  selected_options: [ID]

  """
  The unique ID for a `WishlistItemInterface` object.
  """
  wishlist_item_id: ID!
}

"""
Contains the customer's wish list and any errors encountered.
"""
type UpdateProductsInWishlistOutput {
  """
  An array of errors encountered while updating products in a wish list.
  """
  user_errors: [WishListUserInputError]!

  """
  Contains the wish list with all items that were successfully updated.
  """
  wishlist: Wishlist!
}

"""
An error encountered while performing operations with WishList.
"""
type WishListUserInputError {
  """
  A wish list-specific error code.
  """
  code: WishListUserInputErrorType!

  """
  A localized error message.
  """
  message: String!
}

"""
A list of possible error types.
"""
enum WishListUserInputErrorType {
  PRODUCT_NOT_FOUND

  UNDEFINED
}

"""
Login Information
"""
type Login {
  avatar: String

  bannerImage: String

  bearerToken: String

  cartCount: Int

  chatId: Int

  customerEmail: String

  customerId: String

  customerName: String

  customerToken: String

  defaultStore: DefaultStore

  email: String

  id: Int

  isAdmin: Boolean

  isDeliveryBoy: Boolean

  message: String

  mobile: String

  name: String

  onlineStatus: Boolean

  profileImage: String

  success: Boolean

  userToken: String

  vehicleNumber: String

  vehicleType: String
}

type DefaultStore {
  code: String

  id: Int

  name: String
}

"""
Check if customer exist or not.
"""
type IsCustomerExists {
  isCustomerExists: Boolean

  message: String

  success: Boolean
}

"""
Order information
"""
type GetOrderInfo {
  adminAddress: String

  assignedDeliveryBoyDetails: [AssignedDeliveryBoyDetails]

  customerAddress: String

  message: String

  success: Boolean
}

type AssignedDeliveryBoyDetails {
  address: String

  avatar: String

  customerId: Int

  deliveryBoyLat: Float

  deliveryBoyLong: Float

  email: String

  id: Int

  isEligibleForDeliveryBoy: Boolean

  mobileNumber: String

  name: String

  onlineStatus: Boolean

  otp: Int

  picked: Boolean

  products: [String]

  rating: Float

  sellerId: Int

  status: Boolean

  vehicleNumber: String

  vehicleType: String

  warehouse: String

  warehouseLat: String

  warehouseLong: String
}

"""
DeliveryBoy information
"""
type DeliveryboyDetails {
  address: String

  avatar: String

  averageRating: Float

  email: String

  latitude: Float

  longitude: Float

  message: String

  mobile: String

  name: String

  onlineStatus: Boolean

  orderCount: Int

  status: Boolean

  success: Boolean

  vehicleNumber: String

  vehicleType: String
}

"""
order information
"""
type OrderDetailsDeliveryboy {
  commentList: [CommentList]

  customerEmail: String

  customerId: Int

  customerName: String

  customerTelephone: String

  date: String

  deliveryboyId: Int

  deliveryboyName: String

  formattedAddress: String

  hasCOD: Boolean

  itemList: [DeliveryboyOrderItemList]

  message: String

  orderPickUpLatitude: Float

  orderPickUpLongitude: Float

  otp: String

  picked: Boolean

  state: String

  status: String

  success: Boolean

  totalAmount: Float

  totalCommentCount: Int

  totals: [Totals]

  unformattedAddress: String
}

type DeliveryboyOrderItemList {
  name: String

  option: [Option]

  price: String

  qty: [ItemQty]

  sku: String

  subTotal: String

  thumbNail: String
}

type Option {
  label: String

  value: String
}

type ItemQty {
  canceled: Float

  ordered: Float

  refunded: Float

  shipped: Float
}

type Totals {
  code: String

  formattedValue: String

  label: String

  value: Float
}

type CommentList {
  comment: String

  commentedBy: String

  createdAt: String

  incrementId: String
}

"""
Dashboard information
"""
type Dashboard {
  avgSale: String

  dailyOrderList: DailyOrderList

  deliveryboyList: [DashboardDeliveryboyList]

  lifetimeSale: String

  message: String

  monthlyOrderList: MonthlyOrderList

  storeData: [StoreData]

  success: Boolean

  weeklyOrderList: WeeklyOrderList

  yearlyOrderList: YearlyOrderList
}

"""
Dashboard information
"""
type DashboardV2 {
  avgSale: String

  delivery_boy: [DashboardDeliveryboyList]

  lifetimeSale: String

  message: String

  orders: V2Orders

  overview_info: OverviewInfo

  pending_orders: String

  sell: SellData

  storeData: [StoreData]

  success: Boolean
}

type OverviewInfo {
  average_order: String

  canceled_order: String

  delivered_order: String

  inprocess_order: String

  overview_type: String

  pending_order: String
}

type V2Orders {
  completed: V2OrdersData

  pending: V2OrdersData
}

type V2OrdersData {
  total_order: String

  total_sell: String
}

type DashboardDeliveryboyList {
  latitude: Float

  longitude: Float

  mobile: String

  name: String

  orderCount: Int

  status: Boolean
}

type StoreData {
  id: Int

  name: String

  stores: [StoreDataStores]
}

type SellData {
  daily: DailyOrders

  monthly: MonthlyOrders

  weekly: WeeklyOrders

  yearly: YearlyOrders
}

type Stores {
  code: String

  id: Int

  name: String
}

type DailyOrderList {
  completeOrder: Int

  orderList: [OrderDataList]

  pendingOrder: Int

  processingOrder: Int

  totalOrder: Int
}

type WeeklyOrderList {
  completeOrder: Int

  orderList: [OrderDataList]

  pendingOrder: Int

  processingOrder: Int

  totalOrder: Int
}

type MonthlyOrderList {
  completeOrder: Int

  orderList: [OrderDataList]

  pendingOrder: Int

  processingOrder: Int

  totalOrder: Int
}

type YearlyOrderList {
  completeOrder: Int

  orderList: [OrderDataList]

  pendingOrder: Int

  processingOrder: Int

  totalOrder: Int
}

type OrderDataList {
  dateTime: String

  grandTotal: String

  id: Int

  status: String
}

type DailyOrders {
  graph_data: DailyGraphData

  total_order: String

  total_sell: String
}

type WeeklyOrders {
  graph_data: WeeklyGraphData

  total_order: String

  total_sell: String
}

type MonthlyOrders {
  graph_data: MonthlyGraphData

  total_order: String

  total_sell: String
}

type YearlyOrders {
  graph_data: YearlyGraphData

  total_order: String

  total_sell: String
}

type DailyGraphData {
  graph_details: [GraphDetails]
}

type WeeklyGraphData {
  graph_details: [GraphDetails]
}

type MonthlyGraphData {
  graph_details: [GraphDetails]
}

type YearlyGraphData {
  graph_details: [GraphDetails]
}

type GraphDetails {
  name: String

  total_order: String

  total_sell: String

  value: String
}

type RegisterDeliveryBoy {
  message: String

  success: Boolean
}

type SaveDeliveryboy {
  message: String

  success: Boolean
}

type DeleteDeliveryboy {
  message: String

  success: Boolean
}

type DeleteAccount {
  message: String

  otherError: String

  success: Boolean
}

type ForgotPassword {
  isAdmin: Boolean

  message: String

  success: Boolean
}

type GetDeliveryBoyList {
  deliveryboyList: [DeliveryboyList]

  message: String

  success: Boolean

  totalCount: Int
}

type DeliveryboyList {
  availabilityStatus: Boolean

  avatar: String

  distance: Float

  id: Int

  name: String

  orderCount: Int

  rating: Float

  status: Boolean
}

type GetAcceptStatus {
  message: String

  orderList: [AcceptedOrderList]

  success: Boolean
}

type AcceptedOrderList {
  orderIncrementId: String
}

type AssignOrder {
  message: String

  success: Boolean
}

type ChangeDeliveryboyStatus {
  message: String

  success: Boolean
}

type AssignedOrderList {
  message: String

  orderList: [AssignorderList]

  success: Boolean
}

type AssignorderList {
  orderIncrementId: String
}

type AcceptOrder {
  message: String

  success: Boolean
}

type SetStatusOrderPickedup {
  message: String

  success: Boolean
}

type Deliver {
  message: String

  success: Boolean
}

type SetLocation {
  message: String

  success: Boolean
}

type AddReview {
  message: String

  success: Boolean
}

type GetLocation {
  latitude: String

  longitude: String

  message: String

  success: Boolean
}

type GetOrderComments {
  commentList: [CommentList]

  message: String

  success: Boolean
}

type GetDeliveryboyReviewList {
  message: String

  reviewList: [ReviewList]

  success: Boolean

  totalCount: Int
}

type ReviewList {
  avatar: String

  avgRatings: Float

  comment: String

  customerId: Int

  deliveryboyId: Int

  details: String

  id: Int

  name: String

  rating: Float

  ratings: [Ratings]

  reviewBy: String

  reviewOn: String

  status: Boolean

  title: String
}

type GetRegistrationConfig {
  isRegistrationEnabled: Boolean

  message: String

  success: Boolean

  vehicle: [Vehicle]
}

type Vehicle {
  value: String
}

type AddComment {
  commentDetails: [CommentDetails]

  message: String

  success: Boolean
}

type CommentDetails {
  comment: String

  commentedBy: String

  createdAt: String
}

type DeleteDeliveryboyReview {
  message: String

  success: Boolean
}

type EditDeliveryboyReview {
  message: String

  statusList: [StatusList]

  success: Boolean
}

type StatusList {
  label: String

  value: Int
}

type Logout {
  message: String

  success: Boolean
}

type SaveToken {
  message: String

  success: Boolean
}

type Orderlist {
  dateFormat: String

  deliveryboyList: [OrderlistDeliveryboyList]

  message: String

  orderList: [RequestedOrderList]

  orderStatus: [OrderStatus]

  success: Boolean

  totalCount: Int
}

type OrderStatus {
  label: String

  status: String
}

type RequestedOrderList {
  assignStatus: Boolean

  date: String

  deliveryboyId: Int

  deliveryboyName: String

  deliveryboyOrderId: Int

  id: Int

  incrementId: String

  orderId: Int

  orderTotal: String

  shipTo: String

  state: String

  status: String

  time: String
}

type OrderlistDeliveryboyList {
  id: Int

  name: String
}

type ResetPassword {
  message: String

  success: Boolean
}

type ApproveDeliveryboy {
  message: String

  success: Boolean
}

type DeleteReview {
  message: String

  success: Boolean
}

type EditReview {
  message: String

  success: Boolean
}

type GetDisapprovedDeliveryboyList {
  disaprovedDeliveryBoyList: [DisaprovedDeliveryBoyList]

  message: String

  success: Boolean

  totalCount: Int
}

type DisaprovedDeliveryBoyList {
  avatar: String

  createdDate: String

  createdTime: String

  id: Int

  name: String
}

type GetWarehouseAddress {
  message: String

  pickUpAddress: String

  success: Boolean
}

type SaveWarehouseAddress {
  message: String

  success: Boolean
}

type OrderDetails {
  adminAddress: String

  billingAddress: String

  canReorder: Boolean

  creditmemoList: [CreditMemoList]

  customerEmail: String

  customerName: String

  deliveryBoys: [AssignedDeliveryBoyDetails]

  hasCreditmemo: Boolean

  hasInvoices: Boolean

  hasShipments: Boolean

  incrementId: String

  invoiceList: [InvoiceList]

  message: String

  orderData: OrderData

  orderDate: String

  paymentMethod: String

  shipmentList: [ShipmentList]

  shippingAddress: String

  shippingMethod: String

  state: String

  statusColorCode: String

  statusLabel: String

  success: Boolean
}

type CreditView {
  billingAddress: BillingAddress

  itemList: [InvoiceItemList]

  message: String

  orderId: Int

  paymentMethod: PaymentMethod

  shippingAddress: ShippingAddress

  shippingMethod: ShippingMethod

  success: Boolean

  totals: [InvoiceTotalsData]
}

input reviewRatings {
  optionId: Int

  ratingId: Int
}

type UploadBannerPic {
  message: String

  success: Boolean

  url: String
}

input cartItemData {
  id: String

  qty: String
}

input addToCartParams {
  bundleOption: [addToCartBundleOption]

  links: [String]

  options: [addToCartParamsOptions]

  superAttribute: [addToCartSuperAttribute]

  superGroup: [addToCartSuperGroup]
}

input addToCartParamsOptions {
  id: String

  value: [String]
}

input addToCartBundleOption {
  id: String

  qty: String

  value: String
}

input addToCartSuperGroup {
  id: String

  value: String
}

input addToCartSuperAttribute {
  id: String

  value: String
}

input shippingDataInput {
  addressId: String

  newAddress: newAddressInput

  sameAsShipping: String
}

input newAddressInput {
  address_title: String

  city: String

  company: String

  country_id: String

  email: String

  fax: String

  firstName: String

  lastName: String

  middleName: String

  postcode: String

  prefix: String

  region: String

  region_id: String

  saveInAddressBook: String

  street: [String]

  suffix: String

  telephone: String
}

input saveAddressDataInput {
  address_title: String

  city: String

  company: String

  country_id: String

  default_billing: String

  default_shipping: String

  fax: String

  firstName: String

  lastName: String

  middleName: String

  postcode: String

  prefix: String

  region: String

  region_id: String

  street: [String]

  suffix: String

  telephone: String
}

type ShareWishlist {
  message: String

  sentTo: String

  success: Boolean
}

type GuestView {
  message: String

  orderData: GuestOrderData

  success: Boolean
}

type GuestOrderData {
  itemList: [GuestItemList]

  orderInfo: [OrderInfo]

  totals: [OrderItemTotals]
}

type GuestItemList {
  name: String

  price: String

  qty: Int

  sku: String

  subTotal: String
}

type OrderInfo {
  billingAddress: String

  paymentMethod: String

  shippingAddress: String

  shippingMethod: String
}

type GuestReOrder {
  cartCount: Int

  message: String

  quoteId: String

  success: Boolean
}

type AllToCart {
  cartCount: Int

  message: String

  success: Boolean

  warning: Boolean
}

type SearchTermList {
  message: String

  success: Boolean

  termList: [TermList]
}

type TermList {
  ratio: Int

  term: String
}

type SuggestProductArray {
  products: [SuggestProduct]

  tags: [Suggestionproducttags]
}

type Suggestionproducttags {
  count: Int

  label: String
}

type SuggestProduct {
  hasSpecialPrice: Boolean

  price: String

  productId: String

  productName: String

  specialPrice: String

  thumbnail: String
}

type OtherNotificationData {
  content: String

  message: String

  success: Boolean

  title: String
}

type NotificationList {
  message: String

  notificationList: [NotificationListItems]

  success: Boolean
}

type NotificationListItems {
  banner: String

  categoryId: String

  categoryName: String

  content: String

  dominantColor: String

  id: String

  notificationType: String

  productId: String

  productName: String

  productType: String

  title: String
}

type CustomCollection {
  cartCount: Int

  layeredData: [LayeredData]

  message: String

  productList: [OneProductList]

  sortingData: [SortingData]

  success: Boolean

  totalCount: Int
}

type CmsData {
  content: String

  message: String

  success: Boolean

  title: String

  url: String
}

type CreditMemoList {
  incrementId: String

  items: [CreditMemoProductList]

  totals: [OrderItemTotals]
}

type CreditMemoProductList {
  discountAmount: String

  name: String

  option: [ItemListOptions]

  price: String

  qty: Int

  rowTotal: String

  sku: String

  subTotal: String
}

type ShipmentList {
  id: String

  incrementId: String

  items: [ShipmentProductItems]
}

type ShipmentProductItems {
  name: String

  option: [ItemListOptions]

  qty: Int

  sku: String
}

type InvoiceList {
  id: String

  incrementId: String

  items: [InvoiceProductItems]

  price: String

  qty: Int

  sku: String

  subTotal: String

  totals: [OrderItemTotals]
}

type InvoiceProductItems {
  name: String

  options: [ItemListOptions]
}

type OrderData {
  itemList: [ItemList]

  totals: [OrderItemTotals]
}

type ItemList {
  image: String

  name: String

  options: [ItemListOptions]

  price: String

  productId: String

  qty: ListQty

  sku: String

  subTotal: String
}

type ListQty {
  Canceled: Int

  Ordered: Int

  Refunded: Int

  Shipped: Int
}

type OrderItemTotals {
  code: String

  formattedValue: String

  label: String

  value: String
}

type OrderList {
  message: String

  orderList: [OrderListItems]

  success: Boolean

  totalCount: Int
}

type OrderListItems {
  canReorder: Boolean

  date: String

  id: String

  item_count: String

  item_image_url: String

  order_id: String

  order_total: String

  ship_to: String

  state: String

  status: String

  statusColorCode: String
}

type RemoveFromWishlist {
  alreadyDeleted: Boolean

  message: String

  success: Boolean
}

type ReOrder {
  cartCount: Int

  message: String

  success: Boolean
}

type ReviewDetails {
  averageRating: Float

  dominantColor: String

  message: String

  productId: String

  productName: String

  ratingData: [RatingData]

  reviewDate: String

  reviewDetail: String

  reviewTitle: String

  success: Boolean

  thumbNail: String

  totalProductReviews: Int
}

type ReviewListData {
  message: String

  reviewList: [ReviewListItems]

  success: Boolean

  totalCount: Int
}

type ReviewListItems {
  customerRating: Float

  dominantColor: String

  id: String

  productId: String

  productName: String

  thumbNail: String
}

type SaveAccountInfo {
  customerName: String

  message: String

  success: Boolean
}

type ShipmentView {
  itemList: [ShipmnetItemList]

  message: String

  orderId: Int

  success: Boolean

  trackingData: [TrackingData]
}

type TrackingData {
  carrier: String

  id: String

  number: String

  title: String
}

type ShipmnetItemList {
  id: String

  name: String

  option: [WishlistOptions]

  productId: String

  qty: Int

  sku: String
}

type WishlistOptions {
  label: String

  value: [String]
}

type WishlistToCart {
  cartCount: Int

  message: String

  productId: Int

  success: Boolean
}

type MyDownloadsList {
  downloadsList: [DownloadsList]

  message: String

  success: Boolean

  totalCount: Int
}

type DownloadsList {
  canReorder: Boolean

  date: String

  hash: String

  incrementId: String

  isOrderExist: Boolean

  message: String

  proName: String

  remainingDownloads: String

  state: String

  status: String

  statusColorCode: String
}

type DownloadProduct {
  fileName: String

  message: String

  mimeType: String

  success: Boolean

  url: String
}

type InvoiceView {
  billingAddress: BillingAddress

  itemList: [InvoiceItemList]

  message: String

  orderId: Int

  paymentMethod: PaymentMethod

  shippingAddress: ShippingAddress

  shippingMethod: ShippingMethod

  success: Boolean

  totals: [InvoiceTotalsData]
}

type InvoiceTotalsData {
  formattedValue: String

  label: String

  title: String

  value: String
}

type InvoiceItemList {
  discountAmount: String

  id: String

  name: String

  option: [ItemListOptions]

  price: String

  productId: String

  qty: Int

  rowTotal: String

  sku: String

  subTotal: String

  taxAmount: String
}

type ItemListOptions {
  label: String

  value: [String]
}

type ShippingMethod {
  title: String
}

type PaymentMethod {
  title: String
}

type ShippingAddress {
  city: String

  country: String

  firstname: String

  lastname: String

  pincode: String

  region: String

  street: [String]
}

type BillingAddress {
  city: String

  country: String

  firstname: String

  lastname: String

  pincode: String

  region: String

  street: [String]
}

type CreateAccountFormData {
  dateFormat: String

  isDOBRequired: Boolean

  isDOBVisible: Boolean

  isGenderRequired: Boolean

  isGenderVisible: Boolean

  isMiddlenameVisible: Boolean

  isMobileRequired: Boolean

  isMobileVisible: Boolean

  isPrefixRequired: Boolean

  isPrefixVisible: Boolean

  isSuffixRequired: Boolean

  isSuffixVisible: Boolean

  isTaxRequired: Boolean

  isTaxVisible: Boolean

  message: String

  prefixHasOptions: Boolean

  prefixOptions: [String]

  success: Boolean

  suffixHasOptions: Boolean

  suffixOptions: [String]
}

type CreateAccount {
  bannerImage: String

  bearerToken: String

  cartCount: Int

  customerEmail: String

  customerId: String

  customerName: String

  customerToken: String

  message: String

  profileImage: String

  success: Boolean
}

type CheckCustomerByEmail {
  isCustomerExist: Boolean

  message: String

  success: Boolean
}

type AddressFormDataRequest {
  addressData: AddressData

  allowToChooseState: Boolean

  countryData: [CountryData]

  defaultCountry: String

  firstName: String

  isAddressTitleRequired: Boolean

  isAddressTitleVisible: Boolean

  isCompanyRequired: Boolean

  isCompanyVisible: Boolean

  isDOBVisible: Boolean

  isFaxVisible: Boolean

  isGenderVisible: Boolean

  isMiddlenameVisible: Boolean

  isPrefixVisible: Boolean

  isSuffixVisible: Boolean

  isTaxVisible: Boolean

  isTelephoneRequired: Boolean

  isTelephoneVisible: Boolean

  lastName: String

  message: String

  streetLineCount: Int

  success: Boolean
}

type AddressData {
  city: String

  company: String

  country_id: String

  created_at: String

  entity_id: String

  fax: String

  firstname: String

  increment_id: String

  isDefaultBilling: Boolean

  isDefaultShipping: Boolean

  is_active: String

  lastname: String

  middlename: String

  parent_id: String

  postcode: String

  prefix: String

  region: String

  region_id: String

  street: [String]

  suffix: String

  telephone: String

  updated_at: String

  vat_id: String

  vat_is_valid: String

  vat_request_date: String

  vat_request_id: String

  vat_request_success: String
}

type AddressBookData {
  additionalAddress: [Addresses]

  addressCount: Int

  billingAddress: Addresses

  message: String

  otherError: String

  shippingAddress: Addresses

  success: Boolean
}

type Addresses {
  addressTitle: String

  id: String

  value: String
}

type AccountInfoData {
  DOBValue: String

  dateFormat: String

  email: String

  firstName: String

  genderValue: String

  isDOBRequired: Boolean

  isDOBVisible: Boolean

  isFaxRequired: Boolean

  isFaxVisible: Boolean

  isGenderRequired: Boolean

  isGenderVisible: Boolean

  isMiddlenameVisible: Boolean

  isMobileRequired: Boolean

  isMobileVisible: Boolean

  isPrefixRequired: Boolean

  isPrefixVisible: Boolean

  isSuffixRequired: Boolean

  isSuffixVisible: Boolean

  isTaxRequired: Boolean

  isTaxVisible: Boolean

  isTelephoneRequired: Boolean

  isTelephoneVisible: Boolean

  lastName: String

  message: String

  middleName: String

  prefixHasOptions: Boolean

  prefixOptions: [String]

  prefixValue: String

  success: Boolean

  suffixHasOptions: Boolean

  suffixOptions: [String]

  suffixValue: String

  taxValue: String
}

type WishlistFromCart {
  cartCount: Int

  discount: CartTotalData

  grandtotal: CartTotalData

  message: String

  shipping: CartTotalData

  subtotal: CartTotalData

  success: Boolean

  tax: CartTotalData
}

type UpdateItemOptions {
  cartCount: Int

  message: String

  success: Boolean
}

type UpdateCart {
  cartCount: Int

  message: String

  success: Boolean
}

type ShippingMethods {
  cartCount: Int

  cartTotal: String

  message: String

  shippingMethods: [ShippingMethodList]

  success: Boolean
}

type ShippingMethodList {
  isSelected: Boolean

  method: [Method]

  title: String
}

type Method {
  code: String

  isSelected: Boolean

  label: String

  price: String
}

type ReviewAndPayment {
  billingAddress: String

  cartCount: Int

  cartTotal: String

  couponCode: String

  currencyCode: String

  message: String

  orderReviewData: OrderReviewData

  paymentMethods: [PaymentMethods]

  quoteId: Int

  shippingAddress: String

  shippingMethod: String

  success: Boolean
}

type OrderReviewData {
  cartTotal: Int

  items: [ReviewItems]

  totals: [CartTotalData]
}

type ReviewItems {
  dominantColor: String

  options: [CartItemOptions]

  originalPrice: String

  price: String

  productName: String

  qty: Int

  subTotal: String

  thumbnail: String

  unformattedOriginalPrice: Float

  unformattedPrice: Float
}

type PaymentMethods {
  code: String

  extraInformation: String

  imageUrl: String

  link: String

  title: String
}

type RemoveCartItem {
  cartCount: Int

  discount: CartTotalData

  grandtotal: CartTotalData

  message: String

  shipping: CartTotalData

  subtotal: CartTotalData

  success: Boolean

  tax: CartTotalData
}

type PlaceOrder {
  canReorder: Boolean

  cartCount: Int

  customerDetails: OrderCustomerDetails

  email: String

  incrementId: String

  message: String

  orderId: String

  showCreateAccountLink: Boolean

  success: Boolean
}

type OrderCustomerDetails {
  email: String

  firstname: String

  groupId: String

  guestCustomer: Boolean

  lastname: String

  middlename: String
}

type CheckoutAddressFormData {
  address: [CheckoutAddressData]

  addressData: AddressFormData

  countryData: [CountryData]

  defaultCountry: String

  firstName: String

  isAddressTitleRequired: Boolean

  isAddressTitleVisible: Boolean

  isCompanyRequired: Boolean

  isCompanyVisible: Boolean

  isDOBRequired: Boolean

  isDOBVisible: Boolean

  isFaxRequired: Boolean

  isFaxVisible: Boolean

  isGenderRequired: Boolean

  isGenderVisible: Boolean

  isGuest: Boolean

  isMiddlenameVisible: Boolean

  isPrefixRequired: Boolean

  isPrefixVisible: Boolean

  isSuffixRequired: Boolean

  isSuffixVisible: Boolean

  isTaxRequired: Boolean

  isTaxVisible: Boolean

  isTelephoneRequired: Boolean

  isTelephoneVisible: Boolean

  lastName: String

  message: String

  middleName: String

  prefixHasOptions: Boolean

  prefixOptions: [String]

  prefixValue: String

  streetLineCount: Int

  success: Boolean

  suffixHasOptions: Boolean

  suffixOptions: [String]

  suffixValue: String
}

type CountryData {
  country_id: String

  isStateRequired: Boolean

  isZipOptional: Boolean

  name: String

  states: [States]
}

type States {
  code: String

  name: String

  region_id: String
}

type AddressFormData {
  city: String

  company: String

  country_id: String

  created_at: String

  entity_id: String

  fax: String

  firstname: String

  increment_id: String

  isDefaultBilling: Boolean

  isDefualtShipping: Boolean

  is_active: String

  lastname: String

  middlename: String

  parent_id: String

  postcode: String

  prifix: String

  region: String

  region_id: String

  street: [String]

  suffix: String

  telephone: String

  updated_at: String

  var_request_success: String

  vat_id: String

  vat_is_valid: String

  vat_request_date: String

  vat_request_id: String
}

type CheckoutAddress {
  SuffixHasOptions: Boolean

  SuffixOptions: [String]

  address: [CheckoutAddressData]

  allowToChooseState: Boolean

  cartCount: Int

  defaultCountry: String

  firstName: String

  isMiddlenameVisible: Boolean

  isPrefixRequired: Boolean

  isPrefixVisible: Boolean

  isSuffixRequired: Boolean

  isSuffixVisible: Boolean

  isVirtual: Boolean

  lastName: String

  message: String

  middleName: String

  prefixHasOptions: Boolean

  prefixOptions: [String]

  prefixValue: String

  streetLineCount: Int

  success: Boolean

  suffixValue: String
}

type CheckoutAddressData {
  id: String

  value: String
}

type CartDetails {
  allowMultipleShipping: Boolean

  canGuestCheckoutDownloadable: Boolean

  cartCount: Int

  cartTotal: String

  couponCode: String

  crossSellList: [OneProductList]

  descriptionMessage: String

  isAllowedGuestCheckout: Boolean

  isCheckoutAllowed: Boolean

  isVirtual: Boolean

  items: [CartItems]

  message: String

  minimumAmount: Int

  minimumFormattedAmount: String

  quoteId: Int

  showThreshold: Boolean

  success: Boolean

  totalCount: Int

  totalsData: [CartTotalData]

  unformattedCartTotal: Float
}

type CartTotalData {
  formattedValue: String

  title: String

  unformattedValue: Float

  value: String
}

type CartItemOptions {
  label: String

  optionId: String

  value: [String]

  valueIds: [String]
}

type DefaultResponse {
  message: String

  success: Boolean
}

type AddToCart {
  canGuestCheckoutDownloadable: Boolean

  cartCount: Int

  cartTotal: Float

  cartTotalFormattedAmount: String

  descriptionMessage: String

  isAllowedGuestCheckout: Boolean

  isCheckoutAllowed: Boolean

  isVirtual: Boolean

  message: String

  minimumAmount: Int

  minimumFormattedAmount: String

  quoteId: Int

  success: Boolean
}

type WalkThrough {
  message: String

  success: Boolean

  walkthroughData: [WalkThroughData]

  walkthroughVersion: Float
}

type WalkThroughData {
  colorCode: String

  content: String

  image: String

  imageDominantColor: String

  title: String
}

type UpsellProductList {
  message: String

  productList: [OneProductList]

  success: Boolean
}

type ReviewsAndRatings {
  message: String

  rating: String

  ratingData: [RatingData]

  ratingFormData: [RatingDataForm]

  reviewList: [ReviewList]

  showRatings: String

  success: Boolean

  totalCount: Int
}

type RatingForm {
  message: String

  ratingFormData: [RatingDataForm]

  success: Boolean
}

type RatingDataForm {
  id: String

  name: String

  values: [String]
}

type AddToWishlist {
  itemId: Int

  message: String

  success: Boolean
}

type AdvancedSearchFormData {
  fieldList: [FieldList]

  message: String

  success: Boolean
}

type FieldList {
  attributeCode: String

  fieldList: String

  label: String

  maxQueryLength: String

  options: [FieldListOptions]

  title: String
}

type FieldListOptions {
  label: String

  value: String
}

"""
home page all information
"""
type HomePageData {
  allowAndroidDownload: String

  allowIosDownload: String

  """
  allowedCurrencies Data Information
  """
  allowedCurrencies: [AllowedCurrencies]

  androidDownloadLink: String

  appButtonColor: String

  appLogo: String

  appLogoDominantColor: String

  appThemeColor: String

  appThemeTextColor: String

  bannerDominantColor: String

  """
  Banner information
  """
  bannerImages: [BannerImages]

  buttonTextColor: String

  """
  Carousel information
  """
  carousel: [Carousel]

  cartCount: Int

  """
  category information
  """
  categories: [Categories]

  """
  Cms Data Information
  """
  cmsData: [HomePageCmsData]

  currentCurrency: String

  customerBannerImage: String

  customerDominantColor: String

  customerEmail: String

  customerName: String

  customerProfileImage: String

  customerWishlist: [Int]

  darkAppButtonColor: String

  darkAppLogo: String

  darkAppLogoDominantColor: String

  darkAppThemeColor: String

  darkAppThemeTextColor: String

  darkButtonTextColor: String

  darkSplashImage: String

  defaultCurrency: String

  """
  featuredCategories category information
  """
  featuredCategories: [CategoryInfo]

  iosDownloadLink: String

  launcherIconType: String

  message: String

  otherError: String

  priceFormat: PriceFormat

  showSwatchOnCollection: String

  sortOrder: [SortOrder]

  splashImage: String

  """
  storeData Data Information
  """
  storeData: [StoreData]

  storeId: Int

  success: Boolean

  tabCategoryView: String

  themeCode: String

  themeType: Int

  walkthroughVersion: String

  watchEnabled: Boolean

  websiteData: [WebsitesData]

  websiteId: Int

  wishlistEnable: String
}

type WebsitesData {
  baseUrl: String

  defaultStoreId: Int

  id: Int

  name: String
}

"""
home page configurator sort order
"""
type SortOrder {
  id: Int

  label: String

  layoutId: String

  position: String

  type: String
}

"""
category page all information
"""
type CategoryPageData {
  bannerImage: [CategoryBanners]

  cartCount: Int

  categories: [ParentCategories]

  entityId: Int

  message: String

  productList: [OneProductList]

  smallBannerImage: [CategoryBanners]

  success: Boolean
}

"""
product collection data
"""
type ProductCollection {
  banners: [Banners]

  cartCount: Int

  childCategories: [ChildCategories]

  criteriaData: String

  layeredData: [LayeredData]

  message: String

  productList: [OneProductList]

  sortingData: [SortingData]

  success: Boolean

  totalCount: Int
}

input collectionSort {
  code: String

  direction: String
}

input collectionFilter {
  code: String

  value: String
}

"""
product page all information
"""
type ProductPageData {
  additionalInformation: [ProductAdditionalInfo]

  arTextureImages: [String]

  arType: String

  arUrl: String

  availability: String

  bundleOptions: [BundleOptions]

  canGuestCheckoutDownloadable: Boolean

  cartCount: Int

  configurableData: ConfigurableData

  customOptions: [CustomOptions]

  description: String

  dominantColor: String

  finalPrice: Float

  formattedFinalPrice: String

  formattedMaxPrice: String

  formattedMinPrice: String

  formattedMsrp: String

  formattedPrice: String

  formattedSpecialPrice: String

  groupedData: [GroupedData]

  groupedPrice: String

  guestCanReview: Boolean

  id: String

  imageGallery: [ProductImageGallery]

  isAllowedGuestCheckout: Boolean

  isCheckoutAllowed: Boolean

  isInWishlist: Boolean

  isThresholdVisible: Boolean

  is_new: Boolean

  links: DownloadableLinks

  maxPrice: Float

  message: String

  minAddToCartQty: Int

  minPrice: Float

  msrp: Float

  msrpDisplayActualPriceType: String

  msrpEnabled: Boolean

  name: String

  price: Float

  priceFormat: PriceFormat

  priceView: String

  productUrl: String

  rating: Float

  ratingArray: [String]

  ratingData: [RatingData]

  ratingFormData: [RatingFormData]

  relatedProductList: [OneProductList]

  reviewCount: Int

  reviewList: [ReviewList]

  samples: DownloadableSamples

  shortDescription: String

  showBackInStockAlert: Boolean

  showPriceDropAlert: Boolean

  specialPrice: Float

  success: Boolean

  thresholdQtyLeft: Int

  thumbNail: String

  tierPrices: [String]

  typeId: String

  upsellProductList: [OneProductList]

  wishlistItemId: Int
}

type GetCategoryList {
  categoryData: [CategoryData]

  message: String

  success: Boolean
}

type CompareAttributeList {
  attributeName: String

  value: [String]
}

type CategoryData {
  dominantColor: String

  id: String

  img_url: String

  name: String
}

type BundleOptions {
  default_title: String

  optionValues: [GroupedOptionValues]

  option_id: String

  parent_id: String

  position: String

  required: String

  title: String

  type: String
}

type GroupedOptionValues {
  defaultQty: String

  foramtedPrice: String

  isDefault: String

  isQtyUserDefined: String

  isSingle: Boolean

  optionValueId: String

  price: Int

  title: String
}

type GroupedData {
  defaultQty: Int

  dominantColor: String

  foramtedPrice: String

  id: String

  isAvailable: Boolean

  isInRange: Boolean

  name: String

  specialPrice: String

  thumbNail: String
}

type DownloadableSamples {
  hasSample: Boolean

  linkSampleData: [LinkSampleData]

  title: String
}

type LinkSampleData {
  fileName: String

  mimeType: String

  sampleTitle: String

  url: String
}

type DownloadableLinks {
  linkData: [LinkData]

  linksPurchasedSeparately: Boolean

  title: String
}

type LinkData {
  fileName: String

  formattedPrice: String

  haveLinkSample: Int

  id: String

  linkSampleTitle: String

  linkTitle: String

  mimeType: String

  price: String

  url: String
}

type CustomOptions {
  decorated_is_first: String

  decorated_is_last: Boolean

  decorated_is_odd: Boolean

  default_price: String

  default_price_type: String

  default_title: String

  file_extension: String

  formatted_default_price: String

  formatted_price: String

  image_size_x: String

  image_size_y: String

  is_require: String

  max_characters: String

  optionValues: [OptionValues]

  option_id: String

  price: String

  price_type: String

  product_id: String

  sku: String

  sort_order: String

  store_price: String

  store_price_type: String

  store_title: String

  title: String

  type: String

  unformatted_default_price: String

  unformatted_price: String
}

type OptionValues {
  default_price: String

  default_price_type: String

  default_title: String

  formatted_default_price: String

  formatted_price: String

  option_id: String

  option_type_id: String

  price: String

  price_type: String

  sku: String

  sort_order: String

  store_price: String

  store_price_type: String

  store_title: String

  title: String
}

type Ratings {
  label: String

  value: String
}

type RatingData {
  ratingCode: String

  ratingValue: Float
}

type RatingFormData {
  id: String

  name: String

  values: [String]
}

type ProductAdditionalInfo {
  label: String

  value: String
}

type ProductImageGallery {
  dominantColor: String

  isVideo: Boolean

  largeImage: String

  smallImage: String

  videoUrl: String
}

type Banners {
  bannerImage: String

  dominantColor: String
}

type SortingData {
  code: String

  label: String
}

type LayeredData {
  code: String

  is_filterable: Boolean

  label: String

  options: [FilterOptions]
}

type FilterOptions {
  count: Int

  id: String

  label: String
}

type ChildCategories {
  hasChildren: Boolean

  id: Int

  name: String
}

type ParentCategories {
  banner: String

  bannerDominantColor: String

  childCategories: [Categories]

  hasChildren: Boolean

  id: Int

  name: String

  thumbnail: String

  thumbnailDominantColor: String
}

type CategoryBanners {
  dominantColor: String

  url: String
}

type AllowedCurrencies {
  code: String

  label: String
}

type Categories {
  banner: String

  bannerDominantColor: String

  hasChildren: Boolean

  id: Int

  name: String

  thumbnail: String

  thumbnailDominantColor: String
}

type CategoryInfo {
  categoryId: Int

  categoryName: String

  dominantColor: String

  url: String
}

type BannerImages {
  bannerType: String

  dominantColor: String

  id: Int

  name: String

  url: String
}

type Carousel {
  banners: [BannerImages]

  color: String

  dominantColor: String

  id: String

  image: String

  label: String

  productList: [OneProductList]

  type: String
}

type OneProductList {
  arTextureImages: [String]

  arType: String

  arUrl: String

  availability: String

  categoryId: Int

  configurableData: ConfigurableData

  dominantColor: String

  entityId: Int

  finalPrice: String

  formattedFinalPrice: String

  formattedMaxPrice: String

  formattedMinPrice: String

  formattedPrice: String

  formattedTierPrice: String

  groupedPrice: String

  hasRequiredOptions: Boolean

  isAvailable: Boolean

  isInRange: Boolean

  isInWishlist: Boolean

  isNew: Boolean

  linksPurchasedSeparately: Boolean

  maxPrice: String

  minAddToCartQty: Int

  minPrice: String

  msrpDisplayActualPriceType: String

  msrpEnabled: Boolean

  name: String

  price: String

  priceView: String

  rating: String

  reviewCount: Int

  thumbNail: String

  tierPrice: String

  typeId: String

  wishlistItemId: Int
}

type ConfigurableData {
  attributes: [ConfigurableAttributes]

  chooseText: String

  images: String

  index: String

  optionPrices: [ConfigOptionPrices]

  productId: Int

  swatchData: String

  template: String
}

type ConfigurableAttributes {
  code: String

  id: Int

  label: String

  options: [ConfigOptions]

  swatchType: String

  updateProductPreviewImage: Boolean
}

type ConfigOptions {
  id: Int

  label: String

  products: [String]
}

type ConfigOptionPrices {
  basePrice: ConfigPriceAmount

  finalPrice: ConfigPriceAmount

  msrpPrice: ConfigPriceAmount

  oldPrice: ConfigPriceAmount

  product: Int

  tierPrices: ConfigPriceAmount
}

type ConfigPriceAmount {
  amount: Float
}

type HomePageCmsData {
  id: String

  title: String
}

type WebsiteData {
  id: Int

  name: String
}

type StoreDataStores {
  code: String

  id: Int

  name: String
}

type PriceFormat {
  decimalSymbol: String

  groupLength: Int

  groupSymbol: String

  integerRequired: Boolean

  pattern: String

  precision: Int

  requiredPrecision: Int
}

type PrintInvoice {
  message: String

  success: Boolean

  url: String
}

type WatchQr {
  message: String

  qr_url: String

  success: Boolean
}

type WatchLogin {
  message: String

  success: Boolean
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args: [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https:\/\/commonmark.org\/)." reason: String = "No longer supported") on FIELD_DEFINITION|ENUM_VALUE|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION

schema {
  query: Query
  mutation: Mutation
}
